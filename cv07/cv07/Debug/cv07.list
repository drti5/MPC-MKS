
cv07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080065b0  080065b0  000075b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066dc  080066dc  0000807c  2**0
                  CONTENTS
  4 .ARM          00000000  080066dc  080066dc  0000807c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066dc  080066dc  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  2000007c  08006760  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012bc  08006760  000082bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186b7  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346a  00000000  00000000  0002075b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00023bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130f  00000000  00000000  00025448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013842  00000000  00000000  00026757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad38  00000000  00000000  00039f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072b58  00000000  00000000  00054cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7829  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060dc  00000000  00000000  000c786c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cd948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006598 	.word	0x08006598

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08006598 	.word	0x08006598

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a06      	ldr	r2, [pc, #24]	@ (800025c <vApplicationGetIdleTaskMemory+0x28>)
 8000244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <vApplicationGetIdleTaskMemory+0x2c>)
 800024a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2280      	movs	r2, #128	@ 0x80
 8000250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	20000098 	.word	0x20000098
 8000260:	200000ec 	.word	0x200000ec

08000264 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000264:	b5b0      	push	{r4, r5, r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	0008      	movs	r0, r1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	0019      	movs	r1, r3
 8000272:	230b      	movs	r3, #11
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	1c02      	adds	r2, r0, #0
 8000278:	701a      	strb	r2, [r3, #0]
 800027a:	2308      	movs	r3, #8
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	1c0a      	adds	r2, r1, #0
 8000280:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <lis2dw12_read_reg+0x2a>
  {
    return -1;
 8000288:	2301      	movs	r3, #1
 800028a:	425b      	negs	r3, r3
 800028c:	e00f      	b.n	80002ae <lis2dw12_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	685c      	ldr	r4, [r3, #4]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	68d8      	ldr	r0, [r3, #12]
 8000296:	2308      	movs	r3, #8
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	881d      	ldrh	r5, [r3, #0]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	230b      	movs	r3, #11
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	7819      	ldrb	r1, [r3, #0]
 80002a4:	002b      	movs	r3, r5
 80002a6:	47a0      	blx	r4
 80002a8:	0003      	movs	r3, r0
 80002aa:	617b      	str	r3, [r7, #20]

  return ret;
 80002ac:	697b      	ldr	r3, [r7, #20]
}
 80002ae:	0018      	movs	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b006      	add	sp, #24
 80002b4:	bdb0      	pop	{r4, r5, r7, pc}

080002b6 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80002b6:	b5b0      	push	{r4, r5, r7, lr}
 80002b8:	b086      	sub	sp, #24
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	0008      	movs	r0, r1
 80002c0:	607a      	str	r2, [r7, #4]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230b      	movs	r3, #11
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	1c02      	adds	r2, r0, #0
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	2308      	movs	r3, #8
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	1c0a      	adds	r2, r1, #0
 80002d2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d102      	bne.n	80002e0 <lis2dw12_write_reg+0x2a>
  {
    return -1;
 80002da:	2301      	movs	r3, #1
 80002dc:	425b      	negs	r3, r3
 80002de:	e00f      	b.n	8000300 <lis2dw12_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681c      	ldr	r4, [r3, #0]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68d8      	ldr	r0, [r3, #12]
 80002e8:	2308      	movs	r3, #8
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	881d      	ldrh	r5, [r3, #0]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	230b      	movs	r3, #11
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	7819      	ldrb	r1, [r3, #0]
 80002f6:	002b      	movs	r3, r5
 80002f8:	47a0      	blx	r4
 80002fa:	0003      	movs	r3, r0
 80002fc:	617b      	str	r3, [r7, #20]

  return ret;
 80002fe:	697b      	ldr	r3, [r7, #20]
}
 8000300:	0018      	movs	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	b006      	add	sp, #24
 8000306:	bdb0      	pop	{r4, r5, r7, pc}

08000308 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(const stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b087      	sub	sp, #28
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	000a      	movs	r2, r1
 8000312:	1cfb      	adds	r3, r7, #3
 8000314:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000316:	2410      	movs	r4, #16
 8000318:	193a      	adds	r2, r7, r4
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	2301      	movs	r3, #1
 800031e:	2120      	movs	r1, #32
 8000320:	f7ff ffa0 	bl	8000264 <lis2dw12_read_reg>
 8000324:	0003      	movs	r3, r0
 8000326:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d129      	bne.n	8000382 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800032e:	1cfb      	adds	r3, r7, #3
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	089b      	lsrs	r3, r3, #2
 8000334:	1c1a      	adds	r2, r3, #0
 8000336:	2303      	movs	r3, #3
 8000338:	4013      	ands	r3, r2
 800033a:	b2da      	uxtb	r2, r3
 800033c:	193b      	adds	r3, r7, r4
 800033e:	2103      	movs	r1, #3
 8000340:	400a      	ands	r2, r1
 8000342:	0090      	lsls	r0, r2, #2
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	210c      	movs	r1, #12
 8000348:	438a      	bics	r2, r1
 800034a:	1c11      	adds	r1, r2, #0
 800034c:	1c02      	adds	r2, r0, #0
 800034e:	430a      	orrs	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8000352:	1cfb      	adds	r3, r7, #3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2203      	movs	r2, #3
 8000358:	4013      	ands	r3, r2
 800035a:	b2da      	uxtb	r2, r3
 800035c:	193b      	adds	r3, r7, r4
 800035e:	2103      	movs	r1, #3
 8000360:	400a      	ands	r2, r1
 8000362:	0010      	movs	r0, r2
 8000364:	781a      	ldrb	r2, [r3, #0]
 8000366:	2103      	movs	r1, #3
 8000368:	438a      	bics	r2, r1
 800036a:	1c11      	adds	r1, r2, #0
 800036c:	1c02      	adds	r2, r0, #0
 800036e:	430a      	orrs	r2, r1
 8000370:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000372:	193a      	adds	r2, r7, r4
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	2120      	movs	r1, #32
 800037a:	f7ff ff9c 	bl	80002b6 <lis2dw12_write_reg>
 800037e:	0003      	movs	r3, r0
 8000380:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d108      	bne.n	800039a <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8000388:	230c      	movs	r3, #12
 800038a:	18fa      	adds	r2, r7, r3
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	2301      	movs	r3, #1
 8000390:	2125      	movs	r1, #37	@ 0x25
 8000392:	f7ff ff67 	bl	8000264 <lis2dw12_read_reg>
 8000396:	0003      	movs	r3, r0
 8000398:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d11a      	bne.n	80003d6 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80003a0:	1cfb      	adds	r3, r7, #3
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	091b      	lsrs	r3, r3, #4
 80003a6:	1c1a      	adds	r2, r3, #0
 80003a8:	2301      	movs	r3, #1
 80003aa:	4013      	ands	r3, r2
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	240c      	movs	r4, #12
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	2101      	movs	r1, #1
 80003b4:	400a      	ands	r2, r1
 80003b6:	0090      	lsls	r0, r2, #2
 80003b8:	781a      	ldrb	r2, [r3, #0]
 80003ba:	2104      	movs	r1, #4
 80003bc:	438a      	bics	r2, r1
 80003be:	1c11      	adds	r1, r2, #0
 80003c0:	1c02      	adds	r2, r0, #0
 80003c2:	430a      	orrs	r2, r1
 80003c4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80003c6:	193a      	adds	r2, r7, r4
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2125      	movs	r1, #37	@ 0x25
 80003ce:	f7ff ff72 	bl	80002b6 <lis2dw12_write_reg>
 80003d2:	0003      	movs	r3, r0
 80003d4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80003d6:	697b      	ldr	r3, [r7, #20]
}
 80003d8:	0018      	movs	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	b007      	add	sp, #28
 80003de:	bd90      	pop	{r4, r7, pc}

080003e0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(const stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b087      	sub	sp, #28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	000a      	movs	r2, r1
 80003ea:	1cfb      	adds	r3, r7, #3
 80003ec:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80003ee:	2410      	movs	r4, #16
 80003f0:	193a      	adds	r2, r7, r4
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	2301      	movs	r3, #1
 80003f6:	2120      	movs	r1, #32
 80003f8:	f7ff ff34 	bl	8000264 <lis2dw12_read_reg>
 80003fc:	0003      	movs	r3, r0
 80003fe:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d115      	bne.n	8000432 <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8000406:	1cfb      	adds	r3, r7, #3
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	220f      	movs	r2, #15
 800040c:	4013      	ands	r3, r2
 800040e:	b2da      	uxtb	r2, r3
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0110      	lsls	r0, r2, #4
 8000414:	781a      	ldrb	r2, [r3, #0]
 8000416:	210f      	movs	r1, #15
 8000418:	400a      	ands	r2, r1
 800041a:	1c11      	adds	r1, r2, #0
 800041c:	1c02      	adds	r2, r0, #0
 800041e:	430a      	orrs	r2, r1
 8000420:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000422:	193a      	adds	r2, r7, r4
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	2301      	movs	r3, #1
 8000428:	2120      	movs	r1, #32
 800042a:	f7ff ff44 	bl	80002b6 <lis2dw12_write_reg>
 800042e:	0003      	movs	r3, r0
 8000430:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d108      	bne.n	800044a <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000438:	230c      	movs	r3, #12
 800043a:	18fa      	adds	r2, r7, r3
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	2122      	movs	r1, #34	@ 0x22
 8000442:	f7ff ff0f 	bl	8000264 <lis2dw12_read_reg>
 8000446:	0003      	movs	r3, r0
 8000448:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d11a      	bne.n	8000486 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8000450:	1cfb      	adds	r3, r7, #3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	091b      	lsrs	r3, r3, #4
 8000456:	1c1a      	adds	r2, r3, #0
 8000458:	2303      	movs	r3, #3
 800045a:	4013      	ands	r3, r2
 800045c:	b2da      	uxtb	r2, r3
 800045e:	240c      	movs	r4, #12
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2103      	movs	r1, #3
 8000464:	400a      	ands	r2, r1
 8000466:	0010      	movs	r0, r2
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	2103      	movs	r1, #3
 800046c:	438a      	bics	r2, r1
 800046e:	1c11      	adds	r1, r2, #0
 8000470:	1c02      	adds	r2, r0, #0
 8000472:	430a      	orrs	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000476:	193a      	adds	r2, r7, r4
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	2301      	movs	r3, #1
 800047c:	2122      	movs	r1, #34	@ 0x22
 800047e:	f7ff ff1a 	bl	80002b6 <lis2dw12_write_reg>
 8000482:	0003      	movs	r3, r0
 8000484:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000486:	697b      	ldr	r3, [r7, #20]
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b007      	add	sp, #28
 800048e:	bd90      	pop	{r4, r7, pc}

08000490 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	000a      	movs	r2, r1
 800049a:	1cfb      	adds	r3, r7, #3
 800049c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800049e:	2408      	movs	r4, #8
 80004a0:	193a      	adds	r2, r7, r4
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	2301      	movs	r3, #1
 80004a6:	2121      	movs	r1, #33	@ 0x21
 80004a8:	f7ff fedc 	bl	8000264 <lis2dw12_read_reg>
 80004ac:	0003      	movs	r3, r0
 80004ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d117      	bne.n	80004e6 <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 80004b6:	1cfb      	adds	r3, r7, #3
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2101      	movs	r1, #1
 80004c4:	400a      	ands	r2, r1
 80004c6:	00d0      	lsls	r0, r2, #3
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	2108      	movs	r1, #8
 80004cc:	438a      	bics	r2, r1
 80004ce:	1c11      	adds	r1, r2, #0
 80004d0:	1c02      	adds	r2, r0, #0
 80004d2:	430a      	orrs	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80004d6:	193a      	adds	r2, r7, r4
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	2121      	movs	r1, #33	@ 0x21
 80004de:	f7ff feea 	bl	80002b6 <lis2dw12_write_reg>
 80004e2:	0003      	movs	r3, r0
 80004e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b005      	add	sp, #20
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(const stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	000a      	movs	r2, r1
 80004fa:	1cfb      	adds	r3, r7, #3
 80004fc:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80004fe:	2408      	movs	r4, #8
 8000500:	193a      	adds	r2, r7, r4
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	2301      	movs	r3, #1
 8000506:	2125      	movs	r1, #37	@ 0x25
 8000508:	f7ff feac 	bl	8000264 <lis2dw12_read_reg>
 800050c:	0003      	movs	r3, r0
 800050e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d117      	bne.n	8000546 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8000516:	1cfb      	adds	r3, r7, #3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2203      	movs	r2, #3
 800051c:	4013      	ands	r3, r2
 800051e:	b2da      	uxtb	r2, r3
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2103      	movs	r1, #3
 8000524:	400a      	ands	r2, r1
 8000526:	0110      	lsls	r0, r2, #4
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	2130      	movs	r1, #48	@ 0x30
 800052c:	438a      	bics	r2, r1
 800052e:	1c11      	adds	r1, r2, #0
 8000530:	1c02      	adds	r2, r0, #0
 8000532:	430a      	orrs	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8000536:	193a      	adds	r2, r7, r4
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	2125      	movs	r1, #37	@ 0x25
 800053e:	f7ff feba 	bl	80002b6 <lis2dw12_write_reg>
 8000542:	0003      	movs	r3, r0
 8000544:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b005      	add	sp, #20
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800055a:	240c      	movs	r4, #12
 800055c:	193a      	adds	r2, r7, r4
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	2306      	movs	r3, #6
 8000562:	2128      	movs	r1, #40	@ 0x28
 8000564:	f7ff fe7e 	bl	8000264 <lis2dw12_read_reg>
 8000568:	0003      	movs	r3, r0
 800056a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	785b      	ldrb	r3, [r3, #1]
 8000572:	b21a      	sxth	r2, r3
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2200      	movs	r2, #0
 800057c:	5e9b      	ldrsh	r3, [r3, r2]
 800057e:	b29b      	uxth	r3, r3
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b29b      	uxth	r3, r3
 8000584:	187a      	adds	r2, r7, r1
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	189b      	adds	r3, r3, r2
 800058a:	b29b      	uxth	r3, r3
 800058c:	b21a      	sxth	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000592:	187b      	adds	r3, r7, r1
 8000594:	78da      	ldrb	r2, [r3, #3]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	3302      	adds	r3, #2
 800059a:	b212      	sxth	r2, r2
 800059c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	3302      	adds	r3, #2
 80005a2:	2200      	movs	r2, #0
 80005a4:	5e9b      	ldrsh	r3, [r3, r2]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	187a      	adds	r2, r7, r1
 80005ae:	7892      	ldrb	r2, [r2, #2]
 80005b0:	189b      	adds	r3, r3, r2
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	3302      	adds	r3, #2
 80005b8:	b212      	sxth	r2, r2
 80005ba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	795a      	ldrb	r2, [r3, #5]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3304      	adds	r3, #4
 80005c4:	b212      	sxth	r2, r2
 80005c6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	3304      	adds	r3, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	5e9b      	ldrsh	r3, [r3, r2]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	187a      	adds	r2, r7, r1
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	189b      	adds	r3, r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	3304      	adds	r3, #4
 80005e2:	b212      	sxth	r2, r2
 80005e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80005e6:	697b      	ldr	r3, [r7, #20]
}
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b007      	add	sp, #28
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	2301      	movs	r3, #1
 8000600:	210f      	movs	r1, #15
 8000602:	f7ff fe2f 	bl	8000264 <lis2dw12_read_reg>
 8000606:	0003      	movs	r3, r0
 8000608:	60fb      	str	r3, [r7, #12]

  return ret;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b004      	add	sp, #16
 8000612:	bd80      	pop	{r7, pc}

08000614 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(const stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	000a      	movs	r2, r1
 800061e:	1cfb      	adds	r3, r7, #3
 8000620:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8000622:	2408      	movs	r4, #8
 8000624:	193a      	adds	r2, r7, r4
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	2301      	movs	r3, #1
 800062a:	212e      	movs	r1, #46	@ 0x2e
 800062c:	f7ff fe1a 	bl	8000264 <lis2dw12_read_reg>
 8000630:	0003      	movs	r3, r0
 8000632:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d115      	bne.n	8000666 <lis2dw12_fifo_mode_set+0x52>
  {
    reg.fmode = (uint8_t) val;
 800063a:	1cfb      	adds	r3, r7, #3
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2207      	movs	r2, #7
 8000640:	4013      	ands	r3, r2
 8000642:	b2da      	uxtb	r2, r3
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0150      	lsls	r0, r2, #5
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	211f      	movs	r1, #31
 800064c:	400a      	ands	r2, r1
 800064e:	1c11      	adds	r1, r2, #0
 8000650:	1c02      	adds	r2, r0, #0
 8000652:	430a      	orrs	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8000656:	193a      	adds	r2, r7, r4
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	2301      	movs	r3, #1
 800065c:	212e      	movs	r1, #46	@ 0x2e
 800065e:	f7ff fe2a 	bl	80002b6 <lis2dw12_write_reg>
 8000662:	0003      	movs	r3, r0
 8000664:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b005      	add	sp, #20
 800066e:	bd90      	pop	{r4, r7, pc}

08000670 <lis2dw12_fifo_data_level_get>:
  * @param  val      change the values of diff in reg FIFO_SAMPLES
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_data_level_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  lis2dw12_fifo_samples_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_SAMPLES, (uint8_t *) &reg, 1);
 800067a:	2408      	movs	r4, #8
 800067c:	193a      	adds	r2, r7, r4
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	2301      	movs	r3, #1
 8000682:	212f      	movs	r1, #47	@ 0x2f
 8000684:	f7ff fdee 	bl	8000264 <lis2dw12_read_reg>
 8000688:	0003      	movs	r3, r0
 800068a:	60fb      	str	r3, [r7, #12]
  *val = reg.diff;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	069b      	lsls	r3, r3, #26
 8000692:	0e9b      	lsrs	r3, r3, #26
 8000694:	b2db      	uxtb	r3, r3
 8000696:	001a      	movs	r2, r3
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	701a      	strb	r2, [r3, #0]

  return ret;
 800069c:	68fb      	ldr	r3, [r7, #12]
}
 800069e:	0018      	movs	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b005      	add	sp, #20
 80006a4:	bd90      	pop	{r4, r7, pc}
	...

080006a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char const *buf, int n)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	68b9      	ldr	r1, [r7, #8]
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <_write+0x28>)
 80006c0:	f002 fe16 	bl	80032f0 <HAL_UART_Transmit>
	return n;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b004      	add	sp, #16
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000340 	.word	0x20000340

080006d4 <platform_write>:
/*
 * Replace the functions "platform_write" and "platform_read" with your
 * platform specific read and write function.
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	0008      	movs	r0, r1
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	0019      	movs	r1, r3
 80006e2:	240b      	movs	r4, #11
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	1c02      	adds	r2, r0, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	2508      	movs	r5, #8
 80006ec:	197b      	adds	r3, r7, r5
 80006ee:	1c0a      	adds	r2, r1, #0
 80006f0:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)bufp, len, 1000);
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	23fa      	movs	r3, #250	@ 0xfa
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	197b      	adds	r3, r7, r5
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	2133      	movs	r1, #51	@ 0x33
 800070e:	f001 f809 	bl	8001724 <HAL_I2C_Mem_Write>
	return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	b004      	add	sp, #16
 800071a:	bdb0      	pop	{r4, r5, r7, pc}

0800071c <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af04      	add	r7, sp, #16
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	0008      	movs	r0, r1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	0019      	movs	r1, r3
 800072a:	240b      	movs	r4, #11
 800072c:	193b      	adds	r3, r7, r4
 800072e:	1c02      	adds	r2, r0, #0
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	2508      	movs	r5, #8
 8000734:	197b      	adds	r3, r7, r5
 8000736:	1c0a      	adds	r2, r1, #0
 8000738:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT,
 800073a:	193b      	adds	r3, r7, r4
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b29a      	uxth	r2, r3
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	23fa      	movs	r3, #250	@ 0xfa
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	197b      	adds	r3, r7, r5
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	2133      	movs	r1, #51	@ 0x33
 8000756:	f001 f913 	bl	8001980 <HAL_I2C_Mem_Read>
			bufp, len, 1000);
	return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b004      	add	sp, #16
 8000762:	bdb0      	pop	{r4, r5, r7, pc}

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b09a      	sub	sp, #104	@ 0x68
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fcc9 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f85b 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f92b 	bl	80009cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000776:	f000 f8f9 	bl	800096c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800077a:	f000 f8b7 	bl	80008ec <MX_I2C1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xVisualQueue */
  osMessageQDef(xVisualQueue, 16, uint16_t);
 800077e:	2558      	movs	r5, #88	@ 0x58
 8000780:	197b      	adds	r3, r7, r5
 8000782:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <main+0xa4>)
 8000784:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000786:	c313      	stmia	r3!, {r0, r1, r4}
 8000788:	6812      	ldr	r2, [r2, #0]
 800078a:	601a      	str	r2, [r3, #0]
  xVisualQueueHandle = osMessageCreate(osMessageQ(xVisualQueue), NULL);
 800078c:	197b      	adds	r3, r7, r5
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f003 fa3f 	bl	8003c14 <osMessageCreate>
 8000796:	0002      	movs	r2, r0
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <main+0xa8>)
 800079a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800079c:	253c      	movs	r5, #60	@ 0x3c
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <main+0xac>)
 80007a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a4:	c313      	stmia	r3!, {r0, r1, r4}
 80007a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a8:	c313      	stmia	r3!, {r0, r1, r4}
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ae:	197b      	adds	r3, r7, r5
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f003 f9cd 	bl	8003b52 <osThreadCreate>
 80007b8:	0002      	movs	r2, r0
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <main+0xb0>)
 80007bc:	601a      	str	r2, [r3, #0]

  /* definition and creation of VisualTask */
  osThreadDef(VisualTask, StartVisualTask, osPriorityIdle, 0, 128);
 80007be:	2520      	movs	r5, #32
 80007c0:	197b      	adds	r3, r7, r5
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <main+0xb4>)
 80007c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c6:	c313      	stmia	r3!, {r0, r1, r4}
 80007c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ca:	c313      	stmia	r3!, {r0, r1, r4}
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	601a      	str	r2, [r3, #0]
  VisualTaskHandle = osThreadCreate(osThread(VisualTask), NULL);
 80007d0:	197b      	adds	r3, r7, r5
 80007d2:	2100      	movs	r1, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f003 f9bc 	bl	8003b52 <osThreadCreate>
 80007da:	0002      	movs	r2, r0
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <main+0xb8>)
 80007de:	601a      	str	r2, [r3, #0]

  /* definition and creation of AcceleroTask */
  osThreadDef(AcceleroTask, StartAcceleroTask, osPriorityIdle, 0, 128);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <main+0xbc>)
 80007e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007e6:	c313      	stmia	r3!, {r0, r1, r4}
 80007e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ea:	c313      	stmia	r3!, {r0, r1, r4}
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	601a      	str	r2, [r3, #0]
  AcceleroTaskHandle = osThreadCreate(osThread(AcceleroTask), NULL);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 f9ac 	bl	8003b52 <osThreadCreate>
 80007fa:	0002      	movs	r2, r0
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <main+0xc0>)
 80007fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000800:	f003 f99f 	bl	8003b42 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <main+0xa0>
 8000808:	080065b0 	.word	0x080065b0
 800080c:	200003d4 	.word	0x200003d4
 8000810:	080065cc 	.word	0x080065cc
 8000814:	200003c8 	.word	0x200003c8
 8000818:	080065f4 	.word	0x080065f4
 800081c:	200003cc 	.word	0x200003cc
 8000820:	08006620 	.word	0x08006620
 8000824:	200003d0 	.word	0x200003d0

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b095      	sub	sp, #84	@ 0x54
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	2420      	movs	r4, #32
 8000830:	193b      	adds	r3, r7, r4
 8000832:	0018      	movs	r0, r3
 8000834:	2330      	movs	r3, #48	@ 0x30
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f005 f863 	bl	8005904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083e:	2310      	movs	r3, #16
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	2310      	movs	r3, #16
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f005 f85b 	bl	8005904 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084e:	003b      	movs	r3, r7
 8000850:	0018      	movs	r0, r3
 8000852:	2310      	movs	r3, #16
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f005 f854 	bl	8005904 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	0021      	movs	r1, r4
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2202      	movs	r2, #2
 8000862:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2201      	movs	r2, #1
 8000868:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2210      	movs	r2, #16
 800086e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2202      	movs	r2, #2
 8000874:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	22a0      	movs	r2, #160	@ 0xa0
 8000880:	0392      	lsls	r2, r2, #14
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	187b      	adds	r3, r7, r1
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fd3f 	bl	8002310 <HAL_RCC_OscConfig>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000896:	f000 fa1f 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	2110      	movs	r1, #16
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2207      	movs	r2, #7
 80008a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2101      	movs	r1, #1
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 f843 	bl	8002944 <HAL_RCC_ClockConfig>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008c2:	f000 fa09 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008c6:	003b      	movs	r3, r7
 80008c8:	2220      	movs	r2, #32
 80008ca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008cc:	003b      	movs	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d2:	003b      	movs	r3, r7
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 f9a3 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008de:	f000 f9fb 	bl	8000cd8 <Error_Handler>
  }
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b015      	add	sp, #84	@ 0x54
 80008e8:	bd90      	pop	{r4, r7, pc}
	...

080008ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <MX_I2C1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000968 <MX_I2C1_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fe55 	bl	80015d8 <HAL_I2C_Init>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 f9d1 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000938:	2100      	movs	r1, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fc50 	bl	80021e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 f9c8 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <MX_I2C1_Init+0x74>)
 800094a:	2100      	movs	r1, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f001 fc93 	bl	8002278 <HAL_I2CEx_ConfigDigitalFilter>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 f9bf 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200002ec 	.word	0x200002ec
 8000964:	40005400 	.word	0x40005400
 8000968:	00201d2b 	.word	0x00201d2b

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	@ (80009c8 <MX_USART2_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 8000978:	2296      	movs	r2, #150	@ 0x96
 800097a:	0212      	lsls	r2, r2, #8
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <MX_USART2_UART_Init+0x58>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f002 fc49 	bl	8003248 <HAL_UART_Init>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f98d 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000340 	.word	0x20000340
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08b      	sub	sp, #44	@ 0x2c
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	2414      	movs	r4, #20
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	0018      	movs	r0, r3
 80009d8:	2314      	movs	r3, #20
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f004 ff91 	bl	8005904 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b40      	ldr	r3, [pc, #256]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 80009e4:	695a      	ldr	r2, [r3, #20]
 80009e6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 80009e8:	2180      	movs	r1, #128	@ 0x80
 80009ea:	0309      	lsls	r1, r1, #12
 80009ec:	430a      	orrs	r2, r1
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 80009f2:	695a      	ldr	r2, [r3, #20]
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	031b      	lsls	r3, r3, #12
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a00:	695a      	ldr	r2, [r3, #20]
 8000a02:	4b38      	ldr	r3, [pc, #224]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	03c9      	lsls	r1, r1, #15
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	03db      	lsls	r3, r3, #15
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	0289      	lsls	r1, r1, #10
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	029b      	lsls	r3, r3, #10
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	02c9      	lsls	r1, r1, #11
 8000a40:	430a      	orrs	r2, r1
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <MX_GPIO_Init+0x118>)
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	02db      	lsls	r3, r3, #11
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2390      	movs	r3, #144	@ 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	2200      	movs	r2, #0
 8000a58:	2130      	movs	r1, #48	@ 0x30
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fd9e 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_GPIO_Init+0x11c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	2101      	movs	r1, #1
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fd98 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2280      	movs	r2, #128	@ 0x80
 8000a70:	0192      	lsls	r2, r2, #6
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2284      	movs	r2, #132	@ 0x84
 8000a78:	0392      	lsls	r2, r2, #14
 8000a7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <MX_GPIO_Init+0x120>)
 8000a86:	0019      	movs	r1, r3
 8000a88:	0010      	movs	r0, r2
 8000a8a:	f000 fc17 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2230      	movs	r2, #48	@ 0x30
 8000a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2201      	movs	r2, #1
 8000a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	193a      	adds	r2, r7, r4
 8000aa8:	2390      	movs	r3, #144	@ 0x90
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fc04 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000ab4:	0021      	movs	r1, r4
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2201      	movs	r2, #1
 8000ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <MX_GPIO_Init+0x11c>)
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0010      	movs	r0, r2
 8000ad6:	f000 fbf1 	bl	80012bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b00b      	add	sp, #44	@ 0x2c
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	48000800 	.word	0x48000800

08000af0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f003 f877 	bl	8003bec <osDelay>
 8000afe:	e7fb      	b.n	8000af8 <StartDefaultTask+0x8>

08000b00 <StartVisualTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVisualTask */
void StartVisualTask(void const * argument)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVisualTask */
	/* Infinite loop */
	for (;;) {

		int16_t msg;
		if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY)) {
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <StartVisualTask+0x94>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4252      	negs	r2, r2
 8000b10:	240e      	movs	r4, #14
 8000b12:	1939      	adds	r1, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	f003 fb14 	bl	8004142 <xQueueReceive>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d036      	beq.n	8000b8c <StartVisualTask+0x8c>

			if (msg < -2000) {
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	5e9b      	ldrsh	r3, [r3, r2]
 8000b24:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <StartVisualTask+0x98>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	da0d      	bge.n	8000b46 <StartVisualTask+0x46>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000b2a:	2390      	movs	r3, #144	@ 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2110      	movs	r1, #16
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fd32 	bl	800159c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <StartVisualTask+0x9c>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fd2c 	bl	800159c <HAL_GPIO_WritePin>
 8000b44:	e022      	b.n	8000b8c <StartVisualTask+0x8c>
			} else if (msg > 2000) {
 8000b46:	230e      	movs	r3, #14
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	5e9a      	ldrsh	r2, [r3, r2]
 8000b4e:	23fa      	movs	r3, #250	@ 0xfa
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dd0d      	ble.n	8000b72 <StartVisualTask+0x72>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000b56:	2390      	movs	r3, #144	@ 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fd1c 	bl	800159c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000b64:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <StartVisualTask+0x9c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fd16 	bl	800159c <HAL_GPIO_WritePin>
 8000b70:	e00c      	b.n	8000b8c <StartVisualTask+0x8c>
			} else {
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000b72:	2390      	movs	r3, #144	@ 0x90
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fd0e 	bl	800159c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <StartVisualTask+0x9c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fd08 	bl	800159c <HAL_GPIO_WritePin>
			}
		}

		osDelay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f003 f82d 	bl	8003bec <osDelay>
	for (;;) {
 8000b92:	e7b9      	b.n	8000b08 <StartVisualTask+0x8>
 8000b94:	200003d4 	.word	0x200003d4
 8000b98:	fffff830 	.word	0xfffff830
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAcceleroTask */
	uint8_t samples;
	int16_t raw_acceleration[3];
	lis2dw12_fifo_data_level_get(&lis2dw12, &samples);
 8000ba8:	2316      	movs	r3, #22
 8000baa:	18fa      	adds	r2, r7, r3
 8000bac:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff fd5d 	bl	8000670 <lis2dw12_fifo_data_level_get>

	uint8_t whoamI = 0;
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get(&lis2dw12, &whoamI);
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	187a      	adds	r2, r7, r1
 8000bc2:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fd12 	bl	80005f0 <lis2dw12_device_id_get>
	printf("LIS2DW12_ID %s\n", (whoamI == LIS2DW12_ID) ? "OK" : "FAIL");
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b44      	cmp	r3, #68	@ 0x44
 8000bd2:	d101      	bne.n	8000bd8 <StartAcceleroTask+0x38>
 8000bd4:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <StartAcceleroTask+0xfc>)
 8000bd6:	e000      	b.n	8000bda <StartAcceleroTask+0x3a>
 8000bd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <StartAcceleroTask+0x100>)
 8000bda:	4a32      	ldr	r2, [pc, #200]	@ (8000ca4 <StartAcceleroTask+0x104>)
 8000bdc:	0019      	movs	r1, r3
 8000bde:	0010      	movs	r0, r2
 8000be0:	f004 fe34 	bl	800584c <iprintf>

	lis2dw12_full_scale_set(&lis2dw12, LIS2DW12_2g);
 8000be4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fc81 	bl	80004f0 <lis2dw12_full_scale_set>
	lis2dw12_power_mode_set(&lis2dw12, LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2);
 8000bee:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000bf0:	2111      	movs	r1, #17
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fb88 	bl	8000308 <lis2dw12_power_mode_set>
	lis2dw12_block_data_update_set(&lis2dw12, PROPERTY_ENABLE);
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fc47 	bl	8000490 <lis2dw12_block_data_update_set>
	// enable continuous FIFO
	lis2dw12_fifo_mode_set(&lis2dw12, LIS2DW12_STREAM_MODE);
 8000c02:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000c04:	2106      	movs	r1, #6
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fd04 	bl	8000614 <lis2dw12_fifo_mode_set>
	// enable part from power-down
	lis2dw12_data_rate_set(&lis2dw12, LIS2DW12_XL_ODR_25Hz);
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000c0e:	2103      	movs	r1, #3
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fbe5 	bl	80003e0 <lis2dw12_data_rate_set>
	/* Infinite loop */
	for (;;) {
		for (uint8_t i = 0; i < samples; i++) {
 8000c16:	2317      	movs	r3, #23
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e00c      	b.n	8000c3a <StartAcceleroTask+0x9a>
			// Read acceleration data
			lis2dw12_acceleration_raw_get(&lis2dw12, raw_acceleration);
 8000c20:	2310      	movs	r3, #16
 8000c22:	18fa      	adds	r2, r7, r3
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <StartAcceleroTask+0xf8>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fc91 	bl	8000550 <lis2dw12_acceleration_raw_get>
		for (uint8_t i = 0; i < samples; i++) {
 8000c2e:	2117      	movs	r1, #23
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	3201      	adds	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	2316      	movs	r3, #22
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2217      	movs	r2, #23
 8000c42:	18ba      	adds	r2, r7, r2
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d3ea      	bcc.n	8000c20 <StartAcceleroTask+0x80>

		}
		xQueueSend(xVisualQueueHandle, &raw_acceleration[0], 0);
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <StartAcceleroTask+0x108>)
 8000c4c:	6818      	ldr	r0, [r3, #0]
 8000c4e:	2410      	movs	r4, #16
 8000c50:	1939      	adds	r1, r7, r4
 8000c52:	2300      	movs	r3, #0
 8000c54:	2200      	movs	r2, #0
 8000c56:	f003 f9ac 	bl	8003fb2 <xQueueGenericSend>
		static uint8_t cnt;
		if (++cnt > 20){
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <StartAcceleroTask+0x10c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <StartAcceleroTask+0x10c>)
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <StartAcceleroTask+0x10c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b14      	cmp	r3, #20
 8000c6c:	d910      	bls.n	8000c90 <StartAcceleroTask+0xf0>
			printf("X=%d Y=%d Z=%d\n", raw_acceleration[0], raw_acceleration[1],raw_acceleration[2]);
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2200      	movs	r2, #0
 8000c72:	5e9b      	ldrsh	r3, [r3, r2]
 8000c74:	0019      	movs	r1, r3
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2202      	movs	r2, #2
 8000c7a:	5e9b      	ldrsh	r3, [r3, r2]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2004      	movs	r0, #4
 8000c82:	5e1b      	ldrsh	r3, [r3, r0]
 8000c84:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <StartAcceleroTask+0x110>)
 8000c86:	f004 fde1 	bl	800584c <iprintf>
			cnt = 0;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <StartAcceleroTask+0x10c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f002 ffab 	bl	8003bec <osDelay>
	for (;;) {
 8000c96:	e7be      	b.n	8000c16 <StartAcceleroTask+0x76>
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	0800663c 	.word	0x0800663c
 8000ca0:	08006640 	.word	0x08006640
 8000ca4:	08006648 	.word	0x08006648
 8000ca8:	200003d4 	.word	0x200003d4
 8000cac:	200003d8 	.word	0x200003d8
 8000cb0:	08006658 	.word	0x08006658

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc6:	f000 fa2f 	bl	8001128 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	40002000 	.word	0x40002000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_MspInit+0x50>)
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_MspInit+0x50>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	619a      	str	r2, [r3, #24]
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <HAL_MspInit+0x50>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <HAL_MspInit+0x50>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_MspInit+0x50>)
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0549      	lsls	r1, r1, #21
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_MspInit+0x50>)
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	055b      	lsls	r3, r3, #21
 8000d18:	4013      	ands	r3, r2
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000d1e:	2302      	movs	r3, #2
 8000d20:	425b      	negs	r3, r3
 8000d22:	2200      	movs	r2, #0
 8000d24:	2103      	movs	r1, #3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 faa2 	bl	8001270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b08b      	sub	sp, #44	@ 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	2414      	movs	r4, #20
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	2314      	movs	r3, #20
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f004 fdda 	bl	8005904 <memset>
  if(hi2c->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc8 <HAL_I2C_MspInit+0x90>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d132      	bne.n	8000dc0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_I2C_MspInit+0x94>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_I2C_MspInit+0x94>)
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	02c9      	lsls	r1, r1, #11
 8000d64:	430a      	orrs	r2, r1
 8000d66:	615a      	str	r2, [r3, #20]
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_I2C_MspInit+0x94>)
 8000d6a:	695a      	ldr	r2, [r3, #20]
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	02db      	lsls	r3, r3, #11
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	22c0      	movs	r2, #192	@ 0xc0
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7e:	0021      	movs	r1, r4
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2212      	movs	r2, #18
 8000d84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2201      	movs	r2, #1
 8000d96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <HAL_I2C_MspInit+0x98>)
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	0010      	movs	r0, r2
 8000da0:	f000 fa8c 	bl	80012bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <HAL_I2C_MspInit+0x94>)
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_I2C_MspInit+0x94>)
 8000daa:	2180      	movs	r1, #128	@ 0x80
 8000dac:	0389      	lsls	r1, r1, #14
 8000dae:	430a      	orrs	r2, r1
 8000db0:	61da      	str	r2, [r3, #28]
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_I2C_MspInit+0x94>)
 8000db4:	69da      	ldr	r2, [r3, #28]
 8000db6:	2380      	movs	r3, #128	@ 0x80
 8000db8:	039b      	lsls	r3, r3, #14
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b00b      	add	sp, #44	@ 0x2c
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	@ 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2414      	movs	r4, #20
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	2314      	movs	r3, #20
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f004 fd8c 	bl	8005904 <memset>
  if(huart->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d132      	bne.n	8000e5c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <HAL_UART_MspInit+0x94>)
 8000df8:	69da      	ldr	r2, [r3, #28]
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <HAL_UART_MspInit+0x94>)
 8000dfc:	2180      	movs	r1, #128	@ 0x80
 8000dfe:	0289      	lsls	r1, r1, #10
 8000e00:	430a      	orrs	r2, r1
 8000e02:	61da      	str	r2, [r3, #28]
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <HAL_UART_MspInit+0x94>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_UART_MspInit+0x94>)
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <HAL_UART_MspInit+0x94>)
 8000e18:	2180      	movs	r1, #128	@ 0x80
 8000e1a:	0289      	lsls	r1, r1, #10
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <HAL_UART_MspInit+0x94>)
 8000e22:	695a      	ldr	r2, [r3, #20]
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2e:	0021      	movs	r1, r4
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	187a      	adds	r2, r7, r1
 8000e50:	2390      	movs	r3, #144	@ 0x90
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fa30 	bl	80012bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b00b      	add	sp, #44	@ 0x2c
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000e7c:	4b38      	ldr	r3, [pc, #224]	@ (8000f60 <HAL_InitTick+0xf4>)
 8000e7e:	69da      	ldr	r2, [r3, #28]
 8000e80:	4b37      	ldr	r3, [pc, #220]	@ (8000f60 <HAL_InitTick+0xf4>)
 8000e82:	2180      	movs	r1, #128	@ 0x80
 8000e84:	0049      	lsls	r1, r1, #1
 8000e86:	430a      	orrs	r2, r1
 8000e88:	61da      	str	r2, [r3, #28]
 8000e8a:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <HAL_InitTick+0xf4>)
 8000e8c:	69da      	ldr	r2, [r3, #28]
 8000e8e:	2380      	movs	r3, #128	@ 0x80
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4013      	ands	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e98:	230c      	movs	r3, #12
 8000e9a:	18fa      	adds	r2, r7, r3
 8000e9c:	2410      	movs	r4, #16
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 fe92 	bl	8002bcc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d104      	bne.n	8000ebe <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eb4:	f001 fe74 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ebc:	e004      	b.n	8000ec8 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ebe:	f001 fe6f 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eca:	4926      	ldr	r1, [pc, #152]	@ (8000f64 <HAL_InitTick+0xf8>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff f925 	bl	800011c <__udivsi3>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000eda:	4a24      	ldr	r2, [pc, #144]	@ (8000f6c <HAL_InitTick+0x100>)
 8000edc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000ee0:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <HAL_InitTick+0x104>)
 8000ee2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000ee6:	6a3a      	ldr	r2, [r7, #32]
 8000ee8:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000efc:	252b      	movs	r5, #43	@ 0x2b
 8000efe:	197c      	adds	r4, r7, r5
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f001 ff5a 	bl	8002dbc <HAL_TIM_Base_Init>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000f0c:	197b      	adds	r3, r7, r5
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11e      	bne.n	8000f52 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000f14:	197c      	adds	r4, r7, r5
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_InitTick+0xfc>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 ffa7 	bl	8002e6c <HAL_TIM_Base_Start_IT>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000f22:	197b      	adds	r3, r7, r5
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d113      	bne.n	8000f52 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f2a:	2013      	movs	r0, #19
 8000f2c:	f000 f9b5 	bl	800129a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d809      	bhi.n	8000f4a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority, 0U);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	2013      	movs	r0, #19
 8000f3e:	f000 f997 	bl	8001270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <HAL_InitTick+0x108>)
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e003      	b.n	8000f52 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000f4a:	232b      	movs	r3, #43	@ 0x2b
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000f52:	232b      	movs	r3, #43	@ 0x2b
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b00c      	add	sp, #48	@ 0x30
 8000f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f60:	40021000 	.word	0x40021000
 8000f64:	000f4240 	.word	0x000f4240
 8000f68:	200003dc 	.word	0x200003dc
 8000f6c:	40002000 	.word	0x40002000
 8000f70:	000003e7 	.word	0x000003e7
 8000f74:	20000014 	.word	0x20000014

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	e7fd      	b.n	8000f7c <NMI_Handler+0x4>

08000f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	e7fd      	b.n	8000f84 <HardFault_Handler+0x4>

08000f88 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <TIM14_IRQHandler+0x14>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 ffb8 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	200003dc 	.word	0x200003dc

08000fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb2:	e000      	b.n	8000fb6 <_read+0x16>
 8000fb4:	bf00      	nop
 8000fb6:	0001      	movs	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
  }

  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b006      	add	sp, #24
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	425b      	negs	r3, r3
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2280      	movs	r2, #128	@ 0x80
 8000ffc:	0192      	lsls	r2, r2, #6
 8000ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}

0800101c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001028:	2300      	movs	r3, #0
}
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	b004      	add	sp, #16
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f004 fca4 	bl	80059b0 <__errno>
 8001068:	0003      	movs	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	2301      	movs	r3, #1
 8001070:	425b      	negs	r3, r3
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	18d2      	adds	r2, r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b006      	add	sp, #24
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20002000 	.word	0x20002000
 8001094:	00000400 	.word	0x00000400
 8001098:	20000424 	.word	0x20000424
 800109c:	200012c0 	.word	0x200012c0

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f7ff fff6 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010da:	f004 fc6f 	bl	80059bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010de:	f7ff fb41 	bl	8000764 <main>

080010e2 <LoopForever>:

LoopForever:
    b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   r0, =_estack
 80010e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010f0:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 80010f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010f8:	200012bc 	.word	0x200012bc

080010fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_IRQHandler>
	...

08001100 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <HAL_Init+0x24>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_Init+0x24>)
 800110a:	2110      	movs	r1, #16
 800110c:	430a      	orrs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001110:	2003      	movs	r0, #3
 8001112:	f7ff feab 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001116:	f7ff fde5 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	40022000 	.word	0x40022000

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	18d2      	adds	r2, r2, r3
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_IncTick+0x20>)
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	46c0      	nop			@ (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	20000018 	.word	0x20000018
 8001148:	20000428 	.word	0x20000428

0800114c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	@ (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	20000428 	.word	0x20000428

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	0002      	movs	r2, r0
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b7f      	cmp	r3, #127	@ 0x7f
 8001172:	d809      	bhi.n	8001188 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	001a      	movs	r2, r3
 800117a:	231f      	movs	r3, #31
 800117c:	401a      	ands	r2, r3
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_EnableIRQ+0x30>)
 8001180:	2101      	movs	r1, #1
 8001182:	4091      	lsls	r1, r2
 8001184:	000a      	movs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
  }
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	0002      	movs	r2, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011a8:	d828      	bhi.n	80011fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001268 <__NVIC_SetPriority+0xd4>)
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	33c0      	adds	r3, #192	@ 0xc0
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	589b      	ldr	r3, [r3, r2]
 80011ba:	1dfa      	adds	r2, r7, #7
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	0011      	movs	r1, r2
 80011c0:	2203      	movs	r2, #3
 80011c2:	400a      	ands	r2, r1
 80011c4:	00d2      	lsls	r2, r2, #3
 80011c6:	21ff      	movs	r1, #255	@ 0xff
 80011c8:	4091      	lsls	r1, r2
 80011ca:	000a      	movs	r2, r1
 80011cc:	43d2      	mvns	r2, r2
 80011ce:	401a      	ands	r2, r3
 80011d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	22ff      	movs	r2, #255	@ 0xff
 80011d8:	401a      	ands	r2, r3
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	0018      	movs	r0, r3
 80011e0:	2303      	movs	r3, #3
 80011e2:	4003      	ands	r3, r0
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e8:	481f      	ldr	r0, [pc, #124]	@ (8001268 <__NVIC_SetPriority+0xd4>)
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	430a      	orrs	r2, r1
 80011f4:	33c0      	adds	r3, #192	@ 0xc0
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011fa:	e031      	b.n	8001260 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <__NVIC_SetPriority+0xd8>)
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0019      	movs	r1, r3
 8001204:	230f      	movs	r3, #15
 8001206:	400b      	ands	r3, r1
 8001208:	3b08      	subs	r3, #8
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3306      	adds	r3, #6
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	18d3      	adds	r3, r2, r3
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	1dfa      	adds	r2, r7, #7
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	0011      	movs	r1, r2
 800121c:	2203      	movs	r2, #3
 800121e:	400a      	ands	r2, r1
 8001220:	00d2      	lsls	r2, r2, #3
 8001222:	21ff      	movs	r1, #255	@ 0xff
 8001224:	4091      	lsls	r1, r2
 8001226:	000a      	movs	r2, r1
 8001228:	43d2      	mvns	r2, r2
 800122a:	401a      	ands	r2, r3
 800122c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	019b      	lsls	r3, r3, #6
 8001232:	22ff      	movs	r2, #255	@ 0xff
 8001234:	401a      	ands	r2, r3
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	0018      	movs	r0, r3
 800123c:	2303      	movs	r3, #3
 800123e:	4003      	ands	r3, r0
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001244:	4809      	ldr	r0, [pc, #36]	@ (800126c <__NVIC_SetPriority+0xd8>)
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	001c      	movs	r4, r3
 800124c:	230f      	movs	r3, #15
 800124e:	4023      	ands	r3, r4
 8001250:	3b08      	subs	r3, #8
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	430a      	orrs	r2, r1
 8001256:	3306      	adds	r3, #6
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	18c3      	adds	r3, r0, r3
 800125c:	3304      	adds	r3, #4
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b003      	add	sp, #12
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	210f      	movs	r1, #15
 800127c:	187b      	adds	r3, r7, r1
 800127e:	1c02      	adds	r2, r0, #0
 8001280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	187b      	adds	r3, r7, r1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b25b      	sxtb	r3, r3
 800128a:	0011      	movs	r1, r2
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff81 	bl	8001194 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	0002      	movs	r2, r0
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff ff57 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e14f      	b.n	800156c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <HAL_GPIO_Init+0x28>
 80012e2:	e140      	b.n	8001566 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d005      	beq.n	80012fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d130      	bne.n	800135e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	409a      	lsls	r2, r3
 800130a:	0013      	movs	r3, r2
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001332:	2201      	movs	r2, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	2201      	movs	r2, #1
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2203      	movs	r2, #3
 8001364:	4013      	ands	r3, r2
 8001366:	2b03      	cmp	r3, #3
 8001368:	d017      	beq.n	800139a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d123      	bne.n	80013ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	58d3      	ldr	r3, [r2, r3]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2207      	movs	r2, #7
 80013b8:	4013      	ands	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2107      	movs	r1, #7
 80013d2:	400b      	ands	r3, r1
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	401a      	ands	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	23c0      	movs	r3, #192	@ 0xc0
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_GPIO_Init+0x174>
 800142e:	e09a      	b.n	8001566 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001430:	4b54      	ldr	r3, [pc, #336]	@ (8001584 <HAL_GPIO_Init+0x2c8>)
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	4b53      	ldr	r3, [pc, #332]	@ (8001584 <HAL_GPIO_Init+0x2c8>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	4b51      	ldr	r3, [pc, #324]	@ (8001584 <HAL_GPIO_Init+0x2c8>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001448:	4a4f      	ldr	r2, [pc, #316]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	589b      	ldr	r3, [r3, r2]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2203      	movs	r2, #3
 800145a:	4013      	ands	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	2390      	movs	r3, #144	@ 0x90
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	429a      	cmp	r2, r3
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x1e2>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a44      	ldr	r2, [pc, #272]	@ (800158c <HAL_GPIO_Init+0x2d0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x1de>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a43      	ldr	r2, [pc, #268]	@ (8001590 <HAL_GPIO_Init+0x2d4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x1da>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a42      	ldr	r2, [pc, #264]	@ (8001594 <HAL_GPIO_Init+0x2d8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x1d6>
 800148e:	2303      	movs	r3, #3
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x1e4>
 8001492:	2305      	movs	r3, #5
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x1e4>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x1e4>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x1e4>
 800149e:	2300      	movs	r3, #0
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	2103      	movs	r1, #3
 80014a4:	400a      	ands	r2, r1
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b0:	4935      	ldr	r1, [pc, #212]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	035b      	lsls	r3, r3, #13
 80014d6:	4013      	ands	r3, r2
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43da      	mvns	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	039b      	lsls	r3, r3, #14
 8001500:	4013      	ands	r3, r2
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001536:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	025b      	lsls	r3, r3, #9
 8001554:	4013      	ands	r3, r2
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_GPIO_Init+0x2dc>)
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	40da      	lsrs	r2, r3
 8001574:	1e13      	subs	r3, r2, #0
 8001576:	d000      	beq.n	800157a <HAL_GPIO_Init+0x2be>
 8001578:	e6a8      	b.n	80012cc <HAL_GPIO_Init+0x10>
  } 
}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b006      	add	sp, #24
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000
 800158c:	48000400 	.word	0x48000400
 8001590:	48000800 	.word	0x48000800
 8001594:	48000c00 	.word	0x48000c00
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	0008      	movs	r0, r1
 80015a6:	0011      	movs	r1, r2
 80015a8:	1cbb      	adds	r3, r7, #2
 80015aa:	1c02      	adds	r2, r0, #0
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	1c7b      	adds	r3, r7, #1
 80015b0:	1c0a      	adds	r2, r1, #0
 80015b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	1c7b      	adds	r3, r7, #1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015bc:	1cbb      	adds	r3, r7, #2
 80015be:	881a      	ldrh	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e003      	b.n	80015ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e08f      	b.n	800170a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2241      	movs	r2, #65	@ 0x41
 80015ee:	5c9b      	ldrb	r3, [r3, r2]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d107      	bne.n	8001606 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2240      	movs	r2, #64	@ 0x40
 80015fa:	2100      	movs	r1, #0
 80015fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fb99 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2241      	movs	r2, #65	@ 0x41
 800160a:	2124      	movs	r1, #36	@ 0x24
 800160c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	438a      	bics	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	493b      	ldr	r1, [pc, #236]	@ (8001714 <HAL_I2C_Init+0x13c>)
 8001628:	400a      	ands	r2, r1
 800162a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4938      	ldr	r1, [pc, #224]	@ (8001718 <HAL_I2C_Init+0x140>)
 8001638:	400a      	ands	r2, r1
 800163a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	0209      	lsls	r1, r1, #8
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	e007      	b.n	8001666 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2184      	movs	r1, #132	@ 0x84
 8001660:	0209      	lsls	r1, r1, #8
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d109      	bne.n	8001682 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	0109      	lsls	r1, r1, #4
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	e007      	b.n	8001692 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4923      	ldr	r1, [pc, #140]	@ (800171c <HAL_I2C_Init+0x144>)
 800168e:	400a      	ands	r2, r1
 8001690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4920      	ldr	r1, [pc, #128]	@ (8001720 <HAL_I2C_Init+0x148>)
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	491a      	ldr	r1, [pc, #104]	@ (8001718 <HAL_I2C_Init+0x140>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69d9      	ldr	r1, [r3, #28]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2101      	movs	r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2241      	movs	r2, #65	@ 0x41
 80016f6:	2120      	movs	r1, #32
 80016f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2242      	movs	r2, #66	@ 0x42
 8001704:	2100      	movs	r1, #0
 8001706:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	f0ffffff 	.word	0xf0ffffff
 8001718:	ffff7fff 	.word	0xffff7fff
 800171c:	fffff7ff 	.word	0xfffff7ff
 8001720:	02008000 	.word	0x02008000

08001724 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	000c      	movs	r4, r1
 800172e:	0010      	movs	r0, r2
 8001730:	0019      	movs	r1, r3
 8001732:	230a      	movs	r3, #10
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	1c22      	adds	r2, r4, #0
 8001738:	801a      	strh	r2, [r3, #0]
 800173a:	2308      	movs	r3, #8
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	1c02      	adds	r2, r0, #0
 8001740:	801a      	strh	r2, [r3, #0]
 8001742:	1dbb      	adds	r3, r7, #6
 8001744:	1c0a      	adds	r2, r1, #0
 8001746:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2241      	movs	r2, #65	@ 0x41
 800174c:	5c9b      	ldrb	r3, [r3, r2]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b20      	cmp	r3, #32
 8001752:	d000      	beq.n	8001756 <HAL_I2C_Mem_Write+0x32>
 8001754:	e10c      	b.n	8001970 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_I2C_Mem_Write+0x42>
 800175c:	232c      	movs	r3, #44	@ 0x2c
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2280      	movs	r2, #128	@ 0x80
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0ff      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2240      	movs	r2, #64	@ 0x40
 8001776:	5c9b      	ldrb	r3, [r3, r2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_I2C_Mem_Write+0x5c>
 800177c:	2302      	movs	r3, #2
 800177e:	e0f8      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2240      	movs	r2, #64	@ 0x40
 8001784:	2101      	movs	r1, #1
 8001786:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001788:	f7ff fce0 	bl	800114c <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	0219      	lsls	r1, r3, #8
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2319      	movs	r3, #25
 800179c:	2201      	movs	r2, #1
 800179e:	f000 fb0b 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 80017a2:	1e03      	subs	r3, r0, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0e3      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2241      	movs	r2, #65	@ 0x41
 80017ae:	2121      	movs	r1, #33	@ 0x21
 80017b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2242      	movs	r2, #66	@ 0x42
 80017b6:	2140      	movs	r1, #64	@ 0x40
 80017b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	222c      	movs	r2, #44	@ 0x2c
 80017ca:	18ba      	adds	r2, r7, r2
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017d6:	1dbb      	adds	r3, r7, #6
 80017d8:	881c      	ldrh	r4, [r3, #0]
 80017da:	2308      	movs	r3, #8
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	230a      	movs	r3, #10
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	8819      	ldrh	r1, [r3, #0]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	0023      	movs	r3, r4
 80017f2:	f000 f9f9 	bl	8001be8 <I2C_RequestMemoryWrite>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d005      	beq.n	8001806 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2240      	movs	r2, #64	@ 0x40
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0b5      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	2bff      	cmp	r3, #255	@ 0xff
 800180e:	d911      	bls.n	8001834 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181a:	b2da      	uxtb	r2, r3
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	045c      	lsls	r4, r3, #17
 8001820:	230a      	movs	r3, #10
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	8819      	ldrh	r1, [r3, #0]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	0023      	movs	r3, r4
 800182e:	f000 fc9d 	bl	800216c <I2C_TransferConfig>
 8001832:	e012      	b.n	800185a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001842:	b2da      	uxtb	r2, r3
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	049c      	lsls	r4, r3, #18
 8001848:	230a      	movs	r3, #10
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	8819      	ldrh	r1, [r3, #0]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	0023      	movs	r3, r4
 8001856:	f000 fc89 	bl	800216c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	0018      	movs	r0, r3
 8001862:	f000 fb01 	bl	8001e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001866:	1e03      	subs	r3, r0, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e081      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d03a      	beq.n	800191e <HAL_I2C_Mem_Write+0x1fa>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d136      	bne.n	800191e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	0013      	movs	r3, r2
 80018ba:	2200      	movs	r2, #0
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	f000 fa7b 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e053      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2bff      	cmp	r3, #255	@ 0xff
 80018d2:	d911      	bls.n	80018f8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	22ff      	movs	r2, #255	@ 0xff
 80018d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	045c      	lsls	r4, r3, #17
 80018e4:	230a      	movs	r3, #10
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	8819      	ldrh	r1, [r3, #0]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	0023      	movs	r3, r4
 80018f2:	f000 fc3b 	bl	800216c <I2C_TransferConfig>
 80018f6:	e012      	b.n	800191e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001906:	b2da      	uxtb	r2, r3
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	049c      	lsls	r4, r3, #18
 800190c:	230a      	movs	r3, #10
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	8819      	ldrh	r1, [r3, #0]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	2300      	movs	r3, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	0023      	movs	r3, r4
 800191a:	f000 fc27 	bl	800216c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d198      	bne.n	800185a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	0018      	movs	r0, r3
 8001930:	f000 fae0 	bl	8001ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001934:	1e03      	subs	r3, r0, #0
 8001936:	d001      	beq.n	800193c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e01a      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2220      	movs	r2, #32
 8001942:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	490b      	ldr	r1, [pc, #44]	@ (800197c <HAL_I2C_Mem_Write+0x258>)
 8001950:	400a      	ands	r2, r1
 8001952:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2241      	movs	r2, #65	@ 0x41
 8001958:	2120      	movs	r1, #32
 800195a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2242      	movs	r2, #66	@ 0x42
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2240      	movs	r2, #64	@ 0x40
 8001968:	2100      	movs	r1, #0
 800196a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	e000      	b.n	8001972 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001970:	2302      	movs	r3, #2
  }
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b007      	add	sp, #28
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	fe00e800 	.word	0xfe00e800

08001980 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	000c      	movs	r4, r1
 800198a:	0010      	movs	r0, r2
 800198c:	0019      	movs	r1, r3
 800198e:	230a      	movs	r3, #10
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	1c22      	adds	r2, r4, #0
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	2308      	movs	r3, #8
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	1c02      	adds	r2, r0, #0
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	1dbb      	adds	r3, r7, #6
 80019a0:	1c0a      	adds	r2, r1, #0
 80019a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2241      	movs	r2, #65	@ 0x41
 80019a8:	5c9b      	ldrb	r3, [r3, r2]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d000      	beq.n	80019b2 <HAL_I2C_Mem_Read+0x32>
 80019b0:	e110      	b.n	8001bd4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80019b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_I2C_Mem_Read+0x42>
 80019b8:	232c      	movs	r3, #44	@ 0x2c
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2280      	movs	r2, #128	@ 0x80
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e103      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2240      	movs	r2, #64	@ 0x40
 80019d2:	5c9b      	ldrb	r3, [r3, r2]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_I2C_Mem_Read+0x5c>
 80019d8:	2302      	movs	r3, #2
 80019da:	e0fc      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2240      	movs	r2, #64	@ 0x40
 80019e0:	2101      	movs	r1, #1
 80019e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019e4:	f7ff fbb2 	bl	800114c <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	0219      	lsls	r1, r3, #8
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2319      	movs	r3, #25
 80019f8:	2201      	movs	r2, #1
 80019fa:	f000 f9dd 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0e7      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2241      	movs	r2, #65	@ 0x41
 8001a0a:	2122      	movs	r1, #34	@ 0x22
 8001a0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2242      	movs	r2, #66	@ 0x42
 8001a12:	2140      	movs	r1, #64	@ 0x40
 8001a14:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	222c      	movs	r2, #44	@ 0x2c
 8001a26:	18ba      	adds	r2, r7, r2
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a32:	1dbb      	adds	r3, r7, #6
 8001a34:	881c      	ldrh	r4, [r3, #0]
 8001a36:	2308      	movs	r3, #8
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	8819      	ldrh	r1, [r3, #0]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	0023      	movs	r3, r4
 8001a4e:	f000 f92f 	bl	8001cb0 <I2C_RequestMemoryRead>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2240      	movs	r2, #64	@ 0x40
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0b9      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2bff      	cmp	r3, #255	@ 0xff
 8001a6a:	d911      	bls.n	8001a90 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	045c      	lsls	r4, r3, #17
 8001a7c:	230a      	movs	r3, #10
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	8819      	ldrh	r1, [r3, #0]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	4b56      	ldr	r3, [pc, #344]	@ (8001be0 <HAL_I2C_Mem_Read+0x260>)
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	0023      	movs	r3, r4
 8001a8a:	f000 fb6f 	bl	800216c <I2C_TransferConfig>
 8001a8e:	e012      	b.n	8001ab6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	049c      	lsls	r4, r3, #18
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	8819      	ldrh	r1, [r3, #0]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_I2C_Mem_Read+0x260>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	0023      	movs	r3, r4
 8001ab2:	f000 fb5b 	bl	800216c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	0013      	movs	r3, r2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	f000 f978 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e082      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d03a      	beq.n	8001b82 <HAL_I2C_Mem_Read+0x202>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d136      	bne.n	8001b82 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2180      	movs	r1, #128	@ 0x80
 8001b22:	f000 f949 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e053      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	2bff      	cmp	r3, #255	@ 0xff
 8001b36:	d911      	bls.n	8001b5c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	045c      	lsls	r4, r3, #17
 8001b48:	230a      	movs	r3, #10
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	8819      	ldrh	r1, [r3, #0]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	0023      	movs	r3, r4
 8001b56:	f000 fb09 	bl	800216c <I2C_TransferConfig>
 8001b5a:	e012      	b.n	8001b82 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	049c      	lsls	r4, r3, #18
 8001b70:	230a      	movs	r3, #10
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	8819      	ldrh	r1, [r3, #0]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	0023      	movs	r3, r4
 8001b7e:	f000 faf5 	bl	800216c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d194      	bne.n	8001ab6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 f9ae 	bl	8001ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e01a      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <HAL_I2C_Mem_Read+0x264>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2241      	movs	r2, #65	@ 0x41
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2242      	movs	r2, #66	@ 0x42
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2240      	movs	r2, #64	@ 0x40
 8001bcc:	2100      	movs	r1, #0
 8001bce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b007      	add	sp, #28
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	80002400 	.word	0x80002400
 8001be4:	fe00e800 	.word	0xfe00e800

08001be8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	000c      	movs	r4, r1
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	250a      	movs	r5, #10
 8001bf8:	197b      	adds	r3, r7, r5
 8001bfa:	1c22      	adds	r2, r4, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
 8001bfe:	2308      	movs	r3, #8
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	1c02      	adds	r2, r0, #0
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	1c0a      	adds	r2, r1, #0
 8001c0a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c0c:	1dbb      	adds	r3, r7, #6
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	045c      	lsls	r4, r3, #17
 8001c16:	197b      	adds	r3, r7, r5
 8001c18:	8819      	ldrh	r1, [r3, #0]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <I2C_RequestMemoryWrite+0xc4>)
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	0023      	movs	r3, r4
 8001c22:	f000 faa3 	bl	800216c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c28:	6a39      	ldr	r1, [r7, #32]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 f91b 	bl	8001e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e033      	b.n	8001ca2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c3a:	1dbb      	adds	r3, r7, #6
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c42:	2308      	movs	r3, #8
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c50:	e019      	b.n	8001c86 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c52:	2308      	movs	r3, #8
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c66:	6a39      	ldr	r1, [r7, #32]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 f8fc 	bl	8001e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c70:	1e03      	subs	r3, r0, #0
 8001c72:	d001      	beq.n	8001c78 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e014      	b.n	8001ca2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c78:	2308      	movs	r3, #8
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c86:	6a3a      	ldr	r2, [r7, #32]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	0013      	movs	r3, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	f000 f890 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b004      	add	sp, #16
 8001ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	80002000 	.word	0x80002000

08001cb0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	000c      	movs	r4, r1
 8001cba:	0010      	movs	r0, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	250a      	movs	r5, #10
 8001cc0:	197b      	adds	r3, r7, r5
 8001cc2:	1c22      	adds	r2, r4, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	1c02      	adds	r2, r0, #0
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	1dbb      	adds	r3, r7, #6
 8001cd0:	1c0a      	adds	r2, r1, #0
 8001cd2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	197b      	adds	r3, r7, r5
 8001cdc:	8819      	ldrh	r1, [r3, #0]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <I2C_RequestMemoryRead+0xc0>)
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f000 fa41 	bl	800216c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 f8b9 	bl	8001e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d001      	beq.n	8001cfe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e033      	b.n	8001d66 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cfe:	1dbb      	adds	r3, r7, #6
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d107      	bne.n	8001d16 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d06:	2308      	movs	r3, #8
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d14:	e019      	b.n	8001d4a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d16:	2308      	movs	r3, #8
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2a:	6a39      	ldr	r1, [r7, #32]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 f89a 	bl	8001e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d34:	1e03      	subs	r3, r0, #0
 8001d36:	d001      	beq.n	8001d3c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e014      	b.n	8001d66 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4a:	6a3a      	ldr	r2, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	0013      	movs	r3, r2
 8001d54:	2200      	movs	r2, #0
 8001d56:	2140      	movs	r1, #64	@ 0x40
 8001d58:	f000 f82e 	bl	8001db8 <I2C_WaitOnFlagUntilTimeout>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d001      	beq.n	8001d64 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	80002000 	.word	0x80002000

08001d74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d103      	bne.n	8001d92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d007      	beq.n	8001db0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2101      	movs	r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	619a      	str	r2, [r3, #24]
  }
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc8:	e03a      	b.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f8d3 	bl	8001f7c <I2C_IsErrorOccurred>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e040      	b.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	d02d      	beq.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7ff f9b2 	bl	800114c <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x42>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d122      	bne.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	4013      	ands	r3, r2
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	425a      	negs	r2, r3
 8001e0a:	4153      	adcs	r3, r2
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	001a      	movs	r2, r3
 8001e10:	1dfb      	adds	r3, r7, #7
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d113      	bne.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2241      	movs	r2, #65	@ 0x41
 8001e28:	2120      	movs	r1, #32
 8001e2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2242      	movs	r2, #66	@ 0x42
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2240      	movs	r2, #64	@ 0x40
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e00f      	b.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	4153      	adcs	r3, r2
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	001a      	movs	r2, r3
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d0b5      	beq.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e74:	e032      	b.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f87d 	bl	8001f7c <I2C_IsErrorOccurred>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d001      	beq.n	8001e8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e030      	b.n	8001eec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	d025      	beq.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e90:	f7ff f95c 	bl	800114c <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d302      	bcc.n	8001ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d11a      	bne.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2202      	movs	r2, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d013      	beq.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb8:	2220      	movs	r2, #32
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2241      	movs	r2, #65	@ 0x41
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2242      	movs	r2, #66	@ 0x42
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2240      	movs	r2, #64	@ 0x40
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e007      	b.n	8001eec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d1c5      	bne.n	8001e76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f00:	e02f      	b.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f837 	bl	8001f7c <I2C_IsErrorOccurred>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d001      	beq.n	8001f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e02d      	b.n	8001f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f16:	f7ff f919 	bl	800114c <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d302      	bcc.n	8001f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11a      	bne.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2220      	movs	r2, #32
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d013      	beq.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	2220      	movs	r2, #32
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2241      	movs	r2, #65	@ 0x41
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2242      	movs	r2, #66	@ 0x42
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2240      	movs	r2, #64	@ 0x40
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e007      	b.n	8001f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d1c8      	bne.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	0018      	movs	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b004      	add	sp, #16
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2327      	movs	r3, #39	@ 0x27
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d100      	bne.n	8001faa <I2C_IsErrorOccurred+0x2e>
 8001fa8:	e079      	b.n	800209e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fb2:	e057      	b.n	8002064 <I2C_IsErrorOccurred+0xe8>
 8001fb4:	2227      	movs	r2, #39	@ 0x27
 8001fb6:	18bb      	adds	r3, r7, r2
 8001fb8:	18ba      	adds	r2, r7, r2
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	d04f      	beq.n	8002064 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fc4:	f7ff f8c2 	bl	800114c <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d302      	bcc.n	8001fda <I2C_IsErrorOccurred+0x5e>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d144      	bne.n	8002064 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001fe8:	2013      	movs	r0, #19
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	2142      	movs	r1, #66	@ 0x42
 8001ff0:	5c52      	ldrb	r2, [r2, r1]
 8001ff2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	401a      	ands	r2, r3
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	429a      	cmp	r2, r3
 8002006:	d126      	bne.n	8002056 <I2C_IsErrorOccurred+0xda>
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	2380      	movs	r3, #128	@ 0x80
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	429a      	cmp	r2, r3
 8002010:	d021      	beq.n	8002056 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002012:	183b      	adds	r3, r7, r0
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b20      	cmp	r3, #32
 8002018:	d01d      	beq.n	8002056 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	01c9      	lsls	r1, r1, #7
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800202c:	f7ff f88e 	bl	800114c <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002034:	e00f      	b.n	8002056 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002036:	f7ff f889 	bl	800114c <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b19      	cmp	r3, #25
 8002042:	d908      	bls.n	8002056 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2220      	movs	r2, #32
 8002048:	4313      	orrs	r3, r2
 800204a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800204c:	2327      	movs	r3, #39	@ 0x27
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]

              break;
 8002054:	e006      	b.n	8002064 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2220      	movs	r2, #32
 800205e:	4013      	ands	r3, r2
 8002060:	2b20      	cmp	r3, #32
 8002062:	d1e8      	bne.n	8002036 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2220      	movs	r2, #32
 800206c:	4013      	ands	r3, r2
 800206e:	2b20      	cmp	r3, #32
 8002070:	d004      	beq.n	800207c <I2C_IsErrorOccurred+0x100>
 8002072:	2327      	movs	r3, #39	@ 0x27
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d09b      	beq.n	8001fb4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800207c:	2327      	movs	r3, #39	@ 0x27
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2220      	movs	r2, #32
 800208c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	2204      	movs	r2, #4
 8002092:	4313      	orrs	r3, r2
 8002094:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002096:	2327      	movs	r3, #39	@ 0x27
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d00c      	beq.n	80020ca <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4313      	orrs	r3, r2
 80020b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2280      	movs	r2, #128	@ 0x80
 80020be:	0052      	lsls	r2, r2, #1
 80020c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020c2:	2327      	movs	r3, #39	@ 0x27
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4013      	ands	r3, r2
 80020d2:	d00c      	beq.n	80020ee <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2208      	movs	r2, #8
 80020d8:	4313      	orrs	r3, r2
 80020da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2280      	movs	r2, #128	@ 0x80
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020e6:	2327      	movs	r3, #39	@ 0x27
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d00c      	beq.n	8002112 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4313      	orrs	r3, r2
 80020fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2280      	movs	r2, #128	@ 0x80
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800210a:	2327      	movs	r3, #39	@ 0x27
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002112:	2327      	movs	r3, #39	@ 0x27
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01d      	beq.n	8002158 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	0018      	movs	r0, r3
 8002120:	f7ff fe28 	bl	8001d74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	490e      	ldr	r1, [pc, #56]	@ (8002168 <I2C_IsErrorOccurred+0x1ec>)
 8002130:	400a      	ands	r2, r1
 8002132:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2241      	movs	r2, #65	@ 0x41
 8002144:	2120      	movs	r1, #32
 8002146:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2242      	movs	r2, #66	@ 0x42
 800214c:	2100      	movs	r1, #0
 800214e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	2100      	movs	r1, #0
 8002156:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002158:	2327      	movs	r3, #39	@ 0x27
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b00a      	add	sp, #40	@ 0x28
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	fe00e800 	.word	0xfe00e800

0800216c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	0008      	movs	r0, r1
 8002176:	0011      	movs	r1, r2
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	240a      	movs	r4, #10
 800217c:	193b      	adds	r3, r7, r4
 800217e:	1c02      	adds	r2, r0, #0
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	2009      	movs	r0, #9
 8002184:	183b      	adds	r3, r7, r0
 8002186:	1c0a      	adds	r2, r1, #0
 8002188:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800218a:	193b      	adds	r3, r7, r4
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	059b      	lsls	r3, r3, #22
 8002190:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002192:	183b      	adds	r3, r7, r0
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	0419      	lsls	r1, r3, #16
 8002198:	23ff      	movs	r3, #255	@ 0xff
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800219e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a6:	4313      	orrs	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	085b      	lsrs	r3, r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021b6:	0d51      	lsrs	r1, r2, #21
 80021b8:	2280      	movs	r2, #128	@ 0x80
 80021ba:	00d2      	lsls	r2, r2, #3
 80021bc:	400a      	ands	r2, r1
 80021be:	4907      	ldr	r1, [pc, #28]	@ (80021dc <I2C_TransferConfig+0x70>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	43d2      	mvns	r2, r2
 80021c4:	401a      	ands	r2, r3
 80021c6:	0011      	movs	r1, r2
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b007      	add	sp, #28
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	03ff63ff 	.word	0x03ff63ff

080021e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2241      	movs	r2, #65	@ 0x41
 80021ee:	5c9b      	ldrb	r3, [r3, r2]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d138      	bne.n	8002268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2240      	movs	r2, #64	@ 0x40
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002200:	2302      	movs	r3, #2
 8002202:	e032      	b.n	800226a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2240      	movs	r2, #64	@ 0x40
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2241      	movs	r2, #65	@ 0x41
 8002210:	2124      	movs	r1, #36	@ 0x24
 8002212:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	438a      	bics	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4911      	ldr	r1, [pc, #68]	@ (8002274 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2241      	movs	r2, #65	@ 0x41
 8002258:	2120      	movs	r1, #32
 800225a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	ffffefff 	.word	0xffffefff

08002278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2241      	movs	r2, #65	@ 0x41
 8002286:	5c9b      	ldrb	r3, [r3, r2]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	d139      	bne.n	8002302 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2240      	movs	r2, #64	@ 0x40
 8002292:	5c9b      	ldrb	r3, [r3, r2]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002298:	2302      	movs	r3, #2
 800229a:	e033      	b.n	8002304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2240      	movs	r2, #64	@ 0x40
 80022a0:	2101      	movs	r1, #1
 80022a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2241      	movs	r2, #65	@ 0x41
 80022a8:	2124      	movs	r1, #36	@ 0x24
 80022aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	438a      	bics	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a11      	ldr	r2, [pc, #68]	@ (800230c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2241      	movs	r2, #65	@ 0x41
 80022f2:	2120      	movs	r1, #32
 80022f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2240      	movs	r2, #64	@ 0x40
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
  }
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}
 800230c:	fffff0ff 	.word	0xfffff0ff

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e301      	b.n	8002926 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d100      	bne.n	800232e <HAL_RCC_OscConfig+0x1e>
 800232c:	e08d      	b.n	800244a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800232e:	4bc3      	ldr	r3, [pc, #780]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	220c      	movs	r2, #12
 8002334:	4013      	ands	r3, r2
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00e      	beq.n	8002358 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233a:	4bc0      	ldr	r3, [pc, #768]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	220c      	movs	r2, #12
 8002340:	4013      	ands	r3, r2
 8002342:	2b08      	cmp	r3, #8
 8002344:	d116      	bne.n	8002374 <HAL_RCC_OscConfig+0x64>
 8002346:	4bbd      	ldr	r3, [pc, #756]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	401a      	ands	r2, r3
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	429a      	cmp	r2, r3
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	4bb8      	ldr	r3, [pc, #736]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	029b      	lsls	r3, r3, #10
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_RCC_OscConfig+0x56>
 8002364:	e070      	b.n	8002448 <HAL_RCC_OscConfig+0x138>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d000      	beq.n	8002370 <HAL_RCC_OscConfig+0x60>
 800236e:	e06b      	b.n	8002448 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e2d8      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x7c>
 800237c:	4baf      	ldr	r3, [pc, #700]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4bae      	ldr	r3, [pc, #696]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002382:	2180      	movs	r1, #128	@ 0x80
 8002384:	0249      	lsls	r1, r1, #9
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e02f      	b.n	80023ec <HAL_RCC_OscConfig+0xdc>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x9e>
 8002394:	4ba9      	ldr	r3, [pc, #676]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4ba8      	ldr	r3, [pc, #672]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800239a:	49a9      	ldr	r1, [pc, #676]	@ (8002640 <HAL_RCC_OscConfig+0x330>)
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	4ba6      	ldr	r3, [pc, #664]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4ba5      	ldr	r3, [pc, #660]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023a6:	49a7      	ldr	r1, [pc, #668]	@ (8002644 <HAL_RCC_OscConfig+0x334>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e01e      	b.n	80023ec <HAL_RCC_OscConfig+0xdc>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d10e      	bne.n	80023d4 <HAL_RCC_OscConfig+0xc4>
 80023b6:	4ba1      	ldr	r3, [pc, #644]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4ba0      	ldr	r3, [pc, #640]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	02c9      	lsls	r1, r1, #11
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	4b9d      	ldr	r3, [pc, #628]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b9c      	ldr	r3, [pc, #624]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023ca:	2180      	movs	r1, #128	@ 0x80
 80023cc:	0249      	lsls	r1, r1, #9
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xdc>
 80023d4:	4b99      	ldr	r3, [pc, #612]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b98      	ldr	r3, [pc, #608]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023da:	4999      	ldr	r1, [pc, #612]	@ (8002640 <HAL_RCC_OscConfig+0x330>)
 80023dc:	400a      	ands	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	4b96      	ldr	r3, [pc, #600]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b95      	ldr	r3, [pc, #596]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80023e6:	4997      	ldr	r1, [pc, #604]	@ (8002644 <HAL_RCC_OscConfig+0x334>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d014      	beq.n	800241e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe feaa 	bl	800114c <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fe:	f7fe fea5 	bl	800114c <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	@ 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e28a      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002410:	4b8a      	ldr	r3, [pc, #552]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	4013      	ands	r3, r2
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0xee>
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7fe fe95 	bl	800114c <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fe90 	bl	800114c <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e275      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b80      	ldr	r3, [pc, #512]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	029b      	lsls	r3, r3, #10
 8002442:	4013      	ands	r3, r2
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x118>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2202      	movs	r2, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d100      	bne.n	8002456 <HAL_RCC_OscConfig+0x146>
 8002454:	e069      	b.n	800252a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002456:	4b79      	ldr	r3, [pc, #484]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	220c      	movs	r2, #12
 800245c:	4013      	ands	r3, r2
 800245e:	d00b      	beq.n	8002478 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002460:	4b76      	ldr	r3, [pc, #472]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	220c      	movs	r2, #12
 8002466:	4013      	ands	r3, r2
 8002468:	2b08      	cmp	r3, #8
 800246a:	d11c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x196>
 800246c:	4b73      	ldr	r3, [pc, #460]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	4013      	ands	r3, r2
 8002476:	d116      	bne.n	80024a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002478:	4b70      	ldr	r3, [pc, #448]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e24b      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b6b      	ldr	r3, [pc, #428]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	22f8      	movs	r2, #248	@ 0xf8
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00da      	lsls	r2, r3, #3
 800249e:	4b67      	ldr	r3, [pc, #412]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a4:	e041      	b.n	800252a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d024      	beq.n	80024f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ae:	4b63      	ldr	r3, [pc, #396]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b62      	ldr	r3, [pc, #392]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fe47 	bl	800114c <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c4:	f7fe fe42 	bl	800114c <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e227      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b59      	ldr	r3, [pc, #356]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	4013      	ands	r3, r2
 80024de:	d0f1      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b56      	ldr	r3, [pc, #344]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	22f8      	movs	r2, #248	@ 0xf8
 80024e6:	4393      	bics	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00da      	lsls	r2, r3, #3
 80024f0:	4b52      	ldr	r3, [pc, #328]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e018      	b.n	800252a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f8:	4b50      	ldr	r3, [pc, #320]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b4f      	ldr	r3, [pc, #316]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80024fe:	2101      	movs	r1, #1
 8002500:	438a      	bics	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fe22 	bl	800114c <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250e:	f7fe fe1d 	bl	800114c <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e202      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002520:	4b46      	ldr	r3, [pc, #280]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d1f1      	bne.n	800250e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2208      	movs	r2, #8
 8002530:	4013      	ands	r3, r2
 8002532:	d036      	beq.n	80025a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d019      	beq.n	8002570 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253c:	4b3f      	ldr	r3, [pc, #252]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800253e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002540:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002542:	2101      	movs	r1, #1
 8002544:	430a      	orrs	r2, r1
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7fe fe00 	bl	800114c <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002552:	f7fe fdfb 	bl	800114c <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1e0      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002564:	4b35      	ldr	r3, [pc, #212]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	2202      	movs	r2, #2
 800256a:	4013      	ands	r3, r2
 800256c:	d0f1      	beq.n	8002552 <HAL_RCC_OscConfig+0x242>
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002570:	4b32      	ldr	r3, [pc, #200]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002572:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002574:	4b31      	ldr	r3, [pc, #196]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002576:	2101      	movs	r1, #1
 8002578:	438a      	bics	r2, r1
 800257a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe fde6 	bl	800114c <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002586:	f7fe fde1 	bl	800114c <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1c6      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	4b28      	ldr	r3, [pc, #160]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	2202      	movs	r2, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	d1f1      	bne.n	8002586 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2204      	movs	r2, #4
 80025a8:	4013      	ands	r3, r2
 80025aa:	d100      	bne.n	80025ae <HAL_RCC_OscConfig+0x29e>
 80025ac:	e0b4      	b.n	8002718 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	201f      	movs	r0, #31
 80025b0:	183b      	adds	r3, r7, r0
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b21      	ldr	r3, [pc, #132]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	2380      	movs	r3, #128	@ 0x80
 80025bc:	055b      	lsls	r3, r3, #21
 80025be:	4013      	ands	r3, r2
 80025c0:	d110      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80025c8:	2180      	movs	r1, #128	@ 0x80
 80025ca:	0549      	lsls	r1, r1, #21
 80025cc:	430a      	orrs	r2, r1
 80025ce:	61da      	str	r2, [r3, #28]
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	055b      	lsls	r3, r3, #21
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025de:	183b      	adds	r3, r7, r0
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <HAL_RCC_OscConfig+0x338>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	d11a      	bne.n	8002626 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f0:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x338>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <HAL_RCC_OscConfig+0x338>)
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	0049      	lsls	r1, r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fda5 	bl	800114c <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002608:	f7fe fda0 	bl	800114c <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e185      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_RCC_OscConfig+0x338>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4013      	ands	r3, r2
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10e      	bne.n	800264c <HAL_RCC_OscConfig+0x33c>
 800262e:	4b03      	ldr	r3, [pc, #12]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002630:	6a1a      	ldr	r2, [r3, #32]
 8002632:	4b02      	ldr	r3, [pc, #8]	@ (800263c <HAL_RCC_OscConfig+0x32c>)
 8002634:	2101      	movs	r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	621a      	str	r2, [r3, #32]
 800263a:	e035      	b.n	80026a8 <HAL_RCC_OscConfig+0x398>
 800263c:	40021000 	.word	0x40021000
 8002640:	fffeffff 	.word	0xfffeffff
 8002644:	fffbffff 	.word	0xfffbffff
 8002648:	40007000 	.word	0x40007000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x35e>
 8002654:	4bb6      	ldr	r3, [pc, #728]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	4bb5      	ldr	r3, [pc, #724]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800265a:	2101      	movs	r1, #1
 800265c:	438a      	bics	r2, r1
 800265e:	621a      	str	r2, [r3, #32]
 8002660:	4bb3      	ldr	r3, [pc, #716]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	4bb2      	ldr	r3, [pc, #712]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002666:	2104      	movs	r1, #4
 8002668:	438a      	bics	r2, r1
 800266a:	621a      	str	r2, [r3, #32]
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x398>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x380>
 8002676:	4bae      	ldr	r3, [pc, #696]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	4bad      	ldr	r3, [pc, #692]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800267c:	2104      	movs	r1, #4
 800267e:	430a      	orrs	r2, r1
 8002680:	621a      	str	r2, [r3, #32]
 8002682:	4bab      	ldr	r3, [pc, #684]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	4baa      	ldr	r3, [pc, #680]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002688:	2101      	movs	r1, #1
 800268a:	430a      	orrs	r2, r1
 800268c:	621a      	str	r2, [r3, #32]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0x398>
 8002690:	4ba7      	ldr	r3, [pc, #668]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	4ba6      	ldr	r3, [pc, #664]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002696:	2101      	movs	r1, #1
 8002698:	438a      	bics	r2, r1
 800269a:	621a      	str	r2, [r3, #32]
 800269c:	4ba4      	ldr	r3, [pc, #656]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	4ba3      	ldr	r3, [pc, #652]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80026a2:	2104      	movs	r1, #4
 80026a4:	438a      	bics	r2, r1
 80026a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d014      	beq.n	80026da <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7fe fd4c 	bl	800114c <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e009      	b.n	80026ce <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fd47 	bl	800114c <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	4a9b      	ldr	r2, [pc, #620]	@ (8002934 <HAL_RCC_OscConfig+0x624>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e12b      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	4b98      	ldr	r3, [pc, #608]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	2202      	movs	r2, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x3aa>
 80026d8:	e013      	b.n	8002702 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe fd37 	bl	800114c <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e2:	e009      	b.n	80026f8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe fd32 	bl	800114c <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4a91      	ldr	r2, [pc, #580]	@ (8002934 <HAL_RCC_OscConfig+0x624>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e116      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	2202      	movs	r2, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002702:	231f      	movs	r3, #31
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b88      	ldr	r3, [pc, #544]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	4b87      	ldr	r3, [pc, #540]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002712:	4989      	ldr	r1, [pc, #548]	@ (8002938 <HAL_RCC_OscConfig+0x628>)
 8002714:	400a      	ands	r2, r1
 8002716:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2210      	movs	r2, #16
 800271e:	4013      	ands	r3, r2
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d12a      	bne.n	8002780 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800272a:	4b81      	ldr	r3, [pc, #516]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800272c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800272e:	4b80      	ldr	r3, [pc, #512]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002730:	2104      	movs	r1, #4
 8002732:	430a      	orrs	r2, r1
 8002734:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002736:	4b7e      	ldr	r3, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800273a:	4b7d      	ldr	r3, [pc, #500]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7fe fd03 	bl	800114c <HAL_GetTick>
 8002746:	0003      	movs	r3, r0
 8002748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800274c:	f7fe fcfe 	bl	800114c <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0e3      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800275e:	4b74      	ldr	r3, [pc, #464]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d0f1      	beq.n	800274c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002768:	4b71      	ldr	r3, [pc, #452]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800276a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276c:	22f8      	movs	r2, #248	@ 0xf8
 800276e:	4393      	bics	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	00da      	lsls	r2, r3, #3
 8002778:	4b6d      	ldr	r3, [pc, #436]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800277a:	430a      	orrs	r2, r1
 800277c:	635a      	str	r2, [r3, #52]	@ 0x34
 800277e:	e034      	b.n	80027ea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	3305      	adds	r3, #5
 8002786:	d111      	bne.n	80027ac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002788:	4b69      	ldr	r3, [pc, #420]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800278a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800278c:	4b68      	ldr	r3, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800278e:	2104      	movs	r1, #4
 8002790:	438a      	bics	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002794:	4b66      	ldr	r3, [pc, #408]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002798:	22f8      	movs	r2, #248	@ 0xf8
 800279a:	4393      	bics	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	00da      	lsls	r2, r3, #3
 80027a4:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027aa:	e01e      	b.n	80027ea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ac:	4b60      	ldr	r3, [pc, #384]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80027ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80027b2:	2104      	movs	r1, #4
 80027b4:	430a      	orrs	r2, r1
 80027b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027b8:	4b5d      	ldr	r3, [pc, #372]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80027ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027bc:	4b5c      	ldr	r3, [pc, #368]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80027be:	2101      	movs	r1, #1
 80027c0:	438a      	bics	r2, r1
 80027c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fcc2 	bl	800114c <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027ce:	f7fe fcbd 	bl	800114c <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0a2      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027e0:	4b53      	ldr	r3, [pc, #332]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d1f1      	bne.n	80027ce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d100      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4e4>
 80027f2:	e097      	b.n	8002924 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	220c      	movs	r2, #12
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d100      	bne.n	8002802 <HAL_RCC_OscConfig+0x4f2>
 8002800:	e06b      	b.n	80028da <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d14c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b49      	ldr	r3, [pc, #292]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b48      	ldr	r3, [pc, #288]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002810:	494a      	ldr	r1, [pc, #296]	@ (800293c <HAL_RCC_OscConfig+0x62c>)
 8002812:	400a      	ands	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fc99 	bl	800114c <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fc94 	bl	800114c <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e079      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	4b3f      	ldr	r3, [pc, #252]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	049b      	lsls	r3, r3, #18
 800283a:	4013      	ands	r3, r2
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283e:	4b3c      	ldr	r3, [pc, #240]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	220f      	movs	r2, #15
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800284c:	4b38      	ldr	r3, [pc, #224]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800284e:	430a      	orrs	r2, r1
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002852:	4b37      	ldr	r3, [pc, #220]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a3a      	ldr	r2, [pc, #232]	@ (8002940 <HAL_RCC_OscConfig+0x630>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	431a      	orrs	r2, r3
 8002866:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002868:	430a      	orrs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b30      	ldr	r3, [pc, #192]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002872:	2180      	movs	r1, #128	@ 0x80
 8002874:	0449      	lsls	r1, r1, #17
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fc67 	bl	800114c <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe fc62 	bl	800114c <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e047      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002896:	4b26      	ldr	r3, [pc, #152]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	049b      	lsls	r3, r3, #18
 800289e:	4013      	ands	r3, r2
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x574>
 80028a2:	e03f      	b.n	8002924 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a4:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80028aa:	4924      	ldr	r1, [pc, #144]	@ (800293c <HAL_RCC_OscConfig+0x62c>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fc4c 	bl	800114c <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe fc47 	bl	800114c <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e02c      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028cc:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	049b      	lsls	r3, r3, #18
 80028d4:	4013      	ands	r3, r2
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x5aa>
 80028d8:	e024      	b.n	8002924 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e01f      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80028e6:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80028ec:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_RCC_OscConfig+0x620>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	401a      	ands	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	429a      	cmp	r2, r3
 8002900:	d10e      	bne.n	8002920 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	220f      	movs	r2, #15
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	23f0      	movs	r3, #240	@ 0xf0
 8002914:	039b      	lsls	r3, r3, #14
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b008      	add	sp, #32
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	40021000 	.word	0x40021000
 8002934:	00001388 	.word	0x00001388
 8002938:	efffffff 	.word	0xefffffff
 800293c:	feffffff 	.word	0xfeffffff
 8002940:	ffc2ffff 	.word	0xffc2ffff

08002944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b3      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	4013      	ands	r3, r2
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d911      	bls.n	800298a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b58      	ldr	r3, [pc, #352]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	4393      	bics	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	4b55      	ldr	r3, [pc, #340]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002978:	4b53      	ldr	r3, [pc, #332]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	4013      	ands	r3, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e09a      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d015      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2204      	movs	r2, #4
 800299a:	4013      	ands	r3, r2
 800299c:	d006      	beq.n	80029ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800299e:	4b4b      	ldr	r3, [pc, #300]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4b4a      	ldr	r3, [pc, #296]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 80029a4:	21e0      	movs	r1, #224	@ 0xe0
 80029a6:	00c9      	lsls	r1, r1, #3
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b47      	ldr	r3, [pc, #284]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	22f0      	movs	r2, #240	@ 0xf0
 80029b2:	4393      	bics	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	4b44      	ldr	r3, [pc, #272]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	d040      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b3e      	ldr	r3, [pc, #248]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	4013      	ands	r3, r2
 80029dc:	d114      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06e      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	049b      	lsls	r3, r3, #18
 80029f2:	4013      	ands	r3, r2
 80029f4:	d108      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e062      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	4b34      	ldr	r3, [pc, #208]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e05b      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4393      	bics	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fb96 	bl	800114c <HAL_GetTick>
 8002a20:	0003      	movs	r3, r0
 8002a22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a24:	e009      	b.n	8002a3a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a26:	f7fe fb91 	bl	800114c <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <HAL_RCC_ClockConfig+0x18c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e042      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	220c      	movs	r2, #12
 8002a40:	401a      	ands	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d1ec      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d211      	bcs.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4393      	bics	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6c:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <HAL_RCC_ClockConfig+0x184>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e020      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2204      	movs	r2, #4
 8002a84:	4013      	ands	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a11      	ldr	r2, [pc, #68]	@ (8002ad4 <HAL_RCC_ClockConfig+0x190>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	0019      	movs	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a9c:	f000 f820 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002aa0:	0001      	movs	r1, r0
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_RCC_ClockConfig+0x188>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	4013      	ands	r3, r2
 8002aac:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <HAL_RCC_ClockConfig+0x194>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	000a      	movs	r2, r1
 8002ab2:	40da      	lsrs	r2, r3
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_ClockConfig+0x198>)
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f7fe f9d7 	bl	8000e6c <HAL_InitTick>
  
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	00001388 	.word	0x00001388
 8002ad4:	fffff8ff 	.word	0xfffff8ff
 8002ad8:	08006670 	.word	0x08006670
 8002adc:	20000010 	.word	0x20000010

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	220c      	movs	r2, #12
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x30>
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x36>
 8002b0e:	e02c      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b12:	613b      	str	r3, [r7, #16]
      break;
 8002b14:	e02c      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	220f      	movs	r2, #15
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	4a16      	ldr	r2, [pc, #88]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	025b      	lsls	r3, r3, #9
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	4810      	ldr	r0, [pc, #64]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b40:	f7fd faec 	bl	800011c <__udivsi3>
 8002b44:	0003      	movs	r3, r0
 8002b46:	001a      	movs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4353      	muls	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e009      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	000a      	movs	r2, r1
 8002b54:	0152      	lsls	r2, r2, #5
 8002b56:	1a52      	subs	r2, r2, r1
 8002b58:	0193      	lsls	r3, r2, #6
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	185b      	adds	r3, r3, r1
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
      break;
 8002b68:	e002      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b6a:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b6c:	613b      	str	r3, [r7, #16]
      break;
 8002b6e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b70:	693b      	ldr	r3, [r7, #16]
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b006      	add	sp, #24
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	007a1200 	.word	0x007a1200
 8002b84:	08006688 	.word	0x08006688
 8002b88:	08006698 	.word	0x08006698

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b02      	ldr	r3, [pc, #8]	@ (8002b9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	20000010 	.word	0x20000010

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ba4:	f7ff fff2 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002ba8:	0001      	movs	r1, r0
 8002baa:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bb6:	5cd3      	ldrb	r3, [r2, r3]
 8002bb8:	40d9      	lsrs	r1, r3
 8002bba:	000b      	movs	r3, r1
}    
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08006680 	.word	0x08006680

08002bcc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <HAL_RCC_GetClockConfig+0x4c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2203      	movs	r2, #3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_RCC_GetClockConfig+0x4c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	22f0      	movs	r2, #240	@ 0xf0
 8002bee:	401a      	ands	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <HAL_RCC_GetClockConfig+0x4c>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	23e0      	movs	r3, #224	@ 0xe0
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_RCC_GetClockConfig+0x50>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	401a      	ands	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			@ (mov r8, r8)
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40022000 	.word	0x40022000

08002c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	025b      	lsls	r3, r3, #9
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d100      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002c3c:	e08e      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2017      	movs	r0, #23
 8002c40:	183b      	adds	r3, r7, r0
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b57      	ldr	r3, [pc, #348]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	055b      	lsls	r3, r3, #21
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d110      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	4b53      	ldr	r3, [pc, #332]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c58:	2180      	movs	r1, #128	@ 0x80
 8002c5a:	0549      	lsls	r1, r1, #21
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	61da      	str	r2, [r3, #28]
 8002c60:	4b50      	ldr	r3, [pc, #320]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	055b      	lsls	r3, r3, #21
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6e:	183b      	adds	r3, r7, r0
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b4c      	ldr	r3, [pc, #304]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d11a      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c80:	4b49      	ldr	r3, [pc, #292]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b48      	ldr	r3, [pc, #288]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c86:	2180      	movs	r1, #128	@ 0x80
 8002c88:	0049      	lsls	r1, r1, #1
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fa5d 	bl	800114c <HAL_GetTick>
 8002c92:	0003      	movs	r3, r0
 8002c94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	e008      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c98:	f7fe fa58 	bl	800114c <HAL_GetTick>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e077      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b3f      	ldr	r3, [pc, #252]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cb8:	6a1a      	ldr	r2, [r3, #32]
 8002cba:	23c0      	movs	r3, #192	@ 0xc0
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d034      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	23c0      	movs	r3, #192	@ 0xc0
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d02c      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a33      	ldr	r2, [pc, #204]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ce2:	4b30      	ldr	r3, [pc, #192]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ce8:	2180      	movs	r1, #128	@ 0x80
 8002cea:	0249      	lsls	r1, r1, #9
 8002cec:	430a      	orrs	r2, r1
 8002cee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf2:	6a1a      	ldr	r2, [r3, #32]
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf6:	492e      	ldr	r1, [pc, #184]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cfc:	4b29      	ldr	r3, [pc, #164]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fa1f 	bl	800114c <HAL_GetTick>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	e009      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fe fa1a 	bl	800114c <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a25      	ldr	r2, [pc, #148]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e038      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d32:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a1d      	ldr	r2, [pc, #116]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d46:	2317      	movs	r3, #23
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d56:	4918      	ldr	r1, [pc, #96]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d66:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	0019      	movs	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d76:	430a      	orrs	r2, r1
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d84:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	2210      	movs	r2, #16
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b006      	add	sp, #24
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
 8002dac:	fffffcff 	.word	0xfffffcff
 8002db0:	fffeffff 	.word	0xfffeffff
 8002db4:	00001388 	.word	0x00001388
 8002db8:	efffffff 	.word	0xefffffff

08002dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e042      	b.n	8002e54 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223d      	movs	r2, #61	@ 0x3d
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	223c      	movs	r2, #60	@ 0x3c
 8002dde:	2100      	movs	r1, #0
 8002de0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f839 	bl	8002e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223d      	movs	r2, #61	@ 0x3d
 8002dee:	2102      	movs	r1, #2
 8002df0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	f000 f98f 	bl	8003120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2246      	movs	r2, #70	@ 0x46
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	223e      	movs	r2, #62	@ 0x3e
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	223f      	movs	r2, #63	@ 0x3f
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2240      	movs	r2, #64	@ 0x40
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2241      	movs	r2, #65	@ 0x41
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2242      	movs	r2, #66	@ 0x42
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2243      	movs	r2, #67	@ 0x43
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2244      	movs	r2, #68	@ 0x44
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2245      	movs	r2, #69	@ 0x45
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	@ 0x3d
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	223d      	movs	r2, #61	@ 0x3d
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d001      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e035      	b.n	8002ef0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	223d      	movs	r2, #61	@ 0x3d
 8002e88:	2102      	movs	r1, #2
 8002e8a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2101      	movs	r1, #1
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <HAL_TIM_Base_Start_IT+0x8c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x4e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <HAL_TIM_Base_Start_IT+0x90>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x4e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <HAL_TIM_Base_Start_IT+0x94>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d111      	bne.n	8002ede <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d010      	beq.n	8002eee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	e007      	b.n	8002eee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b004      	add	sp, #16
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40014000 	.word	0x40014000

08002f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d021      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d01d      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2203      	movs	r2, #3
 8002f32:	4252      	negs	r2, r2
 8002f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2203      	movs	r2, #3
 8002f44:	4013      	ands	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 f8d0 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e007      	b.n	8002f62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 f8c3 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 f8cf 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2204      	movs	r2, #4
 8002f74:	4013      	ands	r3, r2
 8002f76:	d01e      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2205      	movs	r2, #5
 8002f7e:	4252      	negs	r2, r2
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	23c0      	movs	r3, #192	@ 0xc0
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f8a9 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002f9e:	e007      	b.n	8002fb0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f89c 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f8a8 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d021      	beq.n	8003002 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2209      	movs	r2, #9
 8002fcc:	4252      	negs	r2, r2
 8002fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f883 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002fea:	e007      	b.n	8002ffc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 f876 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f882 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2210      	movs	r2, #16
 8003006:	4013      	ands	r3, r2
 8003008:	d022      	beq.n	8003050 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2210      	movs	r2, #16
 800300e:	4013      	ands	r3, r2
 8003010:	d01e      	beq.n	8003050 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2211      	movs	r2, #17
 8003018:	4252      	negs	r2, r2
 800301a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2208      	movs	r2, #8
 8003020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	23c0      	movs	r3, #192	@ 0xc0
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4013      	ands	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f85c 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8003038:	e007      	b.n	800304a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f000 f84f 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0018      	movs	r0, r3
 8003046:	f000 f85b 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2201      	movs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	d00c      	beq.n	8003072 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	d008      	beq.n	8003072 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2202      	movs	r2, #2
 8003066:	4252      	negs	r2, r2
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f7fd fe21 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2280      	movs	r2, #128	@ 0x80
 8003076:	4013      	ands	r3, r2
 8003078:	d00c      	beq.n	8003094 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2280      	movs	r2, #128	@ 0x80
 800307e:	4013      	ands	r3, r2
 8003080:	d008      	beq.n	8003094 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2281      	movs	r2, #129	@ 0x81
 8003088:	4252      	negs	r2, r2
 800308a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	0018      	movs	r0, r3
 8003090:	f000 f8d2 	bl	8003238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2240      	movs	r2, #64	@ 0x40
 8003098:	4013      	ands	r3, r2
 800309a:	d00c      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	@ 0x40
 80030a0:	4013      	ands	r3, r2
 80030a2:	d008      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2241      	movs	r2, #65	@ 0x41
 80030aa:	4252      	negs	r2, r2
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f82d 	bl	8003110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2220      	movs	r2, #32
 80030ba:	4013      	ands	r3, r2
 80030bc:	d00c      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	4013      	ands	r3, r2
 80030c4:	d008      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2221      	movs	r2, #33	@ 0x21
 80030cc:	4252      	negs	r2, r2
 80030ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 f8a8 	bl	8003228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003108:	46c0      	nop			@ (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003118:	46c0      	nop			@ (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a36      	ldr	r2, [pc, #216]	@ (800320c <TIM_Base_SetConfig+0xec>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_Base_SetConfig+0x20>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a35      	ldr	r2, [pc, #212]	@ (8003210 <TIM_Base_SetConfig+0xf0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d108      	bne.n	8003152 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2270      	movs	r2, #112	@ 0x70
 8003144:	4393      	bics	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2d      	ldr	r2, [pc, #180]	@ (800320c <TIM_Base_SetConfig+0xec>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_Base_SetConfig+0x62>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2c      	ldr	r2, [pc, #176]	@ (8003210 <TIM_Base_SetConfig+0xf0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2b      	ldr	r2, [pc, #172]	@ (8003214 <TIM_Base_SetConfig+0xf4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <TIM_Base_SetConfig+0xf8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0x62>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a29      	ldr	r2, [pc, #164]	@ (800321c <TIM_Base_SetConfig+0xfc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a28      	ldr	r2, [pc, #160]	@ (8003220 <TIM_Base_SetConfig+0x100>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <TIM_Base_SetConfig+0x104>)
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2280      	movs	r2, #128	@ 0x80
 8003198:	4393      	bics	r3, r2
 800319a:	001a      	movs	r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a13      	ldr	r2, [pc, #76]	@ (800320c <TIM_Base_SetConfig+0xec>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0xba>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <TIM_Base_SetConfig+0xf8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0xba>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a13      	ldr	r2, [pc, #76]	@ (800321c <TIM_Base_SetConfig+0xfc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0xba>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <TIM_Base_SetConfig+0x100>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d103      	bne.n	80031e2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4393      	bics	r3, r2
 80031fc:	001a      	movs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	611a      	str	r2, [r3, #16]
  }
}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40000400 	.word	0x40000400
 8003214:	40002000 	.word	0x40002000
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800
 8003224:	fffffcff 	.word	0xfffffcff

08003228 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e044      	b.n	80032e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2278      	movs	r2, #120	@ 0x78
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd fdb1 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	@ 0x24
 8003276:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2101      	movs	r1, #1
 8003284:	438a      	bics	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	0018      	movs	r0, r3
 8003294:	f000 fa0c 	bl	80036b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	0018      	movs	r0, r3
 800329c:	f000 f8c8 	bl	8003430 <UART_SetConfig>
 80032a0:	0003      	movs	r3, r0
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e01c      	b.n	80032e4 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	490d      	ldr	r1, [pc, #52]	@ (80032ec <HAL_UART_Init+0xa4>)
 80032b6:	400a      	ands	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2108      	movs	r1, #8
 80032c6:	438a      	bics	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fa9b 	bl	8003818 <UART_CheckIdleState>
 80032e2:	0003      	movs	r3, r0
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	fffff7ff 	.word	0xfffff7ff

080032f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	1dbb      	adds	r3, r7, #6
 80032fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003304:	2b20      	cmp	r3, #32
 8003306:	d000      	beq.n	800330a <HAL_UART_Transmit+0x1a>
 8003308:	e08c      	b.n	8003424 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_UART_Transmit+0x28>
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e084      	b.n	8003426 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	429a      	cmp	r2, r3
 8003326:	d109      	bne.n	800333c <HAL_UART_Transmit+0x4c>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2201      	movs	r2, #1
 8003334:	4013      	ands	r3, r2
 8003336:	d001      	beq.n	800333c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e074      	b.n	8003426 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2284      	movs	r2, #132	@ 0x84
 8003340:	2100      	movs	r1, #0
 8003342:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2221      	movs	r2, #33	@ 0x21
 8003348:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334a:	f7fd feff 	bl	800114c <HAL_GetTick>
 800334e:	0003      	movs	r3, r0
 8003350:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1dba      	adds	r2, r7, #6
 8003356:	2150      	movs	r1, #80	@ 0x50
 8003358:	8812      	ldrh	r2, [r2, #0]
 800335a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1dba      	adds	r2, r7, #6
 8003360:	2152      	movs	r1, #82	@ 0x52
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	429a      	cmp	r2, r3
 8003370:	d108      	bne.n	8003384 <HAL_UART_Transmit+0x94>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	e003      	b.n	800338c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800338c:	e02f      	b.n	80033ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	0013      	movs	r3, r2
 8003398:	2200      	movs	r2, #0
 800339a:	2180      	movs	r1, #128	@ 0x80
 800339c:	f000 fae4 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d004      	beq.n	80033ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e03b      	b.n	8003426 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	881a      	ldrh	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	05d2      	lsls	r2, r2, #23
 80033be:	0dd2      	lsrs	r2, r2, #23
 80033c0:	b292      	uxth	r2, r2
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	3302      	adds	r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e007      	b.n	80033dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2252      	movs	r2, #82	@ 0x52
 80033e0:	5a9b      	ldrh	r3, [r3, r2]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b299      	uxth	r1, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2252      	movs	r2, #82	@ 0x52
 80033ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2252      	movs	r2, #82	@ 0x52
 80033f2:	5a9b      	ldrh	r3, [r3, r2]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1c9      	bne.n	800338e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	0013      	movs	r3, r2
 8003404:	2200      	movs	r2, #0
 8003406:	2140      	movs	r1, #64	@ 0x40
 8003408:	f000 faae 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d004      	beq.n	800341a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e005      	b.n	8003426 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b008      	add	sp, #32
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003438:	231e      	movs	r3, #30
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a8d      	ldr	r2, [pc, #564]	@ (8003694 <UART_SetConfig+0x264>)
 8003460:	4013      	ands	r3, r2
 8003462:	0019      	movs	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a88      	ldr	r2, [pc, #544]	@ (8003698 <UART_SetConfig+0x268>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a7f      	ldr	r2, [pc, #508]	@ (800369c <UART_SetConfig+0x26c>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a7b      	ldr	r2, [pc, #492]	@ (80036a0 <UART_SetConfig+0x270>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d127      	bne.n	8003506 <UART_SetConfig+0xd6>
 80034b6:	4b7b      	ldr	r3, [pc, #492]	@ (80036a4 <UART_SetConfig+0x274>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	2203      	movs	r2, #3
 80034bc:	4013      	ands	r3, r2
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d00d      	beq.n	80034de <UART_SetConfig+0xae>
 80034c2:	d81b      	bhi.n	80034fc <UART_SetConfig+0xcc>
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d014      	beq.n	80034f2 <UART_SetConfig+0xc2>
 80034c8:	d818      	bhi.n	80034fc <UART_SetConfig+0xcc>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <UART_SetConfig+0xa4>
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d00a      	beq.n	80034e8 <UART_SetConfig+0xb8>
 80034d2:	e013      	b.n	80034fc <UART_SetConfig+0xcc>
 80034d4:	231f      	movs	r3, #31
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e021      	b.n	8003522 <UART_SetConfig+0xf2>
 80034de:	231f      	movs	r3, #31
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2202      	movs	r2, #2
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e01c      	b.n	8003522 <UART_SetConfig+0xf2>
 80034e8:	231f      	movs	r3, #31
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2204      	movs	r2, #4
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e017      	b.n	8003522 <UART_SetConfig+0xf2>
 80034f2:	231f      	movs	r3, #31
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2208      	movs	r2, #8
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e012      	b.n	8003522 <UART_SetConfig+0xf2>
 80034fc:	231f      	movs	r3, #31
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	2210      	movs	r2, #16
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e00d      	b.n	8003522 <UART_SetConfig+0xf2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a67      	ldr	r2, [pc, #412]	@ (80036a8 <UART_SetConfig+0x278>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d104      	bne.n	800351a <UART_SetConfig+0xea>
 8003510:	231f      	movs	r3, #31
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e003      	b.n	8003522 <UART_SetConfig+0xf2>
 800351a:	231f      	movs	r3, #31
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	2210      	movs	r2, #16
 8003520:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	429a      	cmp	r2, r3
 800352c:	d15c      	bne.n	80035e8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800352e:	231f      	movs	r3, #31
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d015      	beq.n	8003564 <UART_SetConfig+0x134>
 8003538:	dc18      	bgt.n	800356c <UART_SetConfig+0x13c>
 800353a:	2b04      	cmp	r3, #4
 800353c:	d00d      	beq.n	800355a <UART_SetConfig+0x12a>
 800353e:	dc15      	bgt.n	800356c <UART_SetConfig+0x13c>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <UART_SetConfig+0x11a>
 8003544:	2b02      	cmp	r3, #2
 8003546:	d005      	beq.n	8003554 <UART_SetConfig+0x124>
 8003548:	e010      	b.n	800356c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354a:	f7ff fb29 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 800354e:	0003      	movs	r3, r0
 8003550:	61bb      	str	r3, [r7, #24]
        break;
 8003552:	e012      	b.n	800357a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003554:	4b55      	ldr	r3, [pc, #340]	@ (80036ac <UART_SetConfig+0x27c>)
 8003556:	61bb      	str	r3, [r7, #24]
        break;
 8003558:	e00f      	b.n	800357a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355a:	f7ff fac1 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 800355e:	0003      	movs	r3, r0
 8003560:	61bb      	str	r3, [r7, #24]
        break;
 8003562:	e00a      	b.n	800357a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003564:	2380      	movs	r3, #128	@ 0x80
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	61bb      	str	r3, [r7, #24]
        break;
 800356a:	e006      	b.n	800357a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003570:	231e      	movs	r3, #30
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
        break;
 8003578:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d100      	bne.n	8003582 <UART_SetConfig+0x152>
 8003580:	e07a      	b.n	8003678 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	005a      	lsls	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	18d2      	adds	r2, r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0019      	movs	r1, r3
 8003594:	0010      	movs	r0, r2
 8003596:	f7fc fdc1 	bl	800011c <__udivsi3>
 800359a:	0003      	movs	r3, r0
 800359c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d91c      	bls.n	80035de <UART_SetConfig+0x1ae>
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	2380      	movs	r3, #128	@ 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d217      	bcs.n	80035de <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	200e      	movs	r0, #14
 80035b4:	183b      	adds	r3, r7, r0
 80035b6:	210f      	movs	r1, #15
 80035b8:	438a      	bics	r2, r1
 80035ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2207      	movs	r2, #7
 80035c4:	4013      	ands	r3, r2
 80035c6:	b299      	uxth	r1, r3
 80035c8:	183b      	adds	r3, r7, r0
 80035ca:	183a      	adds	r2, r7, r0
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	183a      	adds	r2, r7, r0
 80035d8:	8812      	ldrh	r2, [r2, #0]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	e04c      	b.n	8003678 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80035de:	231e      	movs	r3, #30
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e047      	b.n	8003678 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035e8:	231f      	movs	r3, #31
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d015      	beq.n	800361e <UART_SetConfig+0x1ee>
 80035f2:	dc18      	bgt.n	8003626 <UART_SetConfig+0x1f6>
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d00d      	beq.n	8003614 <UART_SetConfig+0x1e4>
 80035f8:	dc15      	bgt.n	8003626 <UART_SetConfig+0x1f6>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <UART_SetConfig+0x1d4>
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d005      	beq.n	800360e <UART_SetConfig+0x1de>
 8003602:	e010      	b.n	8003626 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7ff facc 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8003608:	0003      	movs	r3, r0
 800360a:	61bb      	str	r3, [r7, #24]
        break;
 800360c:	e012      	b.n	8003634 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800360e:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <UART_SetConfig+0x27c>)
 8003610:	61bb      	str	r3, [r7, #24]
        break;
 8003612:	e00f      	b.n	8003634 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003614:	f7ff fa64 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8003618:	0003      	movs	r3, r0
 800361a:	61bb      	str	r3, [r7, #24]
        break;
 800361c:	e00a      	b.n	8003634 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	61bb      	str	r3, [r7, #24]
        break;
 8003624:	e006      	b.n	8003634 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800362a:	231e      	movs	r3, #30
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
        break;
 8003632:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01e      	beq.n	8003678 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085a      	lsrs	r2, r3, #1
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	18d2      	adds	r2, r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0019      	movs	r1, r3
 800364a:	0010      	movs	r0, r2
 800364c:	f7fc fd66 	bl	800011c <__udivsi3>
 8003650:	0003      	movs	r3, r0
 8003652:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	d90a      	bls.n	8003670 <UART_SetConfig+0x240>
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	025b      	lsls	r3, r3, #9
 8003660:	429a      	cmp	r2, r3
 8003662:	d205      	bcs.n	8003670 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	e003      	b.n	8003678 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003670:	231e      	movs	r3, #30
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003684:	231e      	movs	r3, #30
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	781b      	ldrb	r3, [r3, #0]
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b008      	add	sp, #32
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	ffff69f3 	.word	0xffff69f3
 8003698:	ffffcfff 	.word	0xffffcfff
 800369c:	fffff4ff 	.word	0xfffff4ff
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40004400 	.word	0x40004400
 80036ac:	007a1200 	.word	0x007a1200

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	2208      	movs	r2, #8
 80036be:	4013      	ands	r3, r2
 80036c0:	d00b      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a4a      	ldr	r2, [pc, #296]	@ (80037f4 <UART_AdvFeatureConfig+0x144>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	2201      	movs	r2, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	d00b      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a43      	ldr	r2, [pc, #268]	@ (80037f8 <UART_AdvFeatureConfig+0x148>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	0019      	movs	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	2202      	movs	r2, #2
 8003702:	4013      	ands	r3, r2
 8003704:	d00b      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a3b      	ldr	r2, [pc, #236]	@ (80037fc <UART_AdvFeatureConfig+0x14c>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	2204      	movs	r2, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d00b      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a34      	ldr	r2, [pc, #208]	@ (8003800 <UART_AdvFeatureConfig+0x150>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	2210      	movs	r2, #16
 8003746:	4013      	ands	r3, r2
 8003748:	d00b      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a2c      	ldr	r2, [pc, #176]	@ (8003804 <UART_AdvFeatureConfig+0x154>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	2220      	movs	r2, #32
 8003768:	4013      	ands	r3, r2
 800376a:	d00b      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <UART_AdvFeatureConfig+0x158>)
 8003774:	4013      	ands	r3, r2
 8003776:	0019      	movs	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	2240      	movs	r2, #64	@ 0x40
 800378a:	4013      	ands	r3, r2
 800378c:	d01d      	beq.n	80037ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <UART_AdvFeatureConfig+0x15c>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	035b      	lsls	r3, r3, #13
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d10b      	bne.n	80037ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <UART_AdvFeatureConfig+0x160>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	2280      	movs	r2, #128	@ 0x80
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a0e      	ldr	r2, [pc, #56]	@ (8003814 <UART_AdvFeatureConfig+0x164>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  }
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	ffff7fff 	.word	0xffff7fff
 80037f8:	fffdffff 	.word	0xfffdffff
 80037fc:	fffeffff 	.word	0xfffeffff
 8003800:	fffbffff 	.word	0xfffbffff
 8003804:	ffffefff 	.word	0xffffefff
 8003808:	ffffdfff 	.word	0xffffdfff
 800380c:	ffefffff 	.word	0xffefffff
 8003810:	ff9fffff 	.word	0xff9fffff
 8003814:	fff7ffff 	.word	0xfff7ffff

08003818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b092      	sub	sp, #72	@ 0x48
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2284      	movs	r2, #132	@ 0x84
 8003824:	2100      	movs	r1, #0
 8003826:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003828:	f7fd fc90 	bl	800114c <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2208      	movs	r2, #8
 8003838:	4013      	ands	r3, r2
 800383a:	2b08      	cmp	r3, #8
 800383c:	d12c      	bne.n	8003898 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800383e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003840:	2280      	movs	r2, #128	@ 0x80
 8003842:	0391      	lsls	r1, r2, #14
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4a46      	ldr	r2, [pc, #280]	@ (8003960 <UART_CheckIdleState+0x148>)
 8003848:	9200      	str	r2, [sp, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	f000 f88c 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d021      	beq.n	8003898 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003854:	f3ef 8310 	mrs	r3, PRIMASK
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800385e:	2301      	movs	r3, #1
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2180      	movs	r1, #128	@ 0x80
 8003876:	438a      	bics	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003880:	f383 8810 	msr	PRIMASK, r3
}
 8003884:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2278      	movs	r2, #120	@ 0x78
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e05f      	b.n	8003958 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2204      	movs	r2, #4
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d146      	bne.n	8003934 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a8:	2280      	movs	r2, #128	@ 0x80
 80038aa:	03d1      	lsls	r1, r2, #15
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003960 <UART_CheckIdleState+0x148>)
 80038b0:	9200      	str	r2, [sp, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f000 f858 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d03b      	beq.n	8003934 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038bc:	f3ef 8310 	mrs	r3, PRIMASK
 80038c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c6:	2301      	movs	r3, #1
 80038c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			@ (mov r8, r8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4921      	ldr	r1, [pc, #132]	@ (8003964 <UART_CheckIdleState+0x14c>)
 80038de:	400a      	ands	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ee:	f3ef 8310 	mrs	r3, PRIMASK
 80038f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038f8:	2301      	movs	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2101      	movs	r1, #1
 8003910:	438a      	bics	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2280      	movs	r2, #128	@ 0x80
 8003924:	2120      	movs	r1, #32
 8003926:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2278      	movs	r2, #120	@ 0x78
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e011      	b.n	8003958 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	2120      	movs	r1, #32
 8003940:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2278      	movs	r2, #120	@ 0x78
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b010      	add	sp, #64	@ 0x40
 800395e:	bd80      	pop	{r7, pc}
 8003960:	01ffffff 	.word	0x01ffffff
 8003964:	fffffedf 	.word	0xfffffedf

08003968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	1dfb      	adds	r3, r7, #7
 8003976:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003978:	e051      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	3301      	adds	r3, #1
 800397e:	d04e      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003980:	f7fd fbe4 	bl	800114c <HAL_GetTick>
 8003984:	0002      	movs	r2, r0
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e051      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb6>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b80      	cmp	r3, #128	@ 0x80
 80039aa:	d038      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb6>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b40      	cmp	r3, #64	@ 0x40
 80039b0:	d035      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2208      	movs	r2, #8
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d111      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2208      	movs	r2, #8
 80039c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 f83c 	bl	8003a48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2284      	movs	r2, #132	@ 0x84
 80039d4:	2108      	movs	r1, #8
 80039d6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2278      	movs	r2, #120	@ 0x78
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e02c      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	401a      	ands	r2, r3
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d112      	bne.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2280      	movs	r2, #128	@ 0x80
 80039fe:	0112      	lsls	r2, r2, #4
 8003a00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 f81f 	bl	8003a48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2284      	movs	r2, #132	@ 0x84
 8003a0e:	2120      	movs	r1, #32
 8003a10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2278      	movs	r2, #120	@ 0x78
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00f      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	425a      	negs	r2, r3
 8003a2e:	4153      	adcs	r3, r2
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	001a      	movs	r2, r3
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d09e      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08e      	sub	sp, #56	@ 0x38
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a50:	f3ef 8310 	mrs	r3, PRIMASK
 8003a54:	617b      	str	r3, [r7, #20]
  return(result);
 8003a56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			@ (mov r8, r8)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4926      	ldr	r1, [pc, #152]	@ (8003b0c <UART_EndRxTransfer+0xc4>)
 8003a72:	400a      	ands	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a82:	f3ef 8310 	mrs	r3, PRIMASK
 8003a86:	623b      	str	r3, [r7, #32]
  return(result);
 8003a88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d118      	bne.n	8003aee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2110      	movs	r1, #16
 8003ade:	438a      	bics	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2280      	movs	r2, #128	@ 0x80
 8003af2:	2120      	movs	r1, #32
 8003af4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b00e      	add	sp, #56	@ 0x38
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	fffffedf 	.word	0xfffffedf

08003b10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	0002      	movs	r2, r0
 8003b18:	1dbb      	adds	r3, r7, #6
 8003b1a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b20:	1dbb      	adds	r3, r7, #6
 8003b22:	2200      	movs	r2, #0
 8003b24:	5e9b      	ldrsh	r3, [r3, r2]
 8003b26:	2b84      	cmp	r3, #132	@ 0x84
 8003b28:	d006      	beq.n	8003b38 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003b2a:	1dbb      	adds	r3, r7, #6
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	5e9a      	ldrsh	r2, [r3, r2]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	18d3      	adds	r3, r2, r3
 8003b34:	3303      	adds	r3, #3
 8003b36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b46:	f000 fe67 	bl	8004818 <vTaskStartScheduler>
  
  return osOK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b54:	b089      	sub	sp, #36	@ 0x24
 8003b56:	af04      	add	r7, sp, #16
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <osThreadCreate+0x54>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01c      	beq.n	8003ba6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685c      	ldr	r4, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691e      	ldr	r6, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ffc6 	bl	8003b10 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	9302      	str	r3, [sp, #8]
 8003b90:	9201      	str	r2, [sp, #4]
 8003b92:	9000      	str	r0, [sp, #0]
 8003b94:	000b      	movs	r3, r1
 8003b96:	0032      	movs	r2, r6
 8003b98:	0029      	movs	r1, r5
 8003b9a:	0020      	movs	r0, r4
 8003b9c:	f000 fca6 	bl	80044ec <xTaskCreateStatic>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e01d      	b.n	8003be2 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685c      	ldr	r4, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bb2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7ff ffa8 	bl	8003b10 <makeFreeRtosPriority>
 8003bc0:	0001      	movs	r1, r0
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	230c      	movs	r3, #12
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	9100      	str	r1, [sp, #0]
 8003bcc:	0013      	movs	r3, r2
 8003bce:	0032      	movs	r2, r6
 8003bd0:	0029      	movs	r1, r5
 8003bd2:	0020      	movs	r0, r4
 8003bd4:	f000 fcd0 	bl	8004578 <xTaskCreate>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d001      	beq.n	8003be2 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b005      	add	sp, #20
 8003bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <osDelay+0x16>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	e000      	b.n	8003c04 <osDelay+0x18>
 8003c02:	2301      	movs	r3, #1
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 fde1 	bl	80047cc <vTaskDelay>
  
  return osOK;
 8003c0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b004      	add	sp, #16
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <osMessageCreate+0x36>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2400      	movs	r4, #0
 8003c40:	9400      	str	r4, [sp, #0]
 8003c42:	f000 f90d 	bl	8003e60 <xQueueGenericCreateStatic>
 8003c46:	0003      	movs	r3, r0
 8003c48:	e008      	b.n	8003c5c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	0019      	movs	r1, r3
 8003c56:	f000 f953 	bl	8003f00 <xQueueGenericCreate>
 8003c5a:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b003      	add	sp, #12
 8003c62:	bd90      	pop	{r4, r7, pc}

08003c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	001a      	movs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4252      	negs	r2, r2
 8003c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3308      	adds	r3, #8
 8003c82:	001a      	movs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b002      	add	sp, #8
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d103      	bne.n	8003d18 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	e00c      	b.n	8003d32 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e002      	b.n	8003d26 <vListInsert+0x2c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d2f6      	bcs.n	8003d20 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	601a      	str	r2, [r3, #0]
}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b004      	add	sp, #16
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6892      	ldr	r2, [r2, #8]
 8003d7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6852      	ldr	r2, [r2, #4]
 8003d86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d103      	bne.n	8003d9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	1e5a      	subs	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <xQueueGenericReset+0x1a>
 8003dca:	b672      	cpsid	i
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	e7fd      	b.n	8003dcc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003dd0:	f001 fa36 	bl	8005240 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	434b      	muls	r3, r1
 8003de2:	18d2      	adds	r2, r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	1e59      	subs	r1, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	434b      	muls	r3, r1
 8003e06:	18d2      	adds	r2, r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2244      	movs	r2, #68	@ 0x44
 8003e10:	21ff      	movs	r1, #255	@ 0xff
 8003e12:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2245      	movs	r2, #69	@ 0x45
 8003e18:	21ff      	movs	r1, #255	@ 0xff
 8003e1a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 ff00 	bl	8004c34 <xTaskRemoveFromEventList>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d00c      	beq.n	8003e52 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e38:	f001 f9f2 	bl	8005220 <vPortYield>
 8003e3c:	e009      	b.n	8003e52 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3310      	adds	r3, #16
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff ff0e 	bl	8003c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3324      	adds	r3, #36	@ 0x24
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff ff09 	bl	8003c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e52:	f001 fa07 	bl	8005264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b004      	add	sp, #16
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b089      	sub	sp, #36	@ 0x24
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <xQueueGenericCreateStatic+0x1a>
 8003e74:	b672      	cpsid	i
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	e7fd      	b.n	8003e76 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <xQueueGenericCreateStatic+0x26>
 8003e80:	b672      	cpsid	i
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	e7fd      	b.n	8003e82 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <xQueueGenericCreateStatic+0x32>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <xQueueGenericCreateStatic+0x36>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <xQueueGenericCreateStatic+0x38>
 8003e96:	2300      	movs	r3, #0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <xQueueGenericCreateStatic+0x42>
 8003e9c:	b672      	cpsid	i
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	e7fd      	b.n	8003e9e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <xQueueGenericCreateStatic+0x4e>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueGenericCreateStatic+0x52>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueGenericCreateStatic+0x54>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <xQueueGenericCreateStatic+0x5e>
 8003eb8:	b672      	cpsid	i
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	e7fd      	b.n	8003eba <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ebe:	2348      	movs	r3, #72	@ 0x48
 8003ec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b48      	cmp	r3, #72	@ 0x48
 8003ec6:	d002      	beq.n	8003ece <xQueueGenericCreateStatic+0x6e>
 8003ec8:	b672      	cpsid	i
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	e7fd      	b.n	8003eca <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2246      	movs	r2, #70	@ 0x46
 8003edc:	2101      	movs	r1, #1
 8003ede:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ee0:	2328      	movs	r3, #40	@ 0x28
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	781c      	ldrb	r4, [r3, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	0023      	movs	r3, r4
 8003ef2:	f000 f83c 	bl	8003f6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ef6:	697b      	ldr	r3, [r7, #20]
	}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b007      	add	sp, #28
 8003efe:	bd90      	pop	{r4, r7, pc}

08003f00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b08b      	sub	sp, #44	@ 0x2c
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	1dfb      	adds	r3, r7, #7
 8003f0c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <xQueueGenericCreate+0x1a>
 8003f14:	b672      	cpsid	i
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	e7fd      	b.n	8003f16 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e003      	b.n	8003f2e <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	4353      	muls	r3, r2
 8003f2c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3348      	adds	r3, #72	@ 0x48
 8003f32:	0018      	movs	r0, r3
 8003f34:	f001 fa1c 	bl	8005370 <pvPortMalloc>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d010      	beq.n	8003f64 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3348      	adds	r3, #72	@ 0x48
 8003f46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2246      	movs	r2, #70	@ 0x46
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f50:	1dfb      	adds	r3, r7, #7
 8003f52:	781c      	ldrb	r4, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	0023      	movs	r3, r4
 8003f60:	f000 f805 	bl	8003f6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f64:	69bb      	ldr	r3, [r7, #24]
	}
 8003f66:	0018      	movs	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b009      	add	sp, #36	@ 0x24
 8003f6c:	bd90      	pop	{r4, r7, pc}

08003f6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	1cfb      	adds	r3, r7, #3
 8003f7e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e002      	b.n	8003f94 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff ff06 	bl	8003db6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b08a      	sub	sp, #40	@ 0x28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <xQueueGenericSend+0x22>
 8003fce:	b672      	cpsid	i
 8003fd0:	46c0      	nop			@ (mov r8, r8)
 8003fd2:	e7fd      	b.n	8003fd0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSend+0x30>
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSend+0x34>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSend+0x36>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <xQueueGenericSend+0x40>
 8003fec:	b672      	cpsid	i
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	e7fd      	b.n	8003fee <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d103      	bne.n	8004000 <xQueueGenericSend+0x4e>
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <xQueueGenericSend+0x52>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <xQueueGenericSend+0x54>
 8004004:	2300      	movs	r3, #0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <xQueueGenericSend+0x5e>
 800400a:	b672      	cpsid	i
 800400c:	46c0      	nop			@ (mov r8, r8)
 800400e:	e7fd      	b.n	800400c <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004010:	f000 ffae 	bl	8004f70 <xTaskGetSchedulerState>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d102      	bne.n	800401e <xQueueGenericSend+0x6c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <xQueueGenericSend+0x70>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <xQueueGenericSend+0x72>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <xQueueGenericSend+0x7c>
 8004028:	b672      	cpsid	i
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	e7fd      	b.n	800402a <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800402e:	f001 f907 	bl	8005240 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <xQueueGenericSend+0x92>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d11e      	bne.n	8004082 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f931 	bl	80042b2 <prvCopyDataToQueue>
 8004050:	0003      	movs	r3, r0
 8004052:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	3324      	adds	r3, #36	@ 0x24
 8004060:	0018      	movs	r0, r3
 8004062:	f000 fde7 	bl	8004c34 <xTaskRemoveFromEventList>
 8004066:	1e03      	subs	r3, r0, #0
 8004068:	d007      	beq.n	800407a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800406a:	f001 f8d9 	bl	8005220 <vPortYield>
 800406e:	e004      	b.n	800407a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004076:	f001 f8d3 	bl	8005220 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800407a:	f001 f8f3 	bl	8005264 <vPortExitCritical>
				return pdPASS;
 800407e:	2301      	movs	r3, #1
 8004080:	e05b      	b.n	800413a <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d103      	bne.n	8004090 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004088:	f001 f8ec 	bl	8005264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800408c:	2300      	movs	r3, #0
 800408e:	e054      	b.n	800413a <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004096:	2314      	movs	r3, #20
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	0018      	movs	r0, r3
 800409c:	f000 fe28 	bl	8004cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040a4:	f001 f8de 	bl	8005264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040a8:	f000 fc04 	bl	80048b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ac:	f001 f8c8 	bl	8005240 <vPortEnterCritical>
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2244      	movs	r2, #68	@ 0x44
 80040b4:	5c9b      	ldrb	r3, [r3, r2]
 80040b6:	b25b      	sxtb	r3, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	d103      	bne.n	80040c4 <xQueueGenericSend+0x112>
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	2244      	movs	r2, #68	@ 0x44
 80040c0:	2100      	movs	r1, #0
 80040c2:	5499      	strb	r1, [r3, r2]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	2245      	movs	r2, #69	@ 0x45
 80040c8:	5c9b      	ldrb	r3, [r3, r2]
 80040ca:	b25b      	sxtb	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	d103      	bne.n	80040d8 <xQueueGenericSend+0x126>
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	2245      	movs	r2, #69	@ 0x45
 80040d4:	2100      	movs	r1, #0
 80040d6:	5499      	strb	r1, [r3, r2]
 80040d8:	f001 f8c4 	bl	8005264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040dc:	1d3a      	adds	r2, r7, #4
 80040de:	2314      	movs	r3, #20
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 fe17 	bl	8004d18 <xTaskCheckForTimeOut>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d11e      	bne.n	800412c <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 f9e3 	bl	80044bc <prvIsQueueFull>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d011      	beq.n	800411e <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	3310      	adds	r3, #16
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	0011      	movs	r1, r2
 8004102:	0018      	movs	r0, r3
 8004104:	f000 fd76 	bl	8004bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 f962 	bl	80043d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004110:	f000 fbdc 	bl	80048cc <xTaskResumeAll>
 8004114:	1e03      	subs	r3, r0, #0
 8004116:	d18a      	bne.n	800402e <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8004118:	f001 f882 	bl	8005220 <vPortYield>
 800411c:	e787      	b.n	800402e <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	0018      	movs	r0, r3
 8004122:	f000 f957 	bl	80043d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004126:	f000 fbd1 	bl	80048cc <xTaskResumeAll>
 800412a:	e780      	b.n	800402e <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f950 	bl	80043d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004134:	f000 fbca 	bl	80048cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004138:	2300      	movs	r3, #0
		}
	}
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b00a      	add	sp, #40	@ 0x28
 8004140:	bd80      	pop	{r7, pc}

08004142 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b08a      	sub	sp, #40	@ 0x28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <xQueueReceive+0x20>
 800415c:	b672      	cpsid	i
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	e7fd      	b.n	800415e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d103      	bne.n	8004170 <xQueueReceive+0x2e>
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <xQueueReceive+0x32>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <xQueueReceive+0x34>
 8004174:	2300      	movs	r3, #0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <xQueueReceive+0x3e>
 800417a:	b672      	cpsid	i
 800417c:	46c0      	nop			@ (mov r8, r8)
 800417e:	e7fd      	b.n	800417c <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004180:	f000 fef6 	bl	8004f70 <xTaskGetSchedulerState>
 8004184:	1e03      	subs	r3, r0, #0
 8004186:	d102      	bne.n	800418e <xQueueReceive+0x4c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <xQueueReceive+0x50>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueReceive+0x52>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <xQueueReceive+0x5c>
 8004198:	b672      	cpsid	i
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	e7fd      	b.n	800419a <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800419e:	f001 f84f 	bl	8005240 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	0011      	movs	r1, r2
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f8e7 	bl	8004388 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	1e5a      	subs	r2, r3, #1
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	3310      	adds	r3, #16
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 fd30 	bl	8004c34 <xTaskRemoveFromEventList>
 80041d4:	1e03      	subs	r3, r0, #0
 80041d6:	d001      	beq.n	80041dc <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041d8:	f001 f822 	bl	8005220 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041dc:	f001 f842 	bl	8005264 <vPortExitCritical>
				return pdPASS;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e062      	b.n	80042aa <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ea:	f001 f83b 	bl	8005264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e05b      	b.n	80042aa <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041f8:	2314      	movs	r3, #20
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 fd77 	bl	8004cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004206:	f001 f82d 	bl	8005264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800420a:	f000 fb53 	bl	80048b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800420e:	f001 f817 	bl	8005240 <vPortEnterCritical>
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	2244      	movs	r2, #68	@ 0x44
 8004216:	5c9b      	ldrb	r3, [r3, r2]
 8004218:	b25b      	sxtb	r3, r3
 800421a:	3301      	adds	r3, #1
 800421c:	d103      	bne.n	8004226 <xQueueReceive+0xe4>
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	2244      	movs	r2, #68	@ 0x44
 8004222:	2100      	movs	r1, #0
 8004224:	5499      	strb	r1, [r3, r2]
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	2245      	movs	r2, #69	@ 0x45
 800422a:	5c9b      	ldrb	r3, [r3, r2]
 800422c:	b25b      	sxtb	r3, r3
 800422e:	3301      	adds	r3, #1
 8004230:	d103      	bne.n	800423a <xQueueReceive+0xf8>
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	2245      	movs	r2, #69	@ 0x45
 8004236:	2100      	movs	r1, #0
 8004238:	5499      	strb	r1, [r3, r2]
 800423a:	f001 f813 	bl	8005264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800423e:	1d3a      	adds	r2, r7, #4
 8004240:	2314      	movs	r3, #20
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	0011      	movs	r1, r2
 8004246:	0018      	movs	r0, r3
 8004248:	f000 fd66 	bl	8004d18 <xTaskCheckForTimeOut>
 800424c:	1e03      	subs	r3, r0, #0
 800424e:	d11e      	bne.n	800428e <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	0018      	movs	r0, r3
 8004254:	f000 f91c 	bl	8004490 <prvIsQueueEmpty>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d011      	beq.n	8004280 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	3324      	adds	r3, #36	@ 0x24
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	0011      	movs	r1, r2
 8004264:	0018      	movs	r0, r3
 8004266:	f000 fcc5 	bl	8004bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	0018      	movs	r0, r3
 800426e:	f000 f8b1 	bl	80043d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004272:	f000 fb2b 	bl	80048cc <xTaskResumeAll>
 8004276:	1e03      	subs	r3, r0, #0
 8004278:	d191      	bne.n	800419e <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800427a:	f000 ffd1 	bl	8005220 <vPortYield>
 800427e:	e78e      	b.n	800419e <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 f8a6 	bl	80043d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004288:	f000 fb20 	bl	80048cc <xTaskResumeAll>
 800428c:	e787      	b.n	800419e <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 f89f 	bl	80043d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004296:	f000 fb19 	bl	80048cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	0018      	movs	r0, r3
 800429e:	f000 f8f7 	bl	8004490 <prvIsQueueEmpty>
 80042a2:	1e03      	subs	r3, r0, #0
 80042a4:	d100      	bne.n	80042a8 <xQueueReceive+0x166>
 80042a6:	e77a      	b.n	800419e <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b00a      	add	sp, #40	@ 0x28
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10e      	bne.n	80042ee <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d14e      	bne.n	8004376 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 fe63 	bl	8004fa8 <xTaskPriorityDisinherit>
 80042e2:	0003      	movs	r3, r0
 80042e4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	e043      	b.n	8004376 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d119      	bne.n	8004328 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6898      	ldr	r0, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	0019      	movs	r1, r3
 8004300:	f001 fb83 	bl	8005a0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	18d2      	adds	r2, r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d32b      	bcc.n	8004376 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	e026      	b.n	8004376 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68d8      	ldr	r0, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0019      	movs	r1, r3
 8004334:	f001 fb69 	bl	8005a0a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	425b      	negs	r3, r3
 8004342:	18d2      	adds	r2, r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d207      	bcs.n	8004364 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	425b      	negs	r3, r3
 800435e:	18d2      	adds	r2, r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d105      	bne.n	8004376 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3b01      	subs	r3, #1
 8004374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800437e:	697b      	ldr	r3, [r7, #20]
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b006      	add	sp, #24
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	18d2      	adds	r2, r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d303      	bcc.n	80043bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68d9      	ldr	r1, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f001 fb1f 	bl	8005a0a <memcpy>
	}
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043dc:	f000 ff30 	bl	8005240 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043e0:	230f      	movs	r3, #15
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	2145      	movs	r1, #69	@ 0x45
 80043e8:	5c52      	ldrb	r2, [r2, r1]
 80043ea:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043ec:	e013      	b.n	8004416 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3324      	adds	r3, #36	@ 0x24
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fc1a 	bl	8004c34 <xTaskRemoveFromEventList>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d001      	beq.n	8004408 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004404:	f000 fcda 	bl	8004dbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004408:	210f      	movs	r1, #15
 800440a:	187b      	adds	r3, r7, r1
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	3b01      	subs	r3, #1
 8004410:	b2da      	uxtb	r2, r3
 8004412:	187b      	adds	r3, r7, r1
 8004414:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	b25b      	sxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	dce5      	bgt.n	80043ee <prvUnlockQueue+0x1a>
 8004422:	e000      	b.n	8004426 <prvUnlockQueue+0x52>
					break;
 8004424:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2245      	movs	r2, #69	@ 0x45
 800442a:	21ff      	movs	r1, #255	@ 0xff
 800442c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800442e:	f000 ff19 	bl	8005264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004432:	f000 ff05 	bl	8005240 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004436:	230e      	movs	r3, #14
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	2144      	movs	r1, #68	@ 0x44
 800443e:	5c52      	ldrb	r2, [r2, r1]
 8004440:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004442:	e013      	b.n	800446c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d016      	beq.n	800447a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3310      	adds	r3, #16
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fbef 	bl	8004c34 <xTaskRemoveFromEventList>
 8004456:	1e03      	subs	r3, r0, #0
 8004458:	d001      	beq.n	800445e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800445a:	f000 fcaf 	bl	8004dbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800445e:	210e      	movs	r1, #14
 8004460:	187b      	adds	r3, r7, r1
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	3b01      	subs	r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	187b      	adds	r3, r7, r1
 800446a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800446c:	230e      	movs	r3, #14
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b25b      	sxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	dce5      	bgt.n	8004444 <prvUnlockQueue+0x70>
 8004478:	e000      	b.n	800447c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800447a:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2244      	movs	r2, #68	@ 0x44
 8004480:	21ff      	movs	r1, #255	@ 0xff
 8004482:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004484:	f000 feee 	bl	8005264 <vPortExitCritical>
}
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b004      	add	sp, #16
 800448e:	bd80      	pop	{r7, pc}

08004490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004498:	f000 fed2 	bl	8005240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e001      	b.n	80044ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ae:	f000 fed9 	bl	8005264 <vPortExitCritical>

	return xReturn;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b004      	add	sp, #16
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044c4:	f000 febc 	bl	8005240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d102      	bne.n	80044da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e001      	b.n	80044de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044de:	f000 fec1 	bl	8005264 <vPortExitCritical>

	return xReturn;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b004      	add	sp, #16
 80044ea:	bd80      	pop	{r7, pc}

080044ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b08d      	sub	sp, #52	@ 0x34
 80044f0:	af04      	add	r7, sp, #16
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <xTaskCreateStatic+0x1a>
 8004500:	b672      	cpsid	i
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	e7fd      	b.n	8004502 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <xTaskCreateStatic+0x26>
 800450c:	b672      	cpsid	i
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	e7fd      	b.n	800450e <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004512:	2354      	movs	r3, #84	@ 0x54
 8004514:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b54      	cmp	r3, #84	@ 0x54
 800451a:	d002      	beq.n	8004522 <xTaskCreateStatic+0x36>
 800451c:	b672      	cpsid	i
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	e7fd      	b.n	800451e <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <xTaskCreateStatic+0x7e>
 8004528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01d      	beq.n	800456a <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004530:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2251      	movs	r2, #81	@ 0x51
 800453c:	2102      	movs	r1, #2
 800453e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004540:	683c      	ldr	r4, [r7, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	2300      	movs	r3, #0
 800454a:	9303      	str	r3, [sp, #12]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	9302      	str	r3, [sp, #8]
 8004550:	2318      	movs	r3, #24
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	0023      	movs	r3, r4
 800455c:	f000 f858 	bl	8004610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	0018      	movs	r0, r3
 8004564:	f000 f8ce 	bl	8004704 <prvAddNewTaskToReadyList>
 8004568:	e001      	b.n	800456e <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800456e:	69bb      	ldr	r3, [r7, #24]
	}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b009      	add	sp, #36	@ 0x24
 8004576:	bd90      	pop	{r4, r7, pc}

08004578 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b08d      	sub	sp, #52	@ 0x34
 800457c:	af04      	add	r7, sp, #16
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	1dbb      	adds	r3, r7, #6
 8004586:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004588:	1dbb      	adds	r3, r7, #6
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	0018      	movs	r0, r3
 8004590:	f000 feee 	bl	8005370 <pvPortMalloc>
 8004594:	0003      	movs	r3, r0
 8004596:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800459e:	2054      	movs	r0, #84	@ 0x54
 80045a0:	f000 fee6 	bl	8005370 <pvPortMalloc>
 80045a4:	0003      	movs	r3, r0
 80045a6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80045b4:	e006      	b.n	80045c4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 ff81 	bl	80054c0 <vPortFree>
 80045be:	e001      	b.n	80045c4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01a      	beq.n	8004600 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2251      	movs	r2, #81	@ 0x51
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	683c      	ldr	r4, [r7, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	2300      	movs	r3, #0
 80045de:	9303      	str	r3, [sp, #12]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	0023      	movs	r3, r4
 80045ee:	f000 f80f 	bl	8004610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 f885 	bl	8004704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045fa:	2301      	movs	r3, #1
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e002      	b.n	8004606 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004600:	2301      	movs	r3, #1
 8004602:	425b      	negs	r3, r3
 8004604:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004606:	69bb      	ldr	r3, [r7, #24]
	}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b009      	add	sp, #36	@ 0x24
 800460e:	bd90      	pop	{r4, r7, pc}

08004610 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4936      	ldr	r1, [pc, #216]	@ (8004700 <prvInitialiseNewTask+0xf0>)
 8004626:	468c      	mov	ip, r1
 8004628:	4463      	add	r3, ip
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	18d3      	adds	r3, r2, r3
 800462e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2207      	movs	r2, #7
 8004634:	4393      	bics	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2207      	movs	r2, #7
 800463c:	4013      	ands	r3, r2
 800463e:	d002      	beq.n	8004646 <prvInitialiseNewTask+0x36>
 8004640:	b672      	cpsid	i
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	e7fd      	b.n	8004642 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e013      	b.n	8004674 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	18d3      	adds	r3, r2, r3
 8004652:	7818      	ldrb	r0, [r3, #0]
 8004654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004656:	2134      	movs	r1, #52	@ 0x34
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	18d3      	adds	r3, r2, r3
 800465c:	185b      	adds	r3, r3, r1
 800465e:	1c02      	adds	r2, r0, #0
 8004660:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	18d3      	adds	r3, r2, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3301      	adds	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d9e8      	bls.n	800464c <prvInitialiseNewTask+0x3c>
 800467a:	e000      	b.n	800467e <prvInitialiseNewTask+0x6e>
		{
			break;
 800467c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	2243      	movs	r2, #67	@ 0x43
 8004682:	2100      	movs	r1, #0
 8004684:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2b06      	cmp	r3, #6
 800468a:	d901      	bls.n	8004690 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800468c:	2306      	movs	r3, #6
 800468e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	6a3a      	ldr	r2, [r7, #32]
 800469a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	2200      	movs	r2, #0
 80046a0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	3304      	adds	r3, #4
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7ff fafa 	bl	8003ca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	3318      	adds	r3, #24
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff faf5 	bl	8003ca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2207      	movs	r2, #7
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	2200      	movs	r2, #0
 80046d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	2250      	movs	r2, #80	@ 0x50
 80046d6:	2100      	movs	r1, #0
 80046d8:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 fd13 	bl	800510c <pxPortInitialiseStack>
 80046e6:	0002      	movs	r2, r0
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <prvInitialiseNewTask+0xe8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b006      	add	sp, #24
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	3fffffff 	.word	0x3fffffff

08004704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800470c:	f000 fd98 	bl	8005240 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004710:	4b28      	ldr	r3, [pc, #160]	@ (80047b4 <prvAddNewTaskToReadyList+0xb0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <prvAddNewTaskToReadyList+0xb0>)
 8004718:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <prvAddNewTaskToReadyList+0xb4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004722:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <prvAddNewTaskToReadyList+0xb4>)
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004728:	4b22      	ldr	r3, [pc, #136]	@ (80047b4 <prvAddNewTaskToReadyList+0xb0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d110      	bne.n	8004752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004730:	f000 fb5e 	bl	8004df0 <prvInitialiseTaskLists>
 8004734:	e00d      	b.n	8004752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004736:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <prvAddNewTaskToReadyList+0xb8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800473e:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <prvAddNewTaskToReadyList+0xb4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	429a      	cmp	r2, r3
 800474a:	d802      	bhi.n	8004752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <prvAddNewTaskToReadyList+0xb4>)
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004752:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <prvAddNewTaskToReadyList+0xbc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	4b19      	ldr	r3, [pc, #100]	@ (80047c0 <prvAddNewTaskToReadyList+0xbc>)
 800475a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004760:	4b18      	ldr	r3, [pc, #96]	@ (80047c4 <prvAddNewTaskToReadyList+0xc0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d903      	bls.n	8004770 <prvAddNewTaskToReadyList+0x6c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476c:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <prvAddNewTaskToReadyList+0xc0>)
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004774:	0013      	movs	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	189b      	adds	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4a12      	ldr	r2, [pc, #72]	@ (80047c8 <prvAddNewTaskToReadyList+0xc4>)
 800477e:	189a      	adds	r2, r3, r2
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	0019      	movs	r1, r3
 8004786:	0010      	movs	r0, r2
 8004788:	f7ff fa95 	bl	8003cb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800478c:	f000 fd6a 	bl	8005264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004790:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <prvAddNewTaskToReadyList+0xb8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004798:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <prvAddNewTaskToReadyList+0xb4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d201      	bcs.n	80047aa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047a6:	f000 fd3b 	bl	8005220 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	2000052c 	.word	0x2000052c
 80047b8:	2000042c 	.word	0x2000042c
 80047bc:	20000538 	.word	0x20000538
 80047c0:	20000548 	.word	0x20000548
 80047c4:	20000534 	.word	0x20000534
 80047c8:	20000430 	.word	0x20000430

080047cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d011      	beq.n	8004802 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <vTaskDelay+0x48>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <vTaskDelay+0x20>
 80047e6:	b672      	cpsid	i
 80047e8:	46c0      	nop			@ (mov r8, r8)
 80047ea:	e7fd      	b.n	80047e8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80047ec:	f000 f862 	bl	80048b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2100      	movs	r1, #0
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 fc35 	bl	8005064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047fa:	f000 f867 	bl	80048cc <xTaskResumeAll>
 80047fe:	0003      	movs	r3, r0
 8004800:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8004808:	f000 fd0a 	bl	8005220 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800480c:	46c0      	nop			@ (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b004      	add	sp, #16
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000554 	.word	0x20000554

08004818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004826:	003a      	movs	r2, r7
 8004828:	1d39      	adds	r1, r7, #4
 800482a:	2308      	movs	r3, #8
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	0018      	movs	r0, r3
 8004830:	f7fb fd00 	bl	8000234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004834:	683c      	ldr	r4, [r7, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	4918      	ldr	r1, [pc, #96]	@ (800489c <vTaskStartScheduler+0x84>)
 800483c:	4818      	ldr	r0, [pc, #96]	@ (80048a0 <vTaskStartScheduler+0x88>)
 800483e:	9202      	str	r2, [sp, #8]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	2300      	movs	r3, #0
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	2300      	movs	r3, #0
 8004848:	0022      	movs	r2, r4
 800484a:	f7ff fe4f 	bl	80044ec <xTaskCreateStatic>
 800484e:	0002      	movs	r2, r0
 8004850:	4b14      	ldr	r3, [pc, #80]	@ (80048a4 <vTaskStartScheduler+0x8c>)
 8004852:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004854:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <vTaskStartScheduler+0x8c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800485c:	2301      	movs	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e001      	b.n	8004866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10d      	bne.n	8004888 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800486c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800486e:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <vTaskStartScheduler+0x90>)
 8004870:	2201      	movs	r2, #1
 8004872:	4252      	negs	r2, r2
 8004874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <vTaskStartScheduler+0x94>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <vTaskStartScheduler+0x98>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004882:	f000 fca9 	bl	80051d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004886:	e005      	b.n	8004894 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	d102      	bne.n	8004894 <vTaskStartScheduler+0x7c>
 800488e:	b672      	cpsid	i
 8004890:	46c0      	nop			@ (mov r8, r8)
 8004892:	e7fd      	b.n	8004890 <vTaskStartScheduler+0x78>
}
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b005      	add	sp, #20
 800489a:	bd90      	pop	{r4, r7, pc}
 800489c:	08006668 	.word	0x08006668
 80048a0:	08004dd1 	.word	0x08004dd1
 80048a4:	20000550 	.word	0x20000550
 80048a8:	2000054c 	.word	0x2000054c
 80048ac:	20000538 	.word	0x20000538
 80048b0:	20000530 	.word	0x20000530

080048b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048b8:	4b03      	ldr	r3, [pc, #12]	@ (80048c8 <vTaskSuspendAll+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	4b02      	ldr	r3, [pc, #8]	@ (80048c8 <vTaskSuspendAll+0x14>)
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000554 	.word	0x20000554

080048cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048da:	4b3a      	ldr	r3, [pc, #232]	@ (80049c4 <xTaskResumeAll+0xf8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <xTaskResumeAll+0x1c>
 80048e2:	b672      	cpsid	i
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	e7fd      	b.n	80048e4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048e8:	f000 fcaa 	bl	8005240 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048ec:	4b35      	ldr	r3, [pc, #212]	@ (80049c4 <xTaskResumeAll+0xf8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	1e5a      	subs	r2, r3, #1
 80048f2:	4b34      	ldr	r3, [pc, #208]	@ (80049c4 <xTaskResumeAll+0xf8>)
 80048f4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f6:	4b33      	ldr	r3, [pc, #204]	@ (80049c4 <xTaskResumeAll+0xf8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d15b      	bne.n	80049b6 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048fe:	4b32      	ldr	r3, [pc, #200]	@ (80049c8 <xTaskResumeAll+0xfc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d057      	beq.n	80049b6 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004906:	e02f      	b.n	8004968 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004908:	4b30      	ldr	r3, [pc, #192]	@ (80049cc <xTaskResumeAll+0x100>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3318      	adds	r3, #24
 8004914:	0018      	movs	r0, r3
 8004916:	f7ff fa26 	bl	8003d66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3304      	adds	r3, #4
 800491e:	0018      	movs	r0, r3
 8004920:	f7ff fa21 	bl	8003d66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004928:	4b29      	ldr	r3, [pc, #164]	@ (80049d0 <xTaskResumeAll+0x104>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d903      	bls.n	8004938 <xTaskResumeAll+0x6c>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	4b26      	ldr	r3, [pc, #152]	@ (80049d0 <xTaskResumeAll+0x104>)
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493c:	0013      	movs	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	189b      	adds	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4a23      	ldr	r2, [pc, #140]	@ (80049d4 <xTaskResumeAll+0x108>)
 8004946:	189a      	adds	r2, r3, r2
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3304      	adds	r3, #4
 800494c:	0019      	movs	r1, r3
 800494e:	0010      	movs	r0, r2
 8004950:	f7ff f9b1 	bl	8003cb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004958:	4b1f      	ldr	r3, [pc, #124]	@ (80049d8 <xTaskResumeAll+0x10c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8004962:	4b1e      	ldr	r3, [pc, #120]	@ (80049dc <xTaskResumeAll+0x110>)
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004968:	4b18      	ldr	r3, [pc, #96]	@ (80049cc <xTaskResumeAll+0x100>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1cb      	bne.n	8004908 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004976:	f000 fad7 	bl	8004f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800497a:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <xTaskResumeAll+0x114>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00f      	beq.n	80049a6 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004986:	f000 f82d 	bl	80049e4 <xTaskIncrementTick>
 800498a:	1e03      	subs	r3, r0, #0
 800498c:	d002      	beq.n	8004994 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800498e:	4b13      	ldr	r3, [pc, #76]	@ (80049dc <xTaskResumeAll+0x110>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3b01      	subs	r3, #1
 8004998:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f2      	bne.n	8004986 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <xTaskResumeAll+0x114>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <xTaskResumeAll+0x110>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049b2:	f000 fc35 	bl	8005220 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049b6:	f000 fc55 	bl	8005264 <vPortExitCritical>

	return xAlreadyYielded;
 80049ba:	68bb      	ldr	r3, [r7, #8]
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b004      	add	sp, #16
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20000554 	.word	0x20000554
 80049c8:	2000052c 	.word	0x2000052c
 80049cc:	200004ec 	.word	0x200004ec
 80049d0:	20000534 	.word	0x20000534
 80049d4:	20000430 	.word	0x20000430
 80049d8:	2000042c 	.word	0x2000042c
 80049dc:	20000540 	.word	0x20000540
 80049e0:	2000053c 	.word	0x2000053c

080049e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004b24 <xTaskIncrementTick+0x140>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d000      	beq.n	80049f8 <xTaskIncrementTick+0x14>
 80049f6:	e084      	b.n	8004b02 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004b28 <xTaskIncrementTick+0x144>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a00:	4b49      	ldr	r3, [pc, #292]	@ (8004b28 <xTaskIncrementTick+0x144>)
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d118      	bne.n	8004a3e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a0c:	4b47      	ldr	r3, [pc, #284]	@ (8004b2c <xTaskIncrementTick+0x148>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <xTaskIncrementTick+0x38>
 8004a16:	b672      	cpsid	i
 8004a18:	46c0      	nop			@ (mov r8, r8)
 8004a1a:	e7fd      	b.n	8004a18 <xTaskIncrementTick+0x34>
 8004a1c:	4b43      	ldr	r3, [pc, #268]	@ (8004b2c <xTaskIncrementTick+0x148>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b43      	ldr	r3, [pc, #268]	@ (8004b30 <xTaskIncrementTick+0x14c>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b41      	ldr	r3, [pc, #260]	@ (8004b2c <xTaskIncrementTick+0x148>)
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	4b41      	ldr	r3, [pc, #260]	@ (8004b30 <xTaskIncrementTick+0x14c>)
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	4b40      	ldr	r3, [pc, #256]	@ (8004b34 <xTaskIncrementTick+0x150>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	4b3f      	ldr	r3, [pc, #252]	@ (8004b34 <xTaskIncrementTick+0x150>)
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f000 fa75 	bl	8004f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b38 <xTaskIncrementTick+0x154>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d34e      	bcc.n	8004ae6 <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a48:	4b38      	ldr	r3, [pc, #224]	@ (8004b2c <xTaskIncrementTick+0x148>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <xTaskIncrementTick+0x72>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xTaskIncrementTick+0x74>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5c:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <xTaskIncrementTick+0x154>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4252      	negs	r2, r2
 8004a62:	601a      	str	r2, [r3, #0]
					break;
 8004a64:	e03f      	b.n	8004ae6 <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a66:	4b31      	ldr	r3, [pc, #196]	@ (8004b2c <xTaskIncrementTick+0x148>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d203      	bcs.n	8004a86 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b38 <xTaskIncrementTick+0x154>)
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
						break;
 8004a84:	e02f      	b.n	8004ae6 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f7ff f96b 	bl	8003d66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7ff f962 	bl	8003d66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa6:	4b25      	ldr	r3, [pc, #148]	@ (8004b3c <xTaskIncrementTick+0x158>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d903      	bls.n	8004ab6 <xTaskIncrementTick+0xd2>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab2:	4b22      	ldr	r3, [pc, #136]	@ (8004b3c <xTaskIncrementTick+0x158>)
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aba:	0013      	movs	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <xTaskIncrementTick+0x15c>)
 8004ac4:	189a      	adds	r2, r3, r2
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	0019      	movs	r1, r3
 8004acc:	0010      	movs	r0, r2
 8004ace:	f7ff f8f2 	bl	8003cb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b44 <xTaskIncrementTick+0x160>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3b3      	bcc.n	8004a48 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ae4:	e7b0      	b.n	8004a48 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ae6:	4b17      	ldr	r3, [pc, #92]	@ (8004b44 <xTaskIncrementTick+0x160>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aec:	4914      	ldr	r1, [pc, #80]	@ (8004b40 <xTaskIncrementTick+0x15c>)
 8004aee:	0013      	movs	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	189b      	adds	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	585b      	ldr	r3, [r3, r1]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d907      	bls.n	8004b0c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e004      	b.n	8004b0c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <xTaskIncrementTick+0x164>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <xTaskIncrementTick+0x164>)
 8004b0a:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <xTaskIncrementTick+0x168>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b18:	697b      	ldr	r3, [r7, #20]
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b006      	add	sp, #24
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	20000554 	.word	0x20000554
 8004b28:	20000530 	.word	0x20000530
 8004b2c:	200004e4 	.word	0x200004e4
 8004b30:	200004e8 	.word	0x200004e8
 8004b34:	20000544 	.word	0x20000544
 8004b38:	2000054c 	.word	0x2000054c
 8004b3c:	20000534 	.word	0x20000534
 8004b40:	20000430 	.word	0x20000430
 8004b44:	2000042c 	.word	0x2000042c
 8004b48:	2000053c 	.word	0x2000053c
 8004b4c:	20000540 	.word	0x20000540

08004b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b56:	4b22      	ldr	r3, [pc, #136]	@ (8004be0 <vTaskSwitchContext+0x90>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b5e:	4b21      	ldr	r3, [pc, #132]	@ (8004be4 <vTaskSwitchContext+0x94>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b64:	e038      	b.n	8004bd8 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8004b66:	4b1f      	ldr	r3, [pc, #124]	@ (8004be4 <vTaskSwitchContext+0x94>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004be8 <vTaskSwitchContext+0x98>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	e008      	b.n	8004b86 <vTaskSwitchContext+0x36>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <vTaskSwitchContext+0x30>
 8004b7a:	b672      	cpsid	i
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	e7fd      	b.n	8004b7c <vTaskSwitchContext+0x2c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	4919      	ldr	r1, [pc, #100]	@ (8004bec <vTaskSwitchContext+0x9c>)
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	0013      	movs	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	585b      	ldr	r3, [r3, r1]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ed      	beq.n	8004b74 <vTaskSwitchContext+0x24>
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	0013      	movs	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4a12      	ldr	r2, [pc, #72]	@ (8004bec <vTaskSwitchContext+0x9c>)
 8004ba4:	189b      	adds	r3, r3, r2
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d104      	bne.n	8004bc8 <vTaskSwitchContext+0x78>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <vTaskSwitchContext+0xa0>)
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <vTaskSwitchContext+0x98>)
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
}
 8004bd8:	46c0      	nop			@ (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000554 	.word	0x20000554
 8004be4:	20000540 	.word	0x20000540
 8004be8:	20000534 	.word	0x20000534
 8004bec:	20000430 	.word	0x20000430
 8004bf0:	2000042c 	.word	0x2000042c

08004bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <vTaskPlaceOnEventList+0x16>
 8004c04:	b672      	cpsid	i
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	e7fd      	b.n	8004c06 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c0a:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <vTaskPlaceOnEventList+0x3c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3318      	adds	r3, #24
 8004c10:	001a      	movs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0011      	movs	r1, r2
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7ff f86f 	bl	8003cfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2101      	movs	r1, #1
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 fa1f 	bl	8005064 <prvAddCurrentTaskToDelayedList>
}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b002      	add	sp, #8
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	2000042c 	.word	0x2000042c

08004c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <xTaskRemoveFromEventList+0x1c>
 8004c4a:	b672      	cpsid	i
 8004c4c:	46c0      	nop			@ (mov r8, r8)
 8004c4e:	e7fd      	b.n	8004c4c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	3318      	adds	r3, #24
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff f886 	bl	8003d66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd8 <xTaskRemoveFromEventList+0xa4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11d      	bne.n	8004c9e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3304      	adds	r3, #4
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7ff f87d 	bl	8003d66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	4b1a      	ldr	r3, [pc, #104]	@ (8004cdc <xTaskRemoveFromEventList+0xa8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d903      	bls.n	8004c80 <xTaskRemoveFromEventList+0x4c>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7c:	4b17      	ldr	r3, [pc, #92]	@ (8004cdc <xTaskRemoveFromEventList+0xa8>)
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c84:	0013      	movs	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	189b      	adds	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ce0 <xTaskRemoveFromEventList+0xac>)
 8004c8e:	189a      	adds	r2, r3, r2
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	3304      	adds	r3, #4
 8004c94:	0019      	movs	r1, r3
 8004c96:	0010      	movs	r0, r2
 8004c98:	f7ff f80d 	bl	8003cb6 <vListInsertEnd>
 8004c9c:	e007      	b.n	8004cae <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3318      	adds	r3, #24
 8004ca2:	001a      	movs	r2, r3
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce4 <xTaskRemoveFromEventList+0xb0>)
 8004ca6:	0011      	movs	r1, r2
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7ff f804 	bl	8003cb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce8 <xTaskRemoveFromEventList+0xb4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d905      	bls.n	8004cc8 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cec <xTaskRemoveFromEventList+0xb8>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e001      	b.n	8004ccc <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b004      	add	sp, #16
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	20000554 	.word	0x20000554
 8004cdc:	20000534 	.word	0x20000534
 8004ce0:	20000430 	.word	0x20000430
 8004ce4:	200004ec 	.word	0x200004ec
 8004ce8:	2000042c 	.word	0x2000042c
 8004cec:	20000540 	.word	0x20000540

08004cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <vTaskInternalSetTimeOutState+0x20>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <vTaskInternalSetTimeOutState+0x24>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	605a      	str	r2, [r3, #4]
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b002      	add	sp, #8
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000544 	.word	0x20000544
 8004d14:	20000530 	.word	0x20000530

08004d18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <xTaskCheckForTimeOut+0x16>
 8004d28:	b672      	cpsid	i
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	e7fd      	b.n	8004d2a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <xTaskCheckForTimeOut+0x22>
 8004d34:	b672      	cpsid	i
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	e7fd      	b.n	8004d36 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8004d3a:	f000 fa81 	bl	8005240 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004db4 <xTaskCheckForTimeOut+0x9c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	d102      	bne.n	8004d5c <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e024      	b.n	8004da6 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <xTaskCheckForTimeOut+0xa0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d007      	beq.n	8004d78 <xTaskCheckForTimeOut+0x60>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e016      	b.n	8004da6 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d20c      	bcs.n	8004d9c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad2      	subs	r2, r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff ffad 	bl	8004cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e004      	b.n	8004da6 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004da2:	2301      	movs	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004da6:	f000 fa5d 	bl	8005264 <vPortExitCritical>

	return xReturn;
 8004daa:	697b      	ldr	r3, [r7, #20]
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b006      	add	sp, #24
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000530 	.word	0x20000530
 8004db8:	20000544 	.word	0x20000544

08004dbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dc0:	4b02      	ldr	r3, [pc, #8]	@ (8004dcc <vTaskMissedYield+0x10>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000540 	.word	0x20000540

08004dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dd8:	f000 f84e 	bl	8004e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <prvIdleTask+0x1c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d9f9      	bls.n	8004dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004de4:	f000 fa1c 	bl	8005220 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004de8:	e7f6      	b.n	8004dd8 <prvIdleTask+0x8>
 8004dea:	46c0      	nop			@ (mov r8, r8)
 8004dec:	20000430 	.word	0x20000430

08004df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	e00c      	b.n	8004e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	0013      	movs	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e08:	189b      	adds	r3, r3, r2
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7fe ff2a 	bl	8003c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d9ef      	bls.n	8004dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e5c <prvInitialiseTaskLists+0x6c>)
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f7fe ff20 	bl	8003c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e24:	4b0e      	ldr	r3, [pc, #56]	@ (8004e60 <prvInitialiseTaskLists+0x70>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f7fe ff1c 	bl	8003c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <prvInitialiseTaskLists+0x74>)
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7fe ff18 	bl	8003c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e34:	4b0c      	ldr	r3, [pc, #48]	@ (8004e68 <prvInitialiseTaskLists+0x78>)
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7fe ff14 	bl	8003c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <prvInitialiseTaskLists+0x7c>)
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7fe ff10 	bl	8003c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <prvInitialiseTaskLists+0x80>)
 8004e46:	4a05      	ldr	r2, [pc, #20]	@ (8004e5c <prvInitialiseTaskLists+0x6c>)
 8004e48:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <prvInitialiseTaskLists+0x84>)
 8004e4c:	4a04      	ldr	r2, [pc, #16]	@ (8004e60 <prvInitialiseTaskLists+0x70>)
 8004e4e:	601a      	str	r2, [r3, #0]
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000430 	.word	0x20000430
 8004e5c:	200004bc 	.word	0x200004bc
 8004e60:	200004d0 	.word	0x200004d0
 8004e64:	200004ec 	.word	0x200004ec
 8004e68:	20000500 	.word	0x20000500
 8004e6c:	20000518 	.word	0x20000518
 8004e70:	200004e4 	.word	0x200004e4
 8004e74:	200004e8 	.word	0x200004e8

08004e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e7e:	e01a      	b.n	8004eb6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004e80:	f000 f9de 	bl	8005240 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e84:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <prvCheckTasksWaitingTermination+0x50>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fe ff68 	bl	8003d66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ecc <prvCheckTasksWaitingTermination+0x54>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	1e5a      	subs	r2, r3, #1
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <prvCheckTasksWaitingTermination+0x54>)
 8004e9e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <prvCheckTasksWaitingTermination+0x58>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1e5a      	subs	r2, r3, #1
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed0 <prvCheckTasksWaitingTermination+0x58>)
 8004ea8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004eaa:	f000 f9db 	bl	8005264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f000 f80f 	bl	8004ed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb6:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e0      	bne.n	8004e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000500 	.word	0x20000500
 8004ecc:	2000052c 	.word	0x2000052c
 8004ed0:	20000514 	.word	0x20000514

08004ed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2251      	movs	r2, #81	@ 0x51
 8004ee0:	5c9b      	ldrb	r3, [r3, r2]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 fae8 	bl	80054c0 <vPortFree>
				vPortFree( pxTCB );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 fae4 	bl	80054c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ef8:	e011      	b.n	8004f1e <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2251      	movs	r2, #81	@ 0x51
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d104      	bne.n	8004f0e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	0018      	movs	r0, r3
 8004f08:	f000 fada 	bl	80054c0 <vPortFree>
	}
 8004f0c:	e007      	b.n	8004f1e <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2251      	movs	r2, #81	@ 0x51
 8004f12:	5c9b      	ldrb	r3, [r3, r2]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d002      	beq.n	8004f1e <prvDeleteTCB+0x4a>
 8004f18:	b672      	cpsid	i
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	e7fd      	b.n	8004f1a <prvDeleteTCB+0x46>
	}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b002      	add	sp, #8
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <prvResetNextTaskUnblockTime+0x40>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <prvResetNextTaskUnblockTime+0x14>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <prvResetNextTaskUnblockTime+0x16>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f42:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <prvResetNextTaskUnblockTime+0x44>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	4252      	negs	r2, r2
 8004f48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f4a:	e008      	b.n	8004f5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f4c:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <prvResetNextTaskUnblockTime+0x40>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	4b04      	ldr	r3, [pc, #16]	@ (8004f6c <prvResetNextTaskUnblockTime+0x44>)
 8004f5c:	601a      	str	r2, [r3, #0]
}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	200004e4 	.word	0x200004e4
 8004f6c:	2000054c 	.word	0x2000054c

08004f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f76:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <xTaskGetSchedulerState+0x30>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	e008      	b.n	8004f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f84:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <xTaskGetSchedulerState+0x34>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	e001      	b.n	8004f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f92:	2300      	movs	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f96:	687b      	ldr	r3, [r7, #4]
	}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000538 	.word	0x20000538
 8004fa4:	20000554 	.word	0x20000554

08004fa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d046      	beq.n	800504c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fbe:	4b26      	ldr	r3, [pc, #152]	@ (8005058 <xTaskPriorityDisinherit+0xb0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d002      	beq.n	8004fce <xTaskPriorityDisinherit+0x26>
 8004fc8:	b672      	cpsid	i
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	e7fd      	b.n	8004fca <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <xTaskPriorityDisinherit+0x34>
 8004fd6:	b672      	cpsid	i
 8004fd8:	46c0      	nop			@ (mov r8, r8)
 8004fda:	e7fd      	b.n	8004fd8 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d02c      	beq.n	800504c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d128      	bne.n	800504c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	0018      	movs	r0, r3
 8005000:	f7fe feb1 	bl	8003d66 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	2207      	movs	r2, #7
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501c:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <xTaskPriorityDisinherit+0xb4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d903      	bls.n	800502c <xTaskPriorityDisinherit+0x84>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	4b0c      	ldr	r3, [pc, #48]	@ (800505c <xTaskPriorityDisinherit+0xb4>)
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005030:	0013      	movs	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	189b      	adds	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <xTaskPriorityDisinherit+0xb8>)
 800503a:	189a      	adds	r2, r3, r2
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	3304      	adds	r3, #4
 8005040:	0019      	movs	r1, r3
 8005042:	0010      	movs	r0, r2
 8005044:	f7fe fe37 	bl	8003cb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800504c:	68fb      	ldr	r3, [r7, #12]
	}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b004      	add	sp, #16
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	2000042c 	.word	0x2000042c
 800505c:	20000534 	.word	0x20000534
 8005060:	20000430 	.word	0x20000430

08005064 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800506e:	4b21      	ldr	r3, [pc, #132]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	0018      	movs	r0, r3
 800507c:	f7fe fe73 	bl	8003d66 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3301      	adds	r3, #1
 8005084:	d10b      	bne.n	800509e <prvAddCurrentTaskToDelayedList+0x3a>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800508c:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	4b1a      	ldr	r3, [pc, #104]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x98>)
 8005094:	0011      	movs	r1, r2
 8005096:	0018      	movs	r0, r3
 8005098:	f7fe fe0d 	bl	8003cb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800509c:	e026      	b.n	80050ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050a6:	4b14      	ldr	r3, [pc, #80]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d209      	bcs.n	80050ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b0f      	ldr	r3, [pc, #60]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3304      	adds	r3, #4
 80050c0:	0019      	movs	r1, r3
 80050c2:	0010      	movs	r0, r2
 80050c4:	f7fe fe19 	bl	8003cfa <vListInsert>
}
 80050c8:	e010      	b.n	80050ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005104 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3304      	adds	r3, #4
 80050d4:	0019      	movs	r1, r3
 80050d6:	0010      	movs	r0, r2
 80050d8:	f7fe fe0f 	bl	8003cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d202      	bcs.n	80050ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050e6:	4b08      	ldr	r3, [pc, #32]	@ (8005108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b004      	add	sp, #16
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000530 	.word	0x20000530
 80050f8:	2000042c 	.word	0x2000042c
 80050fc:	20000518 	.word	0x20000518
 8005100:	200004e8 	.word	0x200004e8
 8005104:	200004e4 	.word	0x200004e4
 8005108:	2000054c 	.word	0x2000054c

0800510c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3b04      	subs	r3, #4
 800511c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2280      	movs	r2, #128	@ 0x80
 8005122:	0452      	lsls	r2, r2, #17
 8005124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3b04      	subs	r3, #4
 800512a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3b04      	subs	r3, #4
 8005136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005138:	4a08      	ldr	r2, [pc, #32]	@ (800515c <pxPortInitialiseStack+0x50>)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3b14      	subs	r3, #20
 8005142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b20      	subs	r3, #32
 800514e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	0018      	movs	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	b004      	add	sp, #16
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	08005161 	.word	0x08005161

08005160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005166:	2300      	movs	r3, #0
 8005168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800516a:	4b08      	ldr	r3, [pc, #32]	@ (800518c <prvTaskExitError+0x2c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3301      	adds	r3, #1
 8005170:	d002      	beq.n	8005178 <prvTaskExitError+0x18>
 8005172:	b672      	cpsid	i
 8005174:	46c0      	nop			@ (mov r8, r8)
 8005176:	e7fd      	b.n	8005174 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005178:	b672      	cpsid	i
	while( ulDummy == 0 )
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0fc      	beq.n	800517c <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005182:	46c0      	nop			@ (mov r8, r8)
 8005184:	46c0      	nop			@ (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}
 800518c:	2000001c 	.word	0x2000001c

08005190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005194:	46c0      	nop			@ (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	0000      	movs	r0, r0
 800519c:	0000      	movs	r0, r0
	...

080051a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80051a0:	4a0b      	ldr	r2, [pc, #44]	@ (80051d0 <pxCurrentTCBConst2>)
 80051a2:	6813      	ldr	r3, [r2, #0]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	3020      	adds	r0, #32
 80051a8:	f380 8809 	msr	PSP, r0
 80051ac:	2002      	movs	r0, #2
 80051ae:	f380 8814 	msr	CONTROL, r0
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80051b8:	46ae      	mov	lr, r5
 80051ba:	bc08      	pop	{r3}
 80051bc:	bc04      	pop	{r2}
 80051be:	b662      	cpsie	i
 80051c0:	4718      	bx	r3
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	46c0      	nop			@ (mov r8, r8)

080051d0 <pxCurrentTCBConst2>:
 80051d0:	2000042c 	.word	0x2000042c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80051d4:	46c0      	nop			@ (mov r8, r8)
 80051d6:	46c0      	nop			@ (mov r8, r8)

080051d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80051dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <xPortStartScheduler+0x40>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <xPortStartScheduler+0x40>)
 80051e2:	21ff      	movs	r1, #255	@ 0xff
 80051e4:	0409      	lsls	r1, r1, #16
 80051e6:	430a      	orrs	r2, r1
 80051e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80051ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <xPortStartScheduler+0x40>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <xPortStartScheduler+0x40>)
 80051f0:	21ff      	movs	r1, #255	@ 0xff
 80051f2:	0609      	lsls	r1, r1, #24
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80051f8:	f000 f898 	bl	800532c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fc:	4b07      	ldr	r3, [pc, #28]	@ (800521c <xPortStartScheduler+0x44>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005202:	f7ff ffcd 	bl	80051a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005206:	f7ff fca3 	bl	8004b50 <vTaskSwitchContext>
	prvTaskExitError();
 800520a:	f7ff ffa9 	bl	8005160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	e000ed20 	.word	0xe000ed20
 800521c:	2000001c 	.word	0x2000001c

08005220 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <vPortYield+0x1c>)
 8005226:	2280      	movs	r2, #128	@ 0x80
 8005228:	0552      	lsls	r2, r2, #21
 800522a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800522c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005230:	f3bf 8f6f 	isb	sy
}
 8005234:	46c0      	nop			@ (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005244:	b672      	cpsid	i
    uxCriticalNesting++;
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <vPortEnterCritical+0x20>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <vPortEnterCritical+0x20>)
 800524e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005250:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005254:	f3bf 8f6f 	isb	sy
}
 8005258:	46c0      	nop			@ (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			@ (mov r8, r8)
 8005260:	2000001c 	.word	0x2000001c

08005264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005268:	4b09      	ldr	r3, [pc, #36]	@ (8005290 <vPortExitCritical+0x2c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <vPortExitCritical+0x12>
 8005270:	b672      	cpsid	i
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	e7fd      	b.n	8005272 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <vPortExitCritical+0x2c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	1e5a      	subs	r2, r3, #1
 800527c:	4b04      	ldr	r3, [pc, #16]	@ (8005290 <vPortExitCritical+0x2c>)
 800527e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005280:	4b03      	ldr	r3, [pc, #12]	@ (8005290 <vPortExitCritical+0x2c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d100      	bne.n	800528a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8005288:	b662      	cpsie	i
    }
}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	2000001c 	.word	0x2000001c

08005294 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005294:	f3ef 8010 	mrs	r0, PRIMASK
 8005298:	b672      	cpsid	i
 800529a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	0018      	movs	r0, r3

080052a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80052a0:	f380 8810 	msr	PRIMASK, r0
 80052a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80052a6:	46c0      	nop			@ (mov r8, r8)
	...

080052b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052b0:	f3ef 8009 	mrs	r0, PSP
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <pxCurrentTCBConst>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	3820      	subs	r0, #32
 80052ba:	6010      	str	r0, [r2, #0]
 80052bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80052be:	4644      	mov	r4, r8
 80052c0:	464d      	mov	r5, r9
 80052c2:	4656      	mov	r6, sl
 80052c4:	465f      	mov	r7, fp
 80052c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80052c8:	b508      	push	{r3, lr}
 80052ca:	b672      	cpsid	i
 80052cc:	f7ff fc40 	bl	8004b50 <vTaskSwitchContext>
 80052d0:	b662      	cpsie	i
 80052d2:	bc0c      	pop	{r2, r3}
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	6808      	ldr	r0, [r1, #0]
 80052d8:	3010      	adds	r0, #16
 80052da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052dc:	46a0      	mov	r8, r4
 80052de:	46a9      	mov	r9, r5
 80052e0:	46b2      	mov	sl, r6
 80052e2:	46bb      	mov	fp, r7
 80052e4:	f380 8809 	msr	PSP, r0
 80052e8:	3820      	subs	r0, #32
 80052ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052ec:	4718      	bx	r3
 80052ee:	46c0      	nop			@ (mov r8, r8)

080052f0 <pxCurrentTCBConst>:
 80052f0:	2000042c 	.word	0x2000042c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80052f4:	46c0      	nop			@ (mov r8, r8)
 80052f6:	46c0      	nop			@ (mov r8, r8)

080052f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80052fe:	f7ff ffc9 	bl	8005294 <ulSetInterruptMaskFromISR>
 8005302:	0003      	movs	r3, r0
 8005304:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005306:	f7ff fb6d 	bl	80049e4 <xTaskIncrementTick>
 800530a:	1e03      	subs	r3, r0, #0
 800530c:	d003      	beq.n	8005316 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800530e:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <SysTick_Handler+0x30>)
 8005310:	2280      	movs	r2, #128	@ 0x80
 8005312:	0552      	lsls	r2, r2, #21
 8005314:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	0018      	movs	r0, r3
 800531a:	f7ff ffc1 	bl	80052a0 <vClearInterruptMaskFromISR>
}
 800531e:	46c0      	nop			@ (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b002      	add	sp, #8
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <prvSetupTimerInterrupt+0x34>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <prvSetupTimerInterrupt+0x38>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <prvSetupTimerInterrupt+0x3c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	22fa      	movs	r2, #250	@ 0xfa
 8005342:	0091      	lsls	r1, r2, #2
 8005344:	0018      	movs	r0, r3
 8005346:	f7fa fee9 	bl	800011c <__udivsi3>
 800534a:	0003      	movs	r3, r0
 800534c:	001a      	movs	r2, r3
 800534e:	4b07      	ldr	r3, [pc, #28]	@ (800536c <prvSetupTimerInterrupt+0x40>)
 8005350:	3a01      	subs	r2, #1
 8005352:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005354:	4b02      	ldr	r3, [pc, #8]	@ (8005360 <prvSetupTimerInterrupt+0x34>)
 8005356:	2207      	movs	r2, #7
 8005358:	601a      	str	r2, [r3, #0]
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	e000e010 	.word	0xe000e010
 8005364:	e000e018 	.word	0xe000e018
 8005368:	20000010 	.word	0x20000010
 800536c:	e000e014 	.word	0xe000e014

08005370 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800537c:	f7ff fa9a 	bl	80048b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005380:	4b4a      	ldr	r3, [pc, #296]	@ (80054ac <pvPortMalloc+0x13c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005388:	f000 f8e4 	bl	8005554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800538c:	4b48      	ldr	r3, [pc, #288]	@ (80054b0 <pvPortMalloc+0x140>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4013      	ands	r3, r2
 8005394:	d000      	beq.n	8005398 <pvPortMalloc+0x28>
 8005396:	e07b      	b.n	8005490 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d013      	beq.n	80053c6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800539e:	2208      	movs	r2, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2207      	movs	r2, #7
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2207      	movs	r2, #7
 80053b2:	4393      	bics	r3, r2
 80053b4:	3308      	adds	r3, #8
 80053b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2207      	movs	r2, #7
 80053bc:	4013      	ands	r3, r2
 80053be:	d002      	beq.n	80053c6 <pvPortMalloc+0x56>
 80053c0:	b672      	cpsid	i
 80053c2:	46c0      	nop			@ (mov r8, r8)
 80053c4:	e7fd      	b.n	80053c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d061      	beq.n	8005490 <pvPortMalloc+0x120>
 80053cc:	4b39      	ldr	r3, [pc, #228]	@ (80054b4 <pvPortMalloc+0x144>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d85c      	bhi.n	8005490 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053d6:	4b38      	ldr	r3, [pc, #224]	@ (80054b8 <pvPortMalloc+0x148>)
 80053d8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80053da:	4b37      	ldr	r3, [pc, #220]	@ (80054b8 <pvPortMalloc+0x148>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053e0:	e004      	b.n	80053ec <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d903      	bls.n	80053fe <pvPortMalloc+0x8e>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f1      	bne.n	80053e2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053fe:	4b2b      	ldr	r3, [pc, #172]	@ (80054ac <pvPortMalloc+0x13c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	429a      	cmp	r2, r3
 8005406:	d043      	beq.n	8005490 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2208      	movs	r2, #8
 800540e:	189b      	adds	r3, r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	2308      	movs	r3, #8
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	429a      	cmp	r2, r3
 8005428:	d917      	bls.n	800545a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	18d3      	adds	r3, r2, r3
 8005430:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2207      	movs	r2, #7
 8005436:	4013      	ands	r3, r2
 8005438:	d002      	beq.n	8005440 <pvPortMalloc+0xd0>
 800543a:	b672      	cpsid	i
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	e7fd      	b.n	800543c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f8dd 	bl	8005614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800545a:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <pvPortMalloc+0x144>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	1ad2      	subs	r2, r2, r3
 8005464:	4b13      	ldr	r3, [pc, #76]	@ (80054b4 <pvPortMalloc+0x144>)
 8005466:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005468:	4b12      	ldr	r3, [pc, #72]	@ (80054b4 <pvPortMalloc+0x144>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <pvPortMalloc+0x14c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d203      	bcs.n	800547c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005474:	4b0f      	ldr	r3, [pc, #60]	@ (80054b4 <pvPortMalloc+0x144>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <pvPortMalloc+0x14c>)
 800547a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <pvPortMalloc+0x140>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	431a      	orrs	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005490:	f7ff fa1c 	bl	80048cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2207      	movs	r2, #7
 8005498:	4013      	ands	r3, r2
 800549a:	d002      	beq.n	80054a2 <pvPortMalloc+0x132>
 800549c:	b672      	cpsid	i
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	e7fd      	b.n	800549e <pvPortMalloc+0x12e>
	return pvReturn;
 80054a2:	68fb      	ldr	r3, [r7, #12]
}
 80054a4:	0018      	movs	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b006      	add	sp, #24
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20001160 	.word	0x20001160
 80054b0:	2000116c 	.word	0x2000116c
 80054b4:	20001164 	.word	0x20001164
 80054b8:	20001158 	.word	0x20001158
 80054bc:	20001168 	.word	0x20001168

080054c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d037      	beq.n	8005542 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054d2:	2308      	movs	r3, #8
 80054d4:	425b      	negs	r3, r3
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	18d3      	adds	r3, r2, r3
 80054da:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	4b19      	ldr	r3, [pc, #100]	@ (800554c <vPortFree+0x8c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4013      	ands	r3, r2
 80054ea:	d102      	bne.n	80054f2 <vPortFree+0x32>
 80054ec:	b672      	cpsid	i
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	e7fd      	b.n	80054ee <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <vPortFree+0x40>
 80054fa:	b672      	cpsid	i
 80054fc:	46c0      	nop			@ (mov r8, r8)
 80054fe:	e7fd      	b.n	80054fc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4b11      	ldr	r3, [pc, #68]	@ (800554c <vPortFree+0x8c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4013      	ands	r3, r2
 800550a:	d01a      	beq.n	8005542 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d116      	bne.n	8005542 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <vPortFree+0x8c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005524:	f7ff f9c6 	bl	80048b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <vPortFree+0x90>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	18d2      	adds	r2, r2, r3
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <vPortFree+0x90>)
 8005534:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	0018      	movs	r0, r3
 800553a:	f000 f86b 	bl	8005614 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800553e:	f7ff f9c5 	bl	80048cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	b004      	add	sp, #16
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	2000116c 	.word	0x2000116c
 8005550:	20001164 	.word	0x20001164

08005554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800555a:	23c0      	movs	r3, #192	@ 0xc0
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005560:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <prvHeapInit+0xa8>)
 8005562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2207      	movs	r2, #7
 8005568:	4013      	ands	r3, r2
 800556a:	d00c      	beq.n	8005586 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3307      	adds	r3, #7
 8005570:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2207      	movs	r2, #7
 8005576:	4393      	bics	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	4b1e      	ldr	r3, [pc, #120]	@ (80055fc <prvHeapInit+0xa8>)
 8005582:	18d3      	adds	r3, r2, r3
 8005584:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800558a:	4b1d      	ldr	r3, [pc, #116]	@ (8005600 <prvHeapInit+0xac>)
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005590:	4b1b      	ldr	r3, [pc, #108]	@ (8005600 <prvHeapInit+0xac>)
 8005592:	2200      	movs	r2, #0
 8005594:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	18d3      	adds	r3, r2, r3
 800559c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800559e:	2208      	movs	r2, #8
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2207      	movs	r2, #7
 80055aa:	4393      	bics	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4b14      	ldr	r3, [pc, #80]	@ (8005604 <prvHeapInit+0xb0>)
 80055b2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80055b4:	4b13      	ldr	r3, [pc, #76]	@ (8005604 <prvHeapInit+0xb0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055bc:	4b11      	ldr	r3, [pc, #68]	@ (8005604 <prvHeapInit+0xb0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	1ad2      	subs	r2, r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005604 <prvHeapInit+0xb0>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <prvHeapInit+0xb4>)
 80055e0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b09      	ldr	r3, [pc, #36]	@ (800560c <prvHeapInit+0xb8>)
 80055e8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055ea:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <prvHeapInit+0xbc>)
 80055ec:	2280      	movs	r2, #128	@ 0x80
 80055ee:	0612      	lsls	r2, r2, #24
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b004      	add	sp, #16
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	20000558 	.word	0x20000558
 8005600:	20001158 	.word	0x20001158
 8005604:	20001160 	.word	0x20001160
 8005608:	20001168 	.word	0x20001168
 800560c:	20001164 	.word	0x20001164
 8005610:	2000116c 	.word	0x2000116c

08005614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800561c:	4b27      	ldr	r3, [pc, #156]	@ (80056bc <prvInsertBlockIntoFreeList+0xa8>)
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e002      	b.n	8005628 <prvInsertBlockIntoFreeList+0x14>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	429a      	cmp	r2, r3
 8005630:	d8f7      	bhi.n	8005622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d108      	bne.n	8005656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	18d2      	adds	r2, r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	18d2      	adds	r2, r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d118      	bne.n	800569c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <prvInsertBlockIntoFreeList+0xac>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d00d      	beq.n	8005692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	18d2      	adds	r2, r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e008      	b.n	80056a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005692:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <prvInsertBlockIntoFreeList+0xac>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e003      	b.n	80056a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d002      	beq.n	80056b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b004      	add	sp, #16
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	20001158 	.word	0x20001158
 80056c0:	20001160 	.word	0x20001160

080056c4 <std>:
 80056c4:	2300      	movs	r3, #0
 80056c6:	b510      	push	{r4, lr}
 80056c8:	0004      	movs	r4, r0
 80056ca:	6003      	str	r3, [r0, #0]
 80056cc:	6043      	str	r3, [r0, #4]
 80056ce:	6083      	str	r3, [r0, #8]
 80056d0:	8181      	strh	r1, [r0, #12]
 80056d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80056d4:	81c2      	strh	r2, [r0, #14]
 80056d6:	6103      	str	r3, [r0, #16]
 80056d8:	6143      	str	r3, [r0, #20]
 80056da:	6183      	str	r3, [r0, #24]
 80056dc:	0019      	movs	r1, r3
 80056de:	2208      	movs	r2, #8
 80056e0:	305c      	adds	r0, #92	@ 0x5c
 80056e2:	f000 f90f 	bl	8005904 <memset>
 80056e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <std+0x50>)
 80056e8:	6224      	str	r4, [r4, #32]
 80056ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80056ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <std+0x54>)
 80056ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056f0:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <std+0x58>)
 80056f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005720 <std+0x5c>)
 80056f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80056f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <std+0x60>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d005      	beq.n	800570a <std+0x46>
 80056fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <std+0x64>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d002      	beq.n	800570a <std+0x46>
 8005704:	4b09      	ldr	r3, [pc, #36]	@ (800572c <std+0x68>)
 8005706:	429c      	cmp	r4, r3
 8005708:	d103      	bne.n	8005712 <std+0x4e>
 800570a:	0020      	movs	r0, r4
 800570c:	3058      	adds	r0, #88	@ 0x58
 800570e:	f000 f979 	bl	8005a04 <__retarget_lock_init_recursive>
 8005712:	bd10      	pop	{r4, pc}
 8005714:	0800586d 	.word	0x0800586d
 8005718:	08005895 	.word	0x08005895
 800571c:	080058cd 	.word	0x080058cd
 8005720:	080058f9 	.word	0x080058f9
 8005724:	20001170 	.word	0x20001170
 8005728:	200011d8 	.word	0x200011d8
 800572c:	20001240 	.word	0x20001240

08005730 <stdio_exit_handler>:
 8005730:	b510      	push	{r4, lr}
 8005732:	4a03      	ldr	r2, [pc, #12]	@ (8005740 <stdio_exit_handler+0x10>)
 8005734:	4903      	ldr	r1, [pc, #12]	@ (8005744 <stdio_exit_handler+0x14>)
 8005736:	4804      	ldr	r0, [pc, #16]	@ (8005748 <stdio_exit_handler+0x18>)
 8005738:	f000 f86c 	bl	8005814 <_fwalk_sglue>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	20000020 	.word	0x20000020
 8005744:	080062a5 	.word	0x080062a5
 8005748:	20000030 	.word	0x20000030

0800574c <cleanup_stdio>:
 800574c:	6841      	ldr	r1, [r0, #4]
 800574e:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <cleanup_stdio+0x30>)
 8005750:	b510      	push	{r4, lr}
 8005752:	0004      	movs	r4, r0
 8005754:	4299      	cmp	r1, r3
 8005756:	d001      	beq.n	800575c <cleanup_stdio+0x10>
 8005758:	f000 fda4 	bl	80062a4 <_fflush_r>
 800575c:	68a1      	ldr	r1, [r4, #8]
 800575e:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <cleanup_stdio+0x34>)
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <cleanup_stdio+0x1e>
 8005764:	0020      	movs	r0, r4
 8005766:	f000 fd9d 	bl	80062a4 <_fflush_r>
 800576a:	68e1      	ldr	r1, [r4, #12]
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <cleanup_stdio+0x38>)
 800576e:	4299      	cmp	r1, r3
 8005770:	d002      	beq.n	8005778 <cleanup_stdio+0x2c>
 8005772:	0020      	movs	r0, r4
 8005774:	f000 fd96 	bl	80062a4 <_fflush_r>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	20001170 	.word	0x20001170
 8005780:	200011d8 	.word	0x200011d8
 8005784:	20001240 	.word	0x20001240

08005788 <global_stdio_init.part.0>:
 8005788:	b510      	push	{r4, lr}
 800578a:	4b09      	ldr	r3, [pc, #36]	@ (80057b0 <global_stdio_init.part.0+0x28>)
 800578c:	4a09      	ldr	r2, [pc, #36]	@ (80057b4 <global_stdio_init.part.0+0x2c>)
 800578e:	2104      	movs	r1, #4
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	4809      	ldr	r0, [pc, #36]	@ (80057b8 <global_stdio_init.part.0+0x30>)
 8005794:	2200      	movs	r2, #0
 8005796:	f7ff ff95 	bl	80056c4 <std>
 800579a:	2201      	movs	r2, #1
 800579c:	2109      	movs	r1, #9
 800579e:	4807      	ldr	r0, [pc, #28]	@ (80057bc <global_stdio_init.part.0+0x34>)
 80057a0:	f7ff ff90 	bl	80056c4 <std>
 80057a4:	2202      	movs	r2, #2
 80057a6:	2112      	movs	r1, #18
 80057a8:	4805      	ldr	r0, [pc, #20]	@ (80057c0 <global_stdio_init.part.0+0x38>)
 80057aa:	f7ff ff8b 	bl	80056c4 <std>
 80057ae:	bd10      	pop	{r4, pc}
 80057b0:	200012a8 	.word	0x200012a8
 80057b4:	08005731 	.word	0x08005731
 80057b8:	20001170 	.word	0x20001170
 80057bc:	200011d8 	.word	0x200011d8
 80057c0:	20001240 	.word	0x20001240

080057c4 <__sfp_lock_acquire>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4802      	ldr	r0, [pc, #8]	@ (80057d0 <__sfp_lock_acquire+0xc>)
 80057c8:	f000 f91d 	bl	8005a06 <__retarget_lock_acquire_recursive>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	200012b1 	.word	0x200012b1

080057d4 <__sfp_lock_release>:
 80057d4:	b510      	push	{r4, lr}
 80057d6:	4802      	ldr	r0, [pc, #8]	@ (80057e0 <__sfp_lock_release+0xc>)
 80057d8:	f000 f916 	bl	8005a08 <__retarget_lock_release_recursive>
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	200012b1 	.word	0x200012b1

080057e4 <__sinit>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	0004      	movs	r4, r0
 80057e8:	f7ff ffec 	bl	80057c4 <__sfp_lock_acquire>
 80057ec:	6a23      	ldr	r3, [r4, #32]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <__sinit+0x14>
 80057f2:	f7ff ffef 	bl	80057d4 <__sfp_lock_release>
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	4b04      	ldr	r3, [pc, #16]	@ (800580c <__sinit+0x28>)
 80057fa:	6223      	str	r3, [r4, #32]
 80057fc:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <__sinit+0x2c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f6      	bne.n	80057f2 <__sinit+0xe>
 8005804:	f7ff ffc0 	bl	8005788 <global_stdio_init.part.0>
 8005808:	e7f3      	b.n	80057f2 <__sinit+0xe>
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	0800574d 	.word	0x0800574d
 8005810:	200012a8 	.word	0x200012a8

08005814 <_fwalk_sglue>:
 8005814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005816:	0014      	movs	r4, r2
 8005818:	2600      	movs	r6, #0
 800581a:	9000      	str	r0, [sp, #0]
 800581c:	9101      	str	r1, [sp, #4]
 800581e:	68a5      	ldr	r5, [r4, #8]
 8005820:	6867      	ldr	r7, [r4, #4]
 8005822:	3f01      	subs	r7, #1
 8005824:	d504      	bpl.n	8005830 <_fwalk_sglue+0x1c>
 8005826:	6824      	ldr	r4, [r4, #0]
 8005828:	2c00      	cmp	r4, #0
 800582a:	d1f8      	bne.n	800581e <_fwalk_sglue+0xa>
 800582c:	0030      	movs	r0, r6
 800582e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005830:	89ab      	ldrh	r3, [r5, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d908      	bls.n	8005848 <_fwalk_sglue+0x34>
 8005836:	220e      	movs	r2, #14
 8005838:	5eab      	ldrsh	r3, [r5, r2]
 800583a:	3301      	adds	r3, #1
 800583c:	d004      	beq.n	8005848 <_fwalk_sglue+0x34>
 800583e:	0029      	movs	r1, r5
 8005840:	9800      	ldr	r0, [sp, #0]
 8005842:	9b01      	ldr	r3, [sp, #4]
 8005844:	4798      	blx	r3
 8005846:	4306      	orrs	r6, r0
 8005848:	3568      	adds	r5, #104	@ 0x68
 800584a:	e7ea      	b.n	8005822 <_fwalk_sglue+0xe>

0800584c <iprintf>:
 800584c:	b40f      	push	{r0, r1, r2, r3}
 800584e:	b507      	push	{r0, r1, r2, lr}
 8005850:	4905      	ldr	r1, [pc, #20]	@ (8005868 <iprintf+0x1c>)
 8005852:	ab04      	add	r3, sp, #16
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	cb04      	ldmia	r3!, {r2}
 8005858:	6881      	ldr	r1, [r0, #8]
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	f000 fa02 	bl	8005c64 <_vfiprintf_r>
 8005860:	b003      	add	sp, #12
 8005862:	bc08      	pop	{r3}
 8005864:	b004      	add	sp, #16
 8005866:	4718      	bx	r3
 8005868:	2000002c 	.word	0x2000002c

0800586c <__sread>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	000c      	movs	r4, r1
 8005870:	250e      	movs	r5, #14
 8005872:	5f49      	ldrsh	r1, [r1, r5]
 8005874:	f000 f874 	bl	8005960 <_read_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	db03      	blt.n	8005884 <__sread+0x18>
 800587c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800587e:	181b      	adds	r3, r3, r0
 8005880:	6563      	str	r3, [r4, #84]	@ 0x54
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	4a02      	ldr	r2, [pc, #8]	@ (8005890 <__sread+0x24>)
 8005888:	4013      	ands	r3, r2
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	e7f9      	b.n	8005882 <__sread+0x16>
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	ffffefff 	.word	0xffffefff

08005894 <__swrite>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	001f      	movs	r7, r3
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	0005      	movs	r5, r0
 800589c:	000c      	movs	r4, r1
 800589e:	0016      	movs	r6, r2
 80058a0:	05db      	lsls	r3, r3, #23
 80058a2:	d505      	bpl.n	80058b0 <__swrite+0x1c>
 80058a4:	230e      	movs	r3, #14
 80058a6:	5ec9      	ldrsh	r1, [r1, r3]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2302      	movs	r3, #2
 80058ac:	f000 f844 	bl	8005938 <_lseek_r>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	4a05      	ldr	r2, [pc, #20]	@ (80058c8 <__swrite+0x34>)
 80058b4:	0028      	movs	r0, r5
 80058b6:	4013      	ands	r3, r2
 80058b8:	81a3      	strh	r3, [r4, #12]
 80058ba:	0032      	movs	r2, r6
 80058bc:	230e      	movs	r3, #14
 80058be:	5ee1      	ldrsh	r1, [r4, r3]
 80058c0:	003b      	movs	r3, r7
 80058c2:	f000 f861 	bl	8005988 <_write_r>
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	ffffefff 	.word	0xffffefff

080058cc <__sseek>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	000c      	movs	r4, r1
 80058d0:	250e      	movs	r5, #14
 80058d2:	5f49      	ldrsh	r1, [r1, r5]
 80058d4:	f000 f830 	bl	8005938 <_lseek_r>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	1c42      	adds	r2, r0, #1
 80058dc:	d103      	bne.n	80058e6 <__sseek+0x1a>
 80058de:	4a05      	ldr	r2, [pc, #20]	@ (80058f4 <__sseek+0x28>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	2280      	movs	r2, #128	@ 0x80
 80058e8:	0152      	lsls	r2, r2, #5
 80058ea:	4313      	orrs	r3, r2
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80058f0:	e7f8      	b.n	80058e4 <__sseek+0x18>
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	ffffefff 	.word	0xffffefff

080058f8 <__sclose>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	230e      	movs	r3, #14
 80058fc:	5ec9      	ldrsh	r1, [r1, r3]
 80058fe:	f000 f809 	bl	8005914 <_close_r>
 8005902:	bd10      	pop	{r4, pc}

08005904 <memset>:
 8005904:	0003      	movs	r3, r0
 8005906:	1882      	adds	r2, r0, r2
 8005908:	4293      	cmp	r3, r2
 800590a:	d100      	bne.n	800590e <memset+0xa>
 800590c:	4770      	bx	lr
 800590e:	7019      	strb	r1, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	e7f9      	b.n	8005908 <memset+0x4>

08005914 <_close_r>:
 8005914:	2300      	movs	r3, #0
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	4d06      	ldr	r5, [pc, #24]	@ (8005934 <_close_r+0x20>)
 800591a:	0004      	movs	r4, r0
 800591c:	0008      	movs	r0, r1
 800591e:	602b      	str	r3, [r5, #0]
 8005920:	f7fb fb5b 	bl	8000fda <_close>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d103      	bne.n	8005930 <_close_r+0x1c>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d000      	beq.n	8005930 <_close_r+0x1c>
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	200012ac 	.word	0x200012ac

08005938 <_lseek_r>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	0004      	movs	r4, r0
 800593c:	0008      	movs	r0, r1
 800593e:	0011      	movs	r1, r2
 8005940:	001a      	movs	r2, r3
 8005942:	2300      	movs	r3, #0
 8005944:	4d05      	ldr	r5, [pc, #20]	@ (800595c <_lseek_r+0x24>)
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fb fb68 	bl	800101c <_lseek>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d103      	bne.n	8005958 <_lseek_r+0x20>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d000      	beq.n	8005958 <_lseek_r+0x20>
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	bd70      	pop	{r4, r5, r6, pc}
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	200012ac 	.word	0x200012ac

08005960 <_read_r>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	0004      	movs	r4, r0
 8005964:	0008      	movs	r0, r1
 8005966:	0011      	movs	r1, r2
 8005968:	001a      	movs	r2, r3
 800596a:	2300      	movs	r3, #0
 800596c:	4d05      	ldr	r5, [pc, #20]	@ (8005984 <_read_r+0x24>)
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f7fb fb16 	bl	8000fa0 <_read>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d103      	bne.n	8005980 <_read_r+0x20>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d000      	beq.n	8005980 <_read_r+0x20>
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	200012ac 	.word	0x200012ac

08005988 <_write_r>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	0004      	movs	r4, r0
 800598c:	0008      	movs	r0, r1
 800598e:	0011      	movs	r1, r2
 8005990:	001a      	movs	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	4d05      	ldr	r5, [pc, #20]	@ (80059ac <_write_r+0x24>)
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fa fe86 	bl	80006a8 <_write>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d103      	bne.n	80059a8 <_write_r+0x20>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d000      	beq.n	80059a8 <_write_r+0x20>
 80059a6:	6023      	str	r3, [r4, #0]
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	200012ac 	.word	0x200012ac

080059b0 <__errno>:
 80059b0:	4b01      	ldr	r3, [pc, #4]	@ (80059b8 <__errno+0x8>)
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	4770      	bx	lr
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	2000002c 	.word	0x2000002c

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	2600      	movs	r6, #0
 80059c0:	4c0c      	ldr	r4, [pc, #48]	@ (80059f4 <__libc_init_array+0x38>)
 80059c2:	4d0d      	ldr	r5, [pc, #52]	@ (80059f8 <__libc_init_array+0x3c>)
 80059c4:	1b64      	subs	r4, r4, r5
 80059c6:	10a4      	asrs	r4, r4, #2
 80059c8:	42a6      	cmp	r6, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	2600      	movs	r6, #0
 80059ce:	f000 fde3 	bl	8006598 <_init>
 80059d2:	4c0a      	ldr	r4, [pc, #40]	@ (80059fc <__libc_init_array+0x40>)
 80059d4:	4d0a      	ldr	r5, [pc, #40]	@ (8005a00 <__libc_init_array+0x44>)
 80059d6:	1b64      	subs	r4, r4, r5
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	42a6      	cmp	r6, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	00b3      	lsls	r3, r6, #2
 80059e2:	58eb      	ldr	r3, [r5, r3]
 80059e4:	4798      	blx	r3
 80059e6:	3601      	adds	r6, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	00b3      	lsls	r3, r6, #2
 80059ec:	58eb      	ldr	r3, [r5, r3]
 80059ee:	4798      	blx	r3
 80059f0:	3601      	adds	r6, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	080066dc 	.word	0x080066dc
 80059f8:	080066dc 	.word	0x080066dc
 80059fc:	080066e0 	.word	0x080066e0
 8005a00:	080066dc 	.word	0x080066dc

08005a04 <__retarget_lock_init_recursive>:
 8005a04:	4770      	bx	lr

08005a06 <__retarget_lock_acquire_recursive>:
 8005a06:	4770      	bx	lr

08005a08 <__retarget_lock_release_recursive>:
 8005a08:	4770      	bx	lr

08005a0a <memcpy>:
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d100      	bne.n	8005a14 <memcpy+0xa>
 8005a12:	bd10      	pop	{r4, pc}
 8005a14:	5ccc      	ldrb	r4, [r1, r3]
 8005a16:	54c4      	strb	r4, [r0, r3]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	e7f8      	b.n	8005a0e <memcpy+0x4>

08005a1c <_free_r>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	0005      	movs	r5, r0
 8005a20:	1e0c      	subs	r4, r1, #0
 8005a22:	d010      	beq.n	8005a46 <_free_r+0x2a>
 8005a24:	3c04      	subs	r4, #4
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da00      	bge.n	8005a2e <_free_r+0x12>
 8005a2c:	18e4      	adds	r4, r4, r3
 8005a2e:	0028      	movs	r0, r5
 8005a30:	f000 f8e0 	bl	8005bf4 <__malloc_lock>
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <_free_r+0x90>)
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <_free_r+0x2c>
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	6014      	str	r4, [r2, #0]
 8005a40:	0028      	movs	r0, r5
 8005a42:	f000 f8df 	bl	8005c04 <__malloc_unlock>
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	d908      	bls.n	8005a5e <_free_r+0x42>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	1821      	adds	r1, r4, r0
 8005a50:	428b      	cmp	r3, r1
 8005a52:	d1f3      	bne.n	8005a3c <_free_r+0x20>
 8005a54:	6819      	ldr	r1, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	1809      	adds	r1, r1, r0
 8005a5a:	6021      	str	r1, [r4, #0]
 8005a5c:	e7ee      	b.n	8005a3c <_free_r+0x20>
 8005a5e:	001a      	movs	r2, r3
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <_free_r+0x4e>
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	d9f9      	bls.n	8005a5e <_free_r+0x42>
 8005a6a:	6811      	ldr	r1, [r2, #0]
 8005a6c:	1850      	adds	r0, r2, r1
 8005a6e:	42a0      	cmp	r0, r4
 8005a70:	d10b      	bne.n	8005a8a <_free_r+0x6e>
 8005a72:	6820      	ldr	r0, [r4, #0]
 8005a74:	1809      	adds	r1, r1, r0
 8005a76:	1850      	adds	r0, r2, r1
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	4283      	cmp	r3, r0
 8005a7c:	d1e0      	bne.n	8005a40 <_free_r+0x24>
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	1841      	adds	r1, r0, r1
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	6053      	str	r3, [r2, #4]
 8005a88:	e7da      	b.n	8005a40 <_free_r+0x24>
 8005a8a:	42a0      	cmp	r0, r4
 8005a8c:	d902      	bls.n	8005a94 <_free_r+0x78>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	e7d5      	b.n	8005a40 <_free_r+0x24>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	1821      	adds	r1, r4, r0
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	d103      	bne.n	8005aa4 <_free_r+0x88>
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	1809      	adds	r1, r1, r0
 8005aa2:	6021      	str	r1, [r4, #0]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	6054      	str	r4, [r2, #4]
 8005aa8:	e7ca      	b.n	8005a40 <_free_r+0x24>
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	200012b8 	.word	0x200012b8

08005ab0 <sbrk_aligned>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8005af0 <sbrk_aligned+0x40>)
 8005ab4:	000d      	movs	r5, r1
 8005ab6:	6831      	ldr	r1, [r6, #0]
 8005ab8:	0004      	movs	r4, r0
 8005aba:	2900      	cmp	r1, #0
 8005abc:	d102      	bne.n	8005ac4 <sbrk_aligned+0x14>
 8005abe:	f000 fcbd 	bl	800643c <_sbrk_r>
 8005ac2:	6030      	str	r0, [r6, #0]
 8005ac4:	0029      	movs	r1, r5
 8005ac6:	0020      	movs	r0, r4
 8005ac8:	f000 fcb8 	bl	800643c <_sbrk_r>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d103      	bne.n	8005ad8 <sbrk_aligned+0x28>
 8005ad0:	2501      	movs	r5, #1
 8005ad2:	426d      	negs	r5, r5
 8005ad4:	0028      	movs	r0, r5
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	2303      	movs	r3, #3
 8005ada:	1cc5      	adds	r5, r0, #3
 8005adc:	439d      	bics	r5, r3
 8005ade:	42a8      	cmp	r0, r5
 8005ae0:	d0f8      	beq.n	8005ad4 <sbrk_aligned+0x24>
 8005ae2:	1a29      	subs	r1, r5, r0
 8005ae4:	0020      	movs	r0, r4
 8005ae6:	f000 fca9 	bl	800643c <_sbrk_r>
 8005aea:	3001      	adds	r0, #1
 8005aec:	d1f2      	bne.n	8005ad4 <sbrk_aligned+0x24>
 8005aee:	e7ef      	b.n	8005ad0 <sbrk_aligned+0x20>
 8005af0:	200012b4 	.word	0x200012b4

08005af4 <_malloc_r>:
 8005af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af6:	2203      	movs	r2, #3
 8005af8:	1ccb      	adds	r3, r1, #3
 8005afa:	4393      	bics	r3, r2
 8005afc:	3308      	adds	r3, #8
 8005afe:	0005      	movs	r5, r0
 8005b00:	001f      	movs	r7, r3
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d234      	bcs.n	8005b70 <_malloc_r+0x7c>
 8005b06:	270c      	movs	r7, #12
 8005b08:	42b9      	cmp	r1, r7
 8005b0a:	d833      	bhi.n	8005b74 <_malloc_r+0x80>
 8005b0c:	0028      	movs	r0, r5
 8005b0e:	f000 f871 	bl	8005bf4 <__malloc_lock>
 8005b12:	4e37      	ldr	r6, [pc, #220]	@ (8005bf0 <_malloc_r+0xfc>)
 8005b14:	6833      	ldr	r3, [r6, #0]
 8005b16:	001c      	movs	r4, r3
 8005b18:	2c00      	cmp	r4, #0
 8005b1a:	d12f      	bne.n	8005b7c <_malloc_r+0x88>
 8005b1c:	0039      	movs	r1, r7
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f7ff ffc6 	bl	8005ab0 <sbrk_aligned>
 8005b24:	0004      	movs	r4, r0
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d15f      	bne.n	8005bea <_malloc_r+0xf6>
 8005b2a:	6834      	ldr	r4, [r6, #0]
 8005b2c:	9400      	str	r4, [sp, #0]
 8005b2e:	9b00      	ldr	r3, [sp, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d14a      	bne.n	8005bca <_malloc_r+0xd6>
 8005b34:	2c00      	cmp	r4, #0
 8005b36:	d052      	beq.n	8005bde <_malloc_r+0xea>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	0028      	movs	r0, r5
 8005b3c:	18e3      	adds	r3, r4, r3
 8005b3e:	9900      	ldr	r1, [sp, #0]
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	f000 fc7b 	bl	800643c <_sbrk_r>
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	4283      	cmp	r3, r0
 8005b4a:	d148      	bne.n	8005bde <_malloc_r+0xea>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	0028      	movs	r0, r5
 8005b50:	1aff      	subs	r7, r7, r3
 8005b52:	0039      	movs	r1, r7
 8005b54:	f7ff ffac 	bl	8005ab0 <sbrk_aligned>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d040      	beq.n	8005bde <_malloc_r+0xea>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	19db      	adds	r3, r3, r7
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	6833      	ldr	r3, [r6, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d133      	bne.n	8005bd2 <_malloc_r+0xde>
 8005b6a:	9b00      	ldr	r3, [sp, #0]
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	e019      	b.n	8005ba4 <_malloc_r+0xb0>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	dac9      	bge.n	8005b08 <_malloc_r+0x14>
 8005b74:	230c      	movs	r3, #12
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	2000      	movs	r0, #0
 8005b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b7c:	6821      	ldr	r1, [r4, #0]
 8005b7e:	1bc9      	subs	r1, r1, r7
 8005b80:	d420      	bmi.n	8005bc4 <_malloc_r+0xd0>
 8005b82:	290b      	cmp	r1, #11
 8005b84:	d90a      	bls.n	8005b9c <_malloc_r+0xa8>
 8005b86:	19e2      	adds	r2, r4, r7
 8005b88:	6027      	str	r7, [r4, #0]
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	d104      	bne.n	8005b98 <_malloc_r+0xa4>
 8005b8e:	6032      	str	r2, [r6, #0]
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	6011      	str	r1, [r2, #0]
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	e005      	b.n	8005ba4 <_malloc_r+0xb0>
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	e7f9      	b.n	8005b90 <_malloc_r+0x9c>
 8005b9c:	6862      	ldr	r2, [r4, #4]
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	d10e      	bne.n	8005bc0 <_malloc_r+0xcc>
 8005ba2:	6032      	str	r2, [r6, #0]
 8005ba4:	0028      	movs	r0, r5
 8005ba6:	f000 f82d 	bl	8005c04 <__malloc_unlock>
 8005baa:	0020      	movs	r0, r4
 8005bac:	2207      	movs	r2, #7
 8005bae:	300b      	adds	r0, #11
 8005bb0:	1d23      	adds	r3, r4, #4
 8005bb2:	4390      	bics	r0, r2
 8005bb4:	1ac2      	subs	r2, r0, r3
 8005bb6:	4298      	cmp	r0, r3
 8005bb8:	d0df      	beq.n	8005b7a <_malloc_r+0x86>
 8005bba:	1a1b      	subs	r3, r3, r0
 8005bbc:	50a3      	str	r3, [r4, r2]
 8005bbe:	e7dc      	b.n	8005b7a <_malloc_r+0x86>
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	e7ef      	b.n	8005ba4 <_malloc_r+0xb0>
 8005bc4:	0023      	movs	r3, r4
 8005bc6:	6864      	ldr	r4, [r4, #4]
 8005bc8:	e7a6      	b.n	8005b18 <_malloc_r+0x24>
 8005bca:	9c00      	ldr	r4, [sp, #0]
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	e7ad      	b.n	8005b2e <_malloc_r+0x3a>
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	42a3      	cmp	r3, r4
 8005bd8:	d1fb      	bne.n	8005bd2 <_malloc_r+0xde>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e7da      	b.n	8005b94 <_malloc_r+0xa0>
 8005bde:	230c      	movs	r3, #12
 8005be0:	0028      	movs	r0, r5
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f000 f80e 	bl	8005c04 <__malloc_unlock>
 8005be8:	e7c6      	b.n	8005b78 <_malloc_r+0x84>
 8005bea:	6007      	str	r7, [r0, #0]
 8005bec:	e7da      	b.n	8005ba4 <_malloc_r+0xb0>
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	200012b8 	.word	0x200012b8

08005bf4 <__malloc_lock>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	4802      	ldr	r0, [pc, #8]	@ (8005c00 <__malloc_lock+0xc>)
 8005bf8:	f7ff ff05 	bl	8005a06 <__retarget_lock_acquire_recursive>
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	200012b0 	.word	0x200012b0

08005c04 <__malloc_unlock>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4802      	ldr	r0, [pc, #8]	@ (8005c10 <__malloc_unlock+0xc>)
 8005c08:	f7ff fefe 	bl	8005a08 <__retarget_lock_release_recursive>
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	46c0      	nop			@ (mov r8, r8)
 8005c10:	200012b0 	.word	0x200012b0

08005c14 <__sfputc_r>:
 8005c14:	6893      	ldr	r3, [r2, #8]
 8005c16:	b510      	push	{r4, lr}
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	6093      	str	r3, [r2, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	da04      	bge.n	8005c2a <__sfputc_r+0x16>
 8005c20:	6994      	ldr	r4, [r2, #24]
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	db07      	blt.n	8005c36 <__sfputc_r+0x22>
 8005c26:	290a      	cmp	r1, #10
 8005c28:	d005      	beq.n	8005c36 <__sfputc_r+0x22>
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	1c58      	adds	r0, r3, #1
 8005c2e:	6010      	str	r0, [r2, #0]
 8005c30:	7019      	strb	r1, [r3, #0]
 8005c32:	0008      	movs	r0, r1
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	f000 fb60 	bl	80062fa <__swbuf_r>
 8005c3a:	0001      	movs	r1, r0
 8005c3c:	e7f9      	b.n	8005c32 <__sfputc_r+0x1e>

08005c3e <__sfputs_r>:
 8005c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c40:	0006      	movs	r6, r0
 8005c42:	000f      	movs	r7, r1
 8005c44:	0014      	movs	r4, r2
 8005c46:	18d5      	adds	r5, r2, r3
 8005c48:	42ac      	cmp	r4, r5
 8005c4a:	d101      	bne.n	8005c50 <__sfputs_r+0x12>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e007      	b.n	8005c60 <__sfputs_r+0x22>
 8005c50:	7821      	ldrb	r1, [r4, #0]
 8005c52:	003a      	movs	r2, r7
 8005c54:	0030      	movs	r0, r6
 8005c56:	f7ff ffdd 	bl	8005c14 <__sfputc_r>
 8005c5a:	3401      	adds	r4, #1
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d1f3      	bne.n	8005c48 <__sfputs_r+0xa>
 8005c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c64 <_vfiprintf_r>:
 8005c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c66:	b0a1      	sub	sp, #132	@ 0x84
 8005c68:	000f      	movs	r7, r1
 8005c6a:	0015      	movs	r5, r2
 8005c6c:	001e      	movs	r6, r3
 8005c6e:	9003      	str	r0, [sp, #12]
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d004      	beq.n	8005c7e <_vfiprintf_r+0x1a>
 8005c74:	6a03      	ldr	r3, [r0, #32]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <_vfiprintf_r+0x1a>
 8005c7a:	f7ff fdb3 	bl	80057e4 <__sinit>
 8005c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c80:	07db      	lsls	r3, r3, #31
 8005c82:	d405      	bmi.n	8005c90 <_vfiprintf_r+0x2c>
 8005c84:	89bb      	ldrh	r3, [r7, #12]
 8005c86:	059b      	lsls	r3, r3, #22
 8005c88:	d402      	bmi.n	8005c90 <_vfiprintf_r+0x2c>
 8005c8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c8c:	f7ff febb 	bl	8005a06 <__retarget_lock_acquire_recursive>
 8005c90:	89bb      	ldrh	r3, [r7, #12]
 8005c92:	071b      	lsls	r3, r3, #28
 8005c94:	d502      	bpl.n	8005c9c <_vfiprintf_r+0x38>
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d113      	bne.n	8005cc4 <_vfiprintf_r+0x60>
 8005c9c:	0039      	movs	r1, r7
 8005c9e:	9803      	ldr	r0, [sp, #12]
 8005ca0:	f000 fb6e 	bl	8006380 <__swsetup_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d00d      	beq.n	8005cc4 <_vfiprintf_r+0x60>
 8005ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005caa:	07db      	lsls	r3, r3, #31
 8005cac:	d503      	bpl.n	8005cb6 <_vfiprintf_r+0x52>
 8005cae:	2001      	movs	r0, #1
 8005cb0:	4240      	negs	r0, r0
 8005cb2:	b021      	add	sp, #132	@ 0x84
 8005cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb6:	89bb      	ldrh	r3, [r7, #12]
 8005cb8:	059b      	lsls	r3, r3, #22
 8005cba:	d4f8      	bmi.n	8005cae <_vfiprintf_r+0x4a>
 8005cbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005cbe:	f7ff fea3 	bl	8005a08 <__retarget_lock_release_recursive>
 8005cc2:	e7f4      	b.n	8005cae <_vfiprintf_r+0x4a>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	ac08      	add	r4, sp, #32
 8005cc8:	6163      	str	r3, [r4, #20]
 8005cca:	3320      	adds	r3, #32
 8005ccc:	7663      	strb	r3, [r4, #25]
 8005cce:	3310      	adds	r3, #16
 8005cd0:	76a3      	strb	r3, [r4, #26]
 8005cd2:	9607      	str	r6, [sp, #28]
 8005cd4:	002e      	movs	r6, r5
 8005cd6:	7833      	ldrb	r3, [r6, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <_vfiprintf_r+0x7c>
 8005cdc:	2b25      	cmp	r3, #37	@ 0x25
 8005cde:	d148      	bne.n	8005d72 <_vfiprintf_r+0x10e>
 8005ce0:	1b73      	subs	r3, r6, r5
 8005ce2:	9305      	str	r3, [sp, #20]
 8005ce4:	42ae      	cmp	r6, r5
 8005ce6:	d00b      	beq.n	8005d00 <_vfiprintf_r+0x9c>
 8005ce8:	002a      	movs	r2, r5
 8005cea:	0039      	movs	r1, r7
 8005cec:	9803      	ldr	r0, [sp, #12]
 8005cee:	f7ff ffa6 	bl	8005c3e <__sfputs_r>
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d100      	bne.n	8005cf8 <_vfiprintf_r+0x94>
 8005cf6:	e0ae      	b.n	8005e56 <_vfiprintf_r+0x1f2>
 8005cf8:	6963      	ldr	r3, [r4, #20]
 8005cfa:	9a05      	ldr	r2, [sp, #20]
 8005cfc:	189b      	adds	r3, r3, r2
 8005cfe:	6163      	str	r3, [r4, #20]
 8005d00:	7833      	ldrb	r3, [r6, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d100      	bne.n	8005d08 <_vfiprintf_r+0xa4>
 8005d06:	e0a6      	b.n	8005e56 <_vfiprintf_r+0x1f2>
 8005d08:	2201      	movs	r2, #1
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4252      	negs	r2, r2
 8005d0e:	6062      	str	r2, [r4, #4]
 8005d10:	a904      	add	r1, sp, #16
 8005d12:	3254      	adds	r2, #84	@ 0x54
 8005d14:	1852      	adds	r2, r2, r1
 8005d16:	1c75      	adds	r5, r6, #1
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	60e3      	str	r3, [r4, #12]
 8005d1c:	60a3      	str	r3, [r4, #8]
 8005d1e:	7013      	strb	r3, [r2, #0]
 8005d20:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005d22:	4b59      	ldr	r3, [pc, #356]	@ (8005e88 <_vfiprintf_r+0x224>)
 8005d24:	2205      	movs	r2, #5
 8005d26:	0018      	movs	r0, r3
 8005d28:	7829      	ldrb	r1, [r5, #0]
 8005d2a:	9305      	str	r3, [sp, #20]
 8005d2c:	f000 fb98 	bl	8006460 <memchr>
 8005d30:	1c6e      	adds	r6, r5, #1
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d11f      	bne.n	8005d76 <_vfiprintf_r+0x112>
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	06d3      	lsls	r3, r2, #27
 8005d3a:	d504      	bpl.n	8005d46 <_vfiprintf_r+0xe2>
 8005d3c:	2353      	movs	r3, #83	@ 0x53
 8005d3e:	a904      	add	r1, sp, #16
 8005d40:	185b      	adds	r3, r3, r1
 8005d42:	2120      	movs	r1, #32
 8005d44:	7019      	strb	r1, [r3, #0]
 8005d46:	0713      	lsls	r3, r2, #28
 8005d48:	d504      	bpl.n	8005d54 <_vfiprintf_r+0xf0>
 8005d4a:	2353      	movs	r3, #83	@ 0x53
 8005d4c:	a904      	add	r1, sp, #16
 8005d4e:	185b      	adds	r3, r3, r1
 8005d50:	212b      	movs	r1, #43	@ 0x2b
 8005d52:	7019      	strb	r1, [r3, #0]
 8005d54:	782b      	ldrb	r3, [r5, #0]
 8005d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d58:	d016      	beq.n	8005d88 <_vfiprintf_r+0x124>
 8005d5a:	002e      	movs	r6, r5
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	200a      	movs	r0, #10
 8005d60:	68e3      	ldr	r3, [r4, #12]
 8005d62:	7832      	ldrb	r2, [r6, #0]
 8005d64:	1c75      	adds	r5, r6, #1
 8005d66:	3a30      	subs	r2, #48	@ 0x30
 8005d68:	2a09      	cmp	r2, #9
 8005d6a:	d950      	bls.n	8005e0e <_vfiprintf_r+0x1aa>
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	d111      	bne.n	8005d94 <_vfiprintf_r+0x130>
 8005d70:	e017      	b.n	8005da2 <_vfiprintf_r+0x13e>
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7af      	b.n	8005cd6 <_vfiprintf_r+0x72>
 8005d76:	9b05      	ldr	r3, [sp, #20]
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	1ac0      	subs	r0, r0, r3
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4083      	lsls	r3, r0
 8005d80:	4313      	orrs	r3, r2
 8005d82:	0035      	movs	r5, r6
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	e7cc      	b.n	8005d22 <_vfiprintf_r+0xbe>
 8005d88:	9b07      	ldr	r3, [sp, #28]
 8005d8a:	1d19      	adds	r1, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	9107      	str	r1, [sp, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db01      	blt.n	8005d98 <_vfiprintf_r+0x134>
 8005d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d96:	e004      	b.n	8005da2 <_vfiprintf_r+0x13e>
 8005d98:	425b      	negs	r3, r3
 8005d9a:	60e3      	str	r3, [r4, #12]
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	7833      	ldrb	r3, [r6, #0]
 8005da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005da6:	d10c      	bne.n	8005dc2 <_vfiprintf_r+0x15e>
 8005da8:	7873      	ldrb	r3, [r6, #1]
 8005daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dac:	d134      	bne.n	8005e18 <_vfiprintf_r+0x1b4>
 8005dae:	9b07      	ldr	r3, [sp, #28]
 8005db0:	3602      	adds	r6, #2
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	9207      	str	r2, [sp, #28]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da01      	bge.n	8005dc0 <_vfiprintf_r+0x15c>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	425b      	negs	r3, r3
 8005dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc2:	4d32      	ldr	r5, [pc, #200]	@ (8005e8c <_vfiprintf_r+0x228>)
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	0028      	movs	r0, r5
 8005dc8:	7831      	ldrb	r1, [r6, #0]
 8005dca:	f000 fb49 	bl	8006460 <memchr>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d006      	beq.n	8005de0 <_vfiprintf_r+0x17c>
 8005dd2:	2340      	movs	r3, #64	@ 0x40
 8005dd4:	1b40      	subs	r0, r0, r5
 8005dd6:	4083      	lsls	r3, r0
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	3601      	adds	r6, #1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	7831      	ldrb	r1, [r6, #0]
 8005de2:	2206      	movs	r2, #6
 8005de4:	482a      	ldr	r0, [pc, #168]	@ (8005e90 <_vfiprintf_r+0x22c>)
 8005de6:	1c75      	adds	r5, r6, #1
 8005de8:	7621      	strb	r1, [r4, #24]
 8005dea:	f000 fb39 	bl	8006460 <memchr>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d040      	beq.n	8005e74 <_vfiprintf_r+0x210>
 8005df2:	4b28      	ldr	r3, [pc, #160]	@ (8005e94 <_vfiprintf_r+0x230>)
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d122      	bne.n	8005e3e <_vfiprintf_r+0x1da>
 8005df8:	2207      	movs	r2, #7
 8005dfa:	9b07      	ldr	r3, [sp, #28]
 8005dfc:	3307      	adds	r3, #7
 8005dfe:	4393      	bics	r3, r2
 8005e00:	3308      	adds	r3, #8
 8005e02:	9307      	str	r3, [sp, #28]
 8005e04:	6963      	ldr	r3, [r4, #20]
 8005e06:	9a04      	ldr	r2, [sp, #16]
 8005e08:	189b      	adds	r3, r3, r2
 8005e0a:	6163      	str	r3, [r4, #20]
 8005e0c:	e762      	b.n	8005cd4 <_vfiprintf_r+0x70>
 8005e0e:	4343      	muls	r3, r0
 8005e10:	002e      	movs	r6, r5
 8005e12:	2101      	movs	r1, #1
 8005e14:	189b      	adds	r3, r3, r2
 8005e16:	e7a4      	b.n	8005d62 <_vfiprintf_r+0xfe>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	200a      	movs	r0, #10
 8005e1c:	0019      	movs	r1, r3
 8005e1e:	3601      	adds	r6, #1
 8005e20:	6063      	str	r3, [r4, #4]
 8005e22:	7832      	ldrb	r2, [r6, #0]
 8005e24:	1c75      	adds	r5, r6, #1
 8005e26:	3a30      	subs	r2, #48	@ 0x30
 8005e28:	2a09      	cmp	r2, #9
 8005e2a:	d903      	bls.n	8005e34 <_vfiprintf_r+0x1d0>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0c8      	beq.n	8005dc2 <_vfiprintf_r+0x15e>
 8005e30:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e32:	e7c6      	b.n	8005dc2 <_vfiprintf_r+0x15e>
 8005e34:	4341      	muls	r1, r0
 8005e36:	002e      	movs	r6, r5
 8005e38:	2301      	movs	r3, #1
 8005e3a:	1889      	adds	r1, r1, r2
 8005e3c:	e7f1      	b.n	8005e22 <_vfiprintf_r+0x1be>
 8005e3e:	aa07      	add	r2, sp, #28
 8005e40:	9200      	str	r2, [sp, #0]
 8005e42:	0021      	movs	r1, r4
 8005e44:	003a      	movs	r2, r7
 8005e46:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <_vfiprintf_r+0x234>)
 8005e48:	9803      	ldr	r0, [sp, #12]
 8005e4a:	e000      	b.n	8005e4e <_vfiprintf_r+0x1ea>
 8005e4c:	bf00      	nop
 8005e4e:	9004      	str	r0, [sp, #16]
 8005e50:	9b04      	ldr	r3, [sp, #16]
 8005e52:	3301      	adds	r3, #1
 8005e54:	d1d6      	bne.n	8005e04 <_vfiprintf_r+0x1a0>
 8005e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e58:	07db      	lsls	r3, r3, #31
 8005e5a:	d405      	bmi.n	8005e68 <_vfiprintf_r+0x204>
 8005e5c:	89bb      	ldrh	r3, [r7, #12]
 8005e5e:	059b      	lsls	r3, r3, #22
 8005e60:	d402      	bmi.n	8005e68 <_vfiprintf_r+0x204>
 8005e62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005e64:	f7ff fdd0 	bl	8005a08 <__retarget_lock_release_recursive>
 8005e68:	89bb      	ldrh	r3, [r7, #12]
 8005e6a:	065b      	lsls	r3, r3, #25
 8005e6c:	d500      	bpl.n	8005e70 <_vfiprintf_r+0x20c>
 8005e6e:	e71e      	b.n	8005cae <_vfiprintf_r+0x4a>
 8005e70:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005e72:	e71e      	b.n	8005cb2 <_vfiprintf_r+0x4e>
 8005e74:	aa07      	add	r2, sp, #28
 8005e76:	9200      	str	r2, [sp, #0]
 8005e78:	0021      	movs	r1, r4
 8005e7a:	003a      	movs	r2, r7
 8005e7c:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <_vfiprintf_r+0x234>)
 8005e7e:	9803      	ldr	r0, [sp, #12]
 8005e80:	f000 f87c 	bl	8005f7c <_printf_i>
 8005e84:	e7e3      	b.n	8005e4e <_vfiprintf_r+0x1ea>
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	080066a8 	.word	0x080066a8
 8005e8c:	080066ae 	.word	0x080066ae
 8005e90:	080066b2 	.word	0x080066b2
 8005e94:	00000000 	.word	0x00000000
 8005e98:	08005c3f 	.word	0x08005c3f

08005e9c <_printf_common>:
 8005e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e9e:	0016      	movs	r6, r2
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	688a      	ldr	r2, [r1, #8]
 8005ea4:	690b      	ldr	r3, [r1, #16]
 8005ea6:	000c      	movs	r4, r1
 8005ea8:	9000      	str	r0, [sp, #0]
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	da00      	bge.n	8005eb0 <_printf_common+0x14>
 8005eae:	0013      	movs	r3, r2
 8005eb0:	0022      	movs	r2, r4
 8005eb2:	6033      	str	r3, [r6, #0]
 8005eb4:	3243      	adds	r2, #67	@ 0x43
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	2a00      	cmp	r2, #0
 8005eba:	d001      	beq.n	8005ec0 <_printf_common+0x24>
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6033      	str	r3, [r6, #0]
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	069b      	lsls	r3, r3, #26
 8005ec4:	d502      	bpl.n	8005ecc <_printf_common+0x30>
 8005ec6:	6833      	ldr	r3, [r6, #0]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	6033      	str	r3, [r6, #0]
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	2306      	movs	r3, #6
 8005ed0:	0015      	movs	r5, r2
 8005ed2:	401d      	ands	r5, r3
 8005ed4:	421a      	tst	r2, r3
 8005ed6:	d027      	beq.n	8005f28 <_printf_common+0x8c>
 8005ed8:	0023      	movs	r3, r4
 8005eda:	3343      	adds	r3, #67	@ 0x43
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	1e5a      	subs	r2, r3, #1
 8005ee0:	4193      	sbcs	r3, r2
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	0692      	lsls	r2, r2, #26
 8005ee6:	d430      	bmi.n	8005f4a <_printf_common+0xae>
 8005ee8:	0022      	movs	r2, r4
 8005eea:	9901      	ldr	r1, [sp, #4]
 8005eec:	9800      	ldr	r0, [sp, #0]
 8005eee:	9d08      	ldr	r5, [sp, #32]
 8005ef0:	3243      	adds	r2, #67	@ 0x43
 8005ef2:	47a8      	blx	r5
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d025      	beq.n	8005f44 <_printf_common+0xa8>
 8005ef8:	2206      	movs	r2, #6
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	2500      	movs	r5, #0
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d105      	bne.n	8005f10 <_printf_common+0x74>
 8005f04:	6833      	ldr	r3, [r6, #0]
 8005f06:	68e5      	ldr	r5, [r4, #12]
 8005f08:	1aed      	subs	r5, r5, r3
 8005f0a:	43eb      	mvns	r3, r5
 8005f0c:	17db      	asrs	r3, r3, #31
 8005f0e:	401d      	ands	r5, r3
 8005f10:	68a3      	ldr	r3, [r4, #8]
 8005f12:	6922      	ldr	r2, [r4, #16]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	dd01      	ble.n	8005f1c <_printf_common+0x80>
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	18ed      	adds	r5, r5, r3
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	42b5      	cmp	r5, r6
 8005f20:	d120      	bne.n	8005f64 <_printf_common+0xc8>
 8005f22:	2000      	movs	r0, #0
 8005f24:	e010      	b.n	8005f48 <_printf_common+0xac>
 8005f26:	3501      	adds	r5, #1
 8005f28:	68e3      	ldr	r3, [r4, #12]
 8005f2a:	6832      	ldr	r2, [r6, #0]
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	42ab      	cmp	r3, r5
 8005f30:	ddd2      	ble.n	8005ed8 <_printf_common+0x3c>
 8005f32:	0022      	movs	r2, r4
 8005f34:	2301      	movs	r3, #1
 8005f36:	9901      	ldr	r1, [sp, #4]
 8005f38:	9800      	ldr	r0, [sp, #0]
 8005f3a:	9f08      	ldr	r7, [sp, #32]
 8005f3c:	3219      	adds	r2, #25
 8005f3e:	47b8      	blx	r7
 8005f40:	3001      	adds	r0, #1
 8005f42:	d1f0      	bne.n	8005f26 <_printf_common+0x8a>
 8005f44:	2001      	movs	r0, #1
 8005f46:	4240      	negs	r0, r0
 8005f48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f4a:	2030      	movs	r0, #48	@ 0x30
 8005f4c:	18e1      	adds	r1, r4, r3
 8005f4e:	3143      	adds	r1, #67	@ 0x43
 8005f50:	7008      	strb	r0, [r1, #0]
 8005f52:	0021      	movs	r1, r4
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	3145      	adds	r1, #69	@ 0x45
 8005f58:	7809      	ldrb	r1, [r1, #0]
 8005f5a:	18a2      	adds	r2, r4, r2
 8005f5c:	3243      	adds	r2, #67	@ 0x43
 8005f5e:	3302      	adds	r3, #2
 8005f60:	7011      	strb	r1, [r2, #0]
 8005f62:	e7c1      	b.n	8005ee8 <_printf_common+0x4c>
 8005f64:	0022      	movs	r2, r4
 8005f66:	2301      	movs	r3, #1
 8005f68:	9901      	ldr	r1, [sp, #4]
 8005f6a:	9800      	ldr	r0, [sp, #0]
 8005f6c:	9f08      	ldr	r7, [sp, #32]
 8005f6e:	321a      	adds	r2, #26
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	d0e6      	beq.n	8005f44 <_printf_common+0xa8>
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7d1      	b.n	8005f1e <_printf_common+0x82>
	...

08005f7c <_printf_i>:
 8005f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7e:	b08b      	sub	sp, #44	@ 0x2c
 8005f80:	9206      	str	r2, [sp, #24]
 8005f82:	000a      	movs	r2, r1
 8005f84:	3243      	adds	r2, #67	@ 0x43
 8005f86:	9307      	str	r3, [sp, #28]
 8005f88:	9005      	str	r0, [sp, #20]
 8005f8a:	9203      	str	r2, [sp, #12]
 8005f8c:	7e0a      	ldrb	r2, [r1, #24]
 8005f8e:	000c      	movs	r4, r1
 8005f90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f92:	2a78      	cmp	r2, #120	@ 0x78
 8005f94:	d809      	bhi.n	8005faa <_printf_i+0x2e>
 8005f96:	2a62      	cmp	r2, #98	@ 0x62
 8005f98:	d80b      	bhi.n	8005fb2 <_printf_i+0x36>
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	d100      	bne.n	8005fa0 <_printf_i+0x24>
 8005f9e:	e0bc      	b.n	800611a <_printf_i+0x19e>
 8005fa0:	497b      	ldr	r1, [pc, #492]	@ (8006190 <_printf_i+0x214>)
 8005fa2:	9104      	str	r1, [sp, #16]
 8005fa4:	2a58      	cmp	r2, #88	@ 0x58
 8005fa6:	d100      	bne.n	8005faa <_printf_i+0x2e>
 8005fa8:	e090      	b.n	80060cc <_printf_i+0x150>
 8005faa:	0025      	movs	r5, r4
 8005fac:	3542      	adds	r5, #66	@ 0x42
 8005fae:	702a      	strb	r2, [r5, #0]
 8005fb0:	e022      	b.n	8005ff8 <_printf_i+0x7c>
 8005fb2:	0010      	movs	r0, r2
 8005fb4:	3863      	subs	r0, #99	@ 0x63
 8005fb6:	2815      	cmp	r0, #21
 8005fb8:	d8f7      	bhi.n	8005faa <_printf_i+0x2e>
 8005fba:	f7fa f8a5 	bl	8000108 <__gnu_thumb1_case_shi>
 8005fbe:	0016      	.short	0x0016
 8005fc0:	fff6001f 	.word	0xfff6001f
 8005fc4:	fff6fff6 	.word	0xfff6fff6
 8005fc8:	001ffff6 	.word	0x001ffff6
 8005fcc:	fff6fff6 	.word	0xfff6fff6
 8005fd0:	fff6fff6 	.word	0xfff6fff6
 8005fd4:	003600a1 	.word	0x003600a1
 8005fd8:	fff60080 	.word	0xfff60080
 8005fdc:	00b2fff6 	.word	0x00b2fff6
 8005fe0:	0036fff6 	.word	0x0036fff6
 8005fe4:	fff6fff6 	.word	0xfff6fff6
 8005fe8:	0084      	.short	0x0084
 8005fea:	0025      	movs	r5, r4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	3542      	adds	r5, #66	@ 0x42
 8005ff0:	1d11      	adds	r1, r2, #4
 8005ff2:	6019      	str	r1, [r3, #0]
 8005ff4:	6813      	ldr	r3, [r2, #0]
 8005ff6:	702b      	strb	r3, [r5, #0]
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0a0      	b.n	800613e <_printf_i+0x1c2>
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	6809      	ldr	r1, [r1, #0]
 8006000:	1d02      	adds	r2, r0, #4
 8006002:	060d      	lsls	r5, r1, #24
 8006004:	d50b      	bpl.n	800601e <_printf_i+0xa2>
 8006006:	6806      	ldr	r6, [r0, #0]
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	2e00      	cmp	r6, #0
 800600c:	da03      	bge.n	8006016 <_printf_i+0x9a>
 800600e:	232d      	movs	r3, #45	@ 0x2d
 8006010:	9a03      	ldr	r2, [sp, #12]
 8006012:	4276      	negs	r6, r6
 8006014:	7013      	strb	r3, [r2, #0]
 8006016:	4b5e      	ldr	r3, [pc, #376]	@ (8006190 <_printf_i+0x214>)
 8006018:	270a      	movs	r7, #10
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	e018      	b.n	8006050 <_printf_i+0xd4>
 800601e:	6806      	ldr	r6, [r0, #0]
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	0649      	lsls	r1, r1, #25
 8006024:	d5f1      	bpl.n	800600a <_printf_i+0x8e>
 8006026:	b236      	sxth	r6, r6
 8006028:	e7ef      	b.n	800600a <_printf_i+0x8e>
 800602a:	6808      	ldr	r0, [r1, #0]
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	c940      	ldmia	r1!, {r6}
 8006030:	0605      	lsls	r5, r0, #24
 8006032:	d402      	bmi.n	800603a <_printf_i+0xbe>
 8006034:	0640      	lsls	r0, r0, #25
 8006036:	d500      	bpl.n	800603a <_printf_i+0xbe>
 8006038:	b2b6      	uxth	r6, r6
 800603a:	6019      	str	r1, [r3, #0]
 800603c:	4b54      	ldr	r3, [pc, #336]	@ (8006190 <_printf_i+0x214>)
 800603e:	270a      	movs	r7, #10
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	2a6f      	cmp	r2, #111	@ 0x6f
 8006044:	d100      	bne.n	8006048 <_printf_i+0xcc>
 8006046:	3f02      	subs	r7, #2
 8006048:	0023      	movs	r3, r4
 800604a:	2200      	movs	r2, #0
 800604c:	3343      	adds	r3, #67	@ 0x43
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	6863      	ldr	r3, [r4, #4]
 8006052:	60a3      	str	r3, [r4, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	db03      	blt.n	8006060 <_printf_i+0xe4>
 8006058:	2104      	movs	r1, #4
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	438a      	bics	r2, r1
 800605e:	6022      	str	r2, [r4, #0]
 8006060:	2e00      	cmp	r6, #0
 8006062:	d102      	bne.n	800606a <_printf_i+0xee>
 8006064:	9d03      	ldr	r5, [sp, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <_printf_i+0x108>
 800606a:	9d03      	ldr	r5, [sp, #12]
 800606c:	0030      	movs	r0, r6
 800606e:	0039      	movs	r1, r7
 8006070:	f7fa f8da 	bl	8000228 <__aeabi_uidivmod>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	3d01      	subs	r5, #1
 8006078:	5c5b      	ldrb	r3, [r3, r1]
 800607a:	702b      	strb	r3, [r5, #0]
 800607c:	0033      	movs	r3, r6
 800607e:	0006      	movs	r6, r0
 8006080:	429f      	cmp	r7, r3
 8006082:	d9f3      	bls.n	800606c <_printf_i+0xf0>
 8006084:	2f08      	cmp	r7, #8
 8006086:	d109      	bne.n	800609c <_printf_i+0x120>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	07db      	lsls	r3, r3, #31
 800608c:	d506      	bpl.n	800609c <_printf_i+0x120>
 800608e:	6862      	ldr	r2, [r4, #4]
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	dc02      	bgt.n	800609c <_printf_i+0x120>
 8006096:	2330      	movs	r3, #48	@ 0x30
 8006098:	3d01      	subs	r5, #1
 800609a:	702b      	strb	r3, [r5, #0]
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	1b5b      	subs	r3, r3, r5
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	9b07      	ldr	r3, [sp, #28]
 80060a4:	0021      	movs	r1, r4
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	9805      	ldr	r0, [sp, #20]
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	aa09      	add	r2, sp, #36	@ 0x24
 80060ae:	f7ff fef5 	bl	8005e9c <_printf_common>
 80060b2:	3001      	adds	r0, #1
 80060b4:	d148      	bne.n	8006148 <_printf_i+0x1cc>
 80060b6:	2001      	movs	r0, #1
 80060b8:	4240      	negs	r0, r0
 80060ba:	b00b      	add	sp, #44	@ 0x2c
 80060bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060be:	2220      	movs	r2, #32
 80060c0:	6809      	ldr	r1, [r1, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	2278      	movs	r2, #120	@ 0x78
 80060c8:	4932      	ldr	r1, [pc, #200]	@ (8006194 <_printf_i+0x218>)
 80060ca:	9104      	str	r1, [sp, #16]
 80060cc:	0021      	movs	r1, r4
 80060ce:	3145      	adds	r1, #69	@ 0x45
 80060d0:	700a      	strb	r2, [r1, #0]
 80060d2:	6819      	ldr	r1, [r3, #0]
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	c940      	ldmia	r1!, {r6}
 80060d8:	0610      	lsls	r0, r2, #24
 80060da:	d402      	bmi.n	80060e2 <_printf_i+0x166>
 80060dc:	0650      	lsls	r0, r2, #25
 80060de:	d500      	bpl.n	80060e2 <_printf_i+0x166>
 80060e0:	b2b6      	uxth	r6, r6
 80060e2:	6019      	str	r1, [r3, #0]
 80060e4:	07d3      	lsls	r3, r2, #31
 80060e6:	d502      	bpl.n	80060ee <_printf_i+0x172>
 80060e8:	2320      	movs	r3, #32
 80060ea:	4313      	orrs	r3, r2
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	2e00      	cmp	r6, #0
 80060f0:	d001      	beq.n	80060f6 <_printf_i+0x17a>
 80060f2:	2710      	movs	r7, #16
 80060f4:	e7a8      	b.n	8006048 <_printf_i+0xcc>
 80060f6:	2220      	movs	r2, #32
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	4393      	bics	r3, r2
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	e7f8      	b.n	80060f2 <_printf_i+0x176>
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	680d      	ldr	r5, [r1, #0]
 8006104:	1d10      	adds	r0, r2, #4
 8006106:	6949      	ldr	r1, [r1, #20]
 8006108:	6018      	str	r0, [r3, #0]
 800610a:	6813      	ldr	r3, [r2, #0]
 800610c:	062e      	lsls	r6, r5, #24
 800610e:	d501      	bpl.n	8006114 <_printf_i+0x198>
 8006110:	6019      	str	r1, [r3, #0]
 8006112:	e002      	b.n	800611a <_printf_i+0x19e>
 8006114:	066d      	lsls	r5, r5, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0x194>
 8006118:	8019      	strh	r1, [r3, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	9d03      	ldr	r5, [sp, #12]
 800611e:	6123      	str	r3, [r4, #16]
 8006120:	e7bf      	b.n	80060a2 <_printf_i+0x126>
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	1d11      	adds	r1, r2, #4
 8006126:	6019      	str	r1, [r3, #0]
 8006128:	6815      	ldr	r5, [r2, #0]
 800612a:	2100      	movs	r1, #0
 800612c:	0028      	movs	r0, r5
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	f000 f996 	bl	8006460 <memchr>
 8006134:	2800      	cmp	r0, #0
 8006136:	d001      	beq.n	800613c <_printf_i+0x1c0>
 8006138:	1b40      	subs	r0, r0, r5
 800613a:	6060      	str	r0, [r4, #4]
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	2300      	movs	r3, #0
 8006142:	9a03      	ldr	r2, [sp, #12]
 8006144:	7013      	strb	r3, [r2, #0]
 8006146:	e7ac      	b.n	80060a2 <_printf_i+0x126>
 8006148:	002a      	movs	r2, r5
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	9906      	ldr	r1, [sp, #24]
 800614e:	9805      	ldr	r0, [sp, #20]
 8006150:	9d07      	ldr	r5, [sp, #28]
 8006152:	47a8      	blx	r5
 8006154:	3001      	adds	r0, #1
 8006156:	d0ae      	beq.n	80060b6 <_printf_i+0x13a>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	079b      	lsls	r3, r3, #30
 800615c:	d415      	bmi.n	800618a <_printf_i+0x20e>
 800615e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006160:	68e0      	ldr	r0, [r4, #12]
 8006162:	4298      	cmp	r0, r3
 8006164:	daa9      	bge.n	80060ba <_printf_i+0x13e>
 8006166:	0018      	movs	r0, r3
 8006168:	e7a7      	b.n	80060ba <_printf_i+0x13e>
 800616a:	0022      	movs	r2, r4
 800616c:	2301      	movs	r3, #1
 800616e:	9906      	ldr	r1, [sp, #24]
 8006170:	9805      	ldr	r0, [sp, #20]
 8006172:	9e07      	ldr	r6, [sp, #28]
 8006174:	3219      	adds	r2, #25
 8006176:	47b0      	blx	r6
 8006178:	3001      	adds	r0, #1
 800617a:	d09c      	beq.n	80060b6 <_printf_i+0x13a>
 800617c:	3501      	adds	r5, #1
 800617e:	68e3      	ldr	r3, [r4, #12]
 8006180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	42ab      	cmp	r3, r5
 8006186:	dcf0      	bgt.n	800616a <_printf_i+0x1ee>
 8006188:	e7e9      	b.n	800615e <_printf_i+0x1e2>
 800618a:	2500      	movs	r5, #0
 800618c:	e7f7      	b.n	800617e <_printf_i+0x202>
 800618e:	46c0      	nop			@ (mov r8, r8)
 8006190:	080066b9 	.word	0x080066b9
 8006194:	080066ca 	.word	0x080066ca

08006198 <__sflush_r>:
 8006198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800619a:	220c      	movs	r2, #12
 800619c:	5e8b      	ldrsh	r3, [r1, r2]
 800619e:	0005      	movs	r5, r0
 80061a0:	000c      	movs	r4, r1
 80061a2:	071a      	lsls	r2, r3, #28
 80061a4:	d456      	bmi.n	8006254 <__sflush_r+0xbc>
 80061a6:	684a      	ldr	r2, [r1, #4]
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	dc02      	bgt.n	80061b2 <__sflush_r+0x1a>
 80061ac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	dd4e      	ble.n	8006250 <__sflush_r+0xb8>
 80061b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80061b4:	2f00      	cmp	r7, #0
 80061b6:	d04b      	beq.n	8006250 <__sflush_r+0xb8>
 80061b8:	2200      	movs	r2, #0
 80061ba:	2080      	movs	r0, #128	@ 0x80
 80061bc:	682e      	ldr	r6, [r5, #0]
 80061be:	602a      	str	r2, [r5, #0]
 80061c0:	001a      	movs	r2, r3
 80061c2:	0140      	lsls	r0, r0, #5
 80061c4:	6a21      	ldr	r1, [r4, #32]
 80061c6:	4002      	ands	r2, r0
 80061c8:	4203      	tst	r3, r0
 80061ca:	d033      	beq.n	8006234 <__sflush_r+0x9c>
 80061cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	075b      	lsls	r3, r3, #29
 80061d2:	d506      	bpl.n	80061e2 <__sflush_r+0x4a>
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <__sflush_r+0x4a>
 80061de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061e0:	1ad2      	subs	r2, r2, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	0028      	movs	r0, r5
 80061e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80061e8:	6a21      	ldr	r1, [r4, #32]
 80061ea:	47b8      	blx	r7
 80061ec:	89a2      	ldrh	r2, [r4, #12]
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	d106      	bne.n	8006200 <__sflush_r+0x68>
 80061f2:	6829      	ldr	r1, [r5, #0]
 80061f4:	291d      	cmp	r1, #29
 80061f6:	d846      	bhi.n	8006286 <__sflush_r+0xee>
 80061f8:	4b29      	ldr	r3, [pc, #164]	@ (80062a0 <__sflush_r+0x108>)
 80061fa:	410b      	asrs	r3, r1
 80061fc:	07db      	lsls	r3, r3, #31
 80061fe:	d442      	bmi.n	8006286 <__sflush_r+0xee>
 8006200:	2300      	movs	r3, #0
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	04d2      	lsls	r2, r2, #19
 800620a:	d505      	bpl.n	8006218 <__sflush_r+0x80>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <__sflush_r+0x7e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d100      	bne.n	8006218 <__sflush_r+0x80>
 8006216:	6560      	str	r0, [r4, #84]	@ 0x54
 8006218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800621a:	602e      	str	r6, [r5, #0]
 800621c:	2900      	cmp	r1, #0
 800621e:	d017      	beq.n	8006250 <__sflush_r+0xb8>
 8006220:	0023      	movs	r3, r4
 8006222:	3344      	adds	r3, #68	@ 0x44
 8006224:	4299      	cmp	r1, r3
 8006226:	d002      	beq.n	800622e <__sflush_r+0x96>
 8006228:	0028      	movs	r0, r5
 800622a:	f7ff fbf7 	bl	8005a1c <_free_r>
 800622e:	2300      	movs	r3, #0
 8006230:	6363      	str	r3, [r4, #52]	@ 0x34
 8006232:	e00d      	b.n	8006250 <__sflush_r+0xb8>
 8006234:	2301      	movs	r3, #1
 8006236:	0028      	movs	r0, r5
 8006238:	47b8      	blx	r7
 800623a:	0002      	movs	r2, r0
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d1c6      	bne.n	80061ce <__sflush_r+0x36>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0c3      	beq.n	80061ce <__sflush_r+0x36>
 8006246:	2b1d      	cmp	r3, #29
 8006248:	d001      	beq.n	800624e <__sflush_r+0xb6>
 800624a:	2b16      	cmp	r3, #22
 800624c:	d11a      	bne.n	8006284 <__sflush_r+0xec>
 800624e:	602e      	str	r6, [r5, #0]
 8006250:	2000      	movs	r0, #0
 8006252:	e01e      	b.n	8006292 <__sflush_r+0xfa>
 8006254:	690e      	ldr	r6, [r1, #16]
 8006256:	2e00      	cmp	r6, #0
 8006258:	d0fa      	beq.n	8006250 <__sflush_r+0xb8>
 800625a:	680f      	ldr	r7, [r1, #0]
 800625c:	600e      	str	r6, [r1, #0]
 800625e:	1bba      	subs	r2, r7, r6
 8006260:	9201      	str	r2, [sp, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	079b      	lsls	r3, r3, #30
 8006266:	d100      	bne.n	800626a <__sflush_r+0xd2>
 8006268:	694a      	ldr	r2, [r1, #20]
 800626a:	60a2      	str	r2, [r4, #8]
 800626c:	9b01      	ldr	r3, [sp, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	ddee      	ble.n	8006250 <__sflush_r+0xb8>
 8006272:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006274:	0032      	movs	r2, r6
 8006276:	001f      	movs	r7, r3
 8006278:	0028      	movs	r0, r5
 800627a:	9b01      	ldr	r3, [sp, #4]
 800627c:	6a21      	ldr	r1, [r4, #32]
 800627e:	47b8      	blx	r7
 8006280:	2800      	cmp	r0, #0
 8006282:	dc07      	bgt.n	8006294 <__sflush_r+0xfc>
 8006284:	89a2      	ldrh	r2, [r4, #12]
 8006286:	2340      	movs	r3, #64	@ 0x40
 8006288:	2001      	movs	r0, #1
 800628a:	4313      	orrs	r3, r2
 800628c:	b21b      	sxth	r3, r3
 800628e:	81a3      	strh	r3, [r4, #12]
 8006290:	4240      	negs	r0, r0
 8006292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006294:	9b01      	ldr	r3, [sp, #4]
 8006296:	1836      	adds	r6, r6, r0
 8006298:	1a1b      	subs	r3, r3, r0
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	e7e6      	b.n	800626c <__sflush_r+0xd4>
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	dfbffffe 	.word	0xdfbffffe

080062a4 <_fflush_r>:
 80062a4:	690b      	ldr	r3, [r1, #16]
 80062a6:	b570      	push	{r4, r5, r6, lr}
 80062a8:	0005      	movs	r5, r0
 80062aa:	000c      	movs	r4, r1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <_fflush_r+0x12>
 80062b0:	2500      	movs	r5, #0
 80062b2:	0028      	movs	r0, r5
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d004      	beq.n	80062c4 <_fflush_r+0x20>
 80062ba:	6a03      	ldr	r3, [r0, #32]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <_fflush_r+0x20>
 80062c0:	f7ff fa90 	bl	80057e4 <__sinit>
 80062c4:	220c      	movs	r2, #12
 80062c6:	5ea3      	ldrsh	r3, [r4, r2]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0f1      	beq.n	80062b0 <_fflush_r+0xc>
 80062cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062ce:	07d2      	lsls	r2, r2, #31
 80062d0:	d404      	bmi.n	80062dc <_fflush_r+0x38>
 80062d2:	059b      	lsls	r3, r3, #22
 80062d4:	d402      	bmi.n	80062dc <_fflush_r+0x38>
 80062d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062d8:	f7ff fb95 	bl	8005a06 <__retarget_lock_acquire_recursive>
 80062dc:	0028      	movs	r0, r5
 80062de:	0021      	movs	r1, r4
 80062e0:	f7ff ff5a 	bl	8006198 <__sflush_r>
 80062e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062e6:	0005      	movs	r5, r0
 80062e8:	07db      	lsls	r3, r3, #31
 80062ea:	d4e2      	bmi.n	80062b2 <_fflush_r+0xe>
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	059b      	lsls	r3, r3, #22
 80062f0:	d4df      	bmi.n	80062b2 <_fflush_r+0xe>
 80062f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f4:	f7ff fb88 	bl	8005a08 <__retarget_lock_release_recursive>
 80062f8:	e7db      	b.n	80062b2 <_fflush_r+0xe>

080062fa <__swbuf_r>:
 80062fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fc:	0006      	movs	r6, r0
 80062fe:	000d      	movs	r5, r1
 8006300:	0014      	movs	r4, r2
 8006302:	2800      	cmp	r0, #0
 8006304:	d004      	beq.n	8006310 <__swbuf_r+0x16>
 8006306:	6a03      	ldr	r3, [r0, #32]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <__swbuf_r+0x16>
 800630c:	f7ff fa6a 	bl	80057e4 <__sinit>
 8006310:	69a3      	ldr	r3, [r4, #24]
 8006312:	60a3      	str	r3, [r4, #8]
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	071b      	lsls	r3, r3, #28
 8006318:	d502      	bpl.n	8006320 <__swbuf_r+0x26>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <__swbuf_r+0x3a>
 8006320:	0021      	movs	r1, r4
 8006322:	0030      	movs	r0, r6
 8006324:	f000 f82c 	bl	8006380 <__swsetup_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	d003      	beq.n	8006334 <__swbuf_r+0x3a>
 800632c:	2501      	movs	r5, #1
 800632e:	426d      	negs	r5, r5
 8006330:	0028      	movs	r0, r5
 8006332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	b2ef      	uxtb	r7, r5
 800633a:	1ac0      	subs	r0, r0, r3
 800633c:	6963      	ldr	r3, [r4, #20]
 800633e:	b2ed      	uxtb	r5, r5
 8006340:	4283      	cmp	r3, r0
 8006342:	dc05      	bgt.n	8006350 <__swbuf_r+0x56>
 8006344:	0021      	movs	r1, r4
 8006346:	0030      	movs	r0, r6
 8006348:	f7ff ffac 	bl	80062a4 <_fflush_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	d1ed      	bne.n	800632c <__swbuf_r+0x32>
 8006350:	68a3      	ldr	r3, [r4, #8]
 8006352:	3001      	adds	r0, #1
 8006354:	3b01      	subs	r3, #1
 8006356:	60a3      	str	r3, [r4, #8]
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	701f      	strb	r7, [r3, #0]
 8006360:	6963      	ldr	r3, [r4, #20]
 8006362:	4283      	cmp	r3, r0
 8006364:	d004      	beq.n	8006370 <__swbuf_r+0x76>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	07db      	lsls	r3, r3, #31
 800636a:	d5e1      	bpl.n	8006330 <__swbuf_r+0x36>
 800636c:	2d0a      	cmp	r5, #10
 800636e:	d1df      	bne.n	8006330 <__swbuf_r+0x36>
 8006370:	0021      	movs	r1, r4
 8006372:	0030      	movs	r0, r6
 8006374:	f7ff ff96 	bl	80062a4 <_fflush_r>
 8006378:	2800      	cmp	r0, #0
 800637a:	d0d9      	beq.n	8006330 <__swbuf_r+0x36>
 800637c:	e7d6      	b.n	800632c <__swbuf_r+0x32>
	...

08006380 <__swsetup_r>:
 8006380:	4b2d      	ldr	r3, [pc, #180]	@ (8006438 <__swsetup_r+0xb8>)
 8006382:	b570      	push	{r4, r5, r6, lr}
 8006384:	0005      	movs	r5, r0
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	000c      	movs	r4, r1
 800638a:	2800      	cmp	r0, #0
 800638c:	d004      	beq.n	8006398 <__swsetup_r+0x18>
 800638e:	6a03      	ldr	r3, [r0, #32]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <__swsetup_r+0x18>
 8006394:	f7ff fa26 	bl	80057e4 <__sinit>
 8006398:	230c      	movs	r3, #12
 800639a:	5ee2      	ldrsh	r2, [r4, r3]
 800639c:	0713      	lsls	r3, r2, #28
 800639e:	d423      	bmi.n	80063e8 <__swsetup_r+0x68>
 80063a0:	06d3      	lsls	r3, r2, #27
 80063a2:	d407      	bmi.n	80063b4 <__swsetup_r+0x34>
 80063a4:	2309      	movs	r3, #9
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	2340      	movs	r3, #64	@ 0x40
 80063aa:	2001      	movs	r0, #1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	4240      	negs	r0, r0
 80063b2:	e03a      	b.n	800642a <__swsetup_r+0xaa>
 80063b4:	0752      	lsls	r2, r2, #29
 80063b6:	d513      	bpl.n	80063e0 <__swsetup_r+0x60>
 80063b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ba:	2900      	cmp	r1, #0
 80063bc:	d008      	beq.n	80063d0 <__swsetup_r+0x50>
 80063be:	0023      	movs	r3, r4
 80063c0:	3344      	adds	r3, #68	@ 0x44
 80063c2:	4299      	cmp	r1, r3
 80063c4:	d002      	beq.n	80063cc <__swsetup_r+0x4c>
 80063c6:	0028      	movs	r0, r5
 80063c8:	f7ff fb28 	bl	8005a1c <_free_r>
 80063cc:	2300      	movs	r3, #0
 80063ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80063d0:	2224      	movs	r2, #36	@ 0x24
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	4393      	bics	r3, r2
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	2300      	movs	r3, #0
 80063da:	6063      	str	r3, [r4, #4]
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	2308      	movs	r3, #8
 80063e2:	89a2      	ldrh	r2, [r4, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <__swsetup_r+0x86>
 80063ee:	21a0      	movs	r1, #160	@ 0xa0
 80063f0:	2280      	movs	r2, #128	@ 0x80
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	0089      	lsls	r1, r1, #2
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	400b      	ands	r3, r1
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <__swsetup_r+0x86>
 80063fe:	0021      	movs	r1, r4
 8006400:	0028      	movs	r0, r5
 8006402:	f000 f863 	bl	80064cc <__smakebuf_r>
 8006406:	230c      	movs	r3, #12
 8006408:	5ee2      	ldrsh	r2, [r4, r3]
 800640a:	2101      	movs	r1, #1
 800640c:	0013      	movs	r3, r2
 800640e:	400b      	ands	r3, r1
 8006410:	420a      	tst	r2, r1
 8006412:	d00b      	beq.n	800642c <__swsetup_r+0xac>
 8006414:	2300      	movs	r3, #0
 8006416:	60a3      	str	r3, [r4, #8]
 8006418:	6963      	ldr	r3, [r4, #20]
 800641a:	425b      	negs	r3, r3
 800641c:	61a3      	str	r3, [r4, #24]
 800641e:	2000      	movs	r0, #0
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	4283      	cmp	r3, r0
 8006424:	d101      	bne.n	800642a <__swsetup_r+0xaa>
 8006426:	0613      	lsls	r3, r2, #24
 8006428:	d4be      	bmi.n	80063a8 <__swsetup_r+0x28>
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	0791      	lsls	r1, r2, #30
 800642e:	d400      	bmi.n	8006432 <__swsetup_r+0xb2>
 8006430:	6963      	ldr	r3, [r4, #20]
 8006432:	60a3      	str	r3, [r4, #8]
 8006434:	e7f3      	b.n	800641e <__swsetup_r+0x9e>
 8006436:	46c0      	nop			@ (mov r8, r8)
 8006438:	2000002c 	.word	0x2000002c

0800643c <_sbrk_r>:
 800643c:	2300      	movs	r3, #0
 800643e:	b570      	push	{r4, r5, r6, lr}
 8006440:	4d06      	ldr	r5, [pc, #24]	@ (800645c <_sbrk_r+0x20>)
 8006442:	0004      	movs	r4, r0
 8006444:	0008      	movs	r0, r1
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	f7fa fdf4 	bl	8001034 <_sbrk>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d103      	bne.n	8006458 <_sbrk_r+0x1c>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d000      	beq.n	8006458 <_sbrk_r+0x1c>
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	bd70      	pop	{r4, r5, r6, pc}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	200012ac 	.word	0x200012ac

08006460 <memchr>:
 8006460:	b2c9      	uxtb	r1, r1
 8006462:	1882      	adds	r2, r0, r2
 8006464:	4290      	cmp	r0, r2
 8006466:	d101      	bne.n	800646c <memchr+0xc>
 8006468:	2000      	movs	r0, #0
 800646a:	4770      	bx	lr
 800646c:	7803      	ldrb	r3, [r0, #0]
 800646e:	428b      	cmp	r3, r1
 8006470:	d0fb      	beq.n	800646a <memchr+0xa>
 8006472:	3001      	adds	r0, #1
 8006474:	e7f6      	b.n	8006464 <memchr+0x4>
	...

08006478 <__swhatbuf_r>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	000e      	movs	r6, r1
 800647c:	001d      	movs	r5, r3
 800647e:	230e      	movs	r3, #14
 8006480:	5ec9      	ldrsh	r1, [r1, r3]
 8006482:	0014      	movs	r4, r2
 8006484:	b096      	sub	sp, #88	@ 0x58
 8006486:	2900      	cmp	r1, #0
 8006488:	da0c      	bge.n	80064a4 <__swhatbuf_r+0x2c>
 800648a:	89b2      	ldrh	r2, [r6, #12]
 800648c:	2380      	movs	r3, #128	@ 0x80
 800648e:	0011      	movs	r1, r2
 8006490:	4019      	ands	r1, r3
 8006492:	421a      	tst	r2, r3
 8006494:	d114      	bne.n	80064c0 <__swhatbuf_r+0x48>
 8006496:	2380      	movs	r3, #128	@ 0x80
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	2000      	movs	r0, #0
 800649c:	6029      	str	r1, [r5, #0]
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	b016      	add	sp, #88	@ 0x58
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	466a      	mov	r2, sp
 80064a6:	f000 f853 	bl	8006550 <_fstat_r>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	dbed      	blt.n	800648a <__swhatbuf_r+0x12>
 80064ae:	23f0      	movs	r3, #240	@ 0xf0
 80064b0:	9901      	ldr	r1, [sp, #4]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	4019      	ands	r1, r3
 80064b6:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <__swhatbuf_r+0x50>)
 80064b8:	18c9      	adds	r1, r1, r3
 80064ba:	424b      	negs	r3, r1
 80064bc:	4159      	adcs	r1, r3
 80064be:	e7ea      	b.n	8006496 <__swhatbuf_r+0x1e>
 80064c0:	2100      	movs	r1, #0
 80064c2:	2340      	movs	r3, #64	@ 0x40
 80064c4:	e7e9      	b.n	800649a <__swhatbuf_r+0x22>
 80064c6:	46c0      	nop			@ (mov r8, r8)
 80064c8:	ffffe000 	.word	0xffffe000

080064cc <__smakebuf_r>:
 80064cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ce:	2602      	movs	r6, #2
 80064d0:	898b      	ldrh	r3, [r1, #12]
 80064d2:	0005      	movs	r5, r0
 80064d4:	000c      	movs	r4, r1
 80064d6:	b085      	sub	sp, #20
 80064d8:	4233      	tst	r3, r6
 80064da:	d007      	beq.n	80064ec <__smakebuf_r+0x20>
 80064dc:	0023      	movs	r3, r4
 80064de:	3347      	adds	r3, #71	@ 0x47
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	2301      	movs	r3, #1
 80064e6:	6163      	str	r3, [r4, #20]
 80064e8:	b005      	add	sp, #20
 80064ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ec:	ab03      	add	r3, sp, #12
 80064ee:	aa02      	add	r2, sp, #8
 80064f0:	f7ff ffc2 	bl	8006478 <__swhatbuf_r>
 80064f4:	9f02      	ldr	r7, [sp, #8]
 80064f6:	9001      	str	r0, [sp, #4]
 80064f8:	0039      	movs	r1, r7
 80064fa:	0028      	movs	r0, r5
 80064fc:	f7ff fafa 	bl	8005af4 <_malloc_r>
 8006500:	2800      	cmp	r0, #0
 8006502:	d108      	bne.n	8006516 <__smakebuf_r+0x4a>
 8006504:	220c      	movs	r2, #12
 8006506:	5ea3      	ldrsh	r3, [r4, r2]
 8006508:	059a      	lsls	r2, r3, #22
 800650a:	d4ed      	bmi.n	80064e8 <__smakebuf_r+0x1c>
 800650c:	2203      	movs	r2, #3
 800650e:	4393      	bics	r3, r2
 8006510:	431e      	orrs	r6, r3
 8006512:	81a6      	strh	r6, [r4, #12]
 8006514:	e7e2      	b.n	80064dc <__smakebuf_r+0x10>
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	89a2      	ldrh	r2, [r4, #12]
 800651a:	6020      	str	r0, [r4, #0]
 800651c:	4313      	orrs	r3, r2
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	6120      	str	r0, [r4, #16]
 8006524:	6167      	str	r7, [r4, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <__smakebuf_r+0x78>
 800652a:	0028      	movs	r0, r5
 800652c:	230e      	movs	r3, #14
 800652e:	5ee1      	ldrsh	r1, [r4, r3]
 8006530:	f000 f820 	bl	8006574 <_isatty_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	d005      	beq.n	8006544 <__smakebuf_r+0x78>
 8006538:	2303      	movs	r3, #3
 800653a:	89a2      	ldrh	r2, [r4, #12]
 800653c:	439a      	bics	r2, r3
 800653e:	3b02      	subs	r3, #2
 8006540:	4313      	orrs	r3, r2
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	9a01      	ldr	r2, [sp, #4]
 8006548:	4313      	orrs	r3, r2
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	e7cc      	b.n	80064e8 <__smakebuf_r+0x1c>
	...

08006550 <_fstat_r>:
 8006550:	2300      	movs	r3, #0
 8006552:	b570      	push	{r4, r5, r6, lr}
 8006554:	4d06      	ldr	r5, [pc, #24]	@ (8006570 <_fstat_r+0x20>)
 8006556:	0004      	movs	r4, r0
 8006558:	0008      	movs	r0, r1
 800655a:	0011      	movs	r1, r2
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	f7fa fd46 	bl	8000fee <_fstat>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d103      	bne.n	800656e <_fstat_r+0x1e>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d000      	beq.n	800656e <_fstat_r+0x1e>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	200012ac 	.word	0x200012ac

08006574 <_isatty_r>:
 8006574:	2300      	movs	r3, #0
 8006576:	b570      	push	{r4, r5, r6, lr}
 8006578:	4d06      	ldr	r5, [pc, #24]	@ (8006594 <_isatty_r+0x20>)
 800657a:	0004      	movs	r4, r0
 800657c:	0008      	movs	r0, r1
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	f7fa fd43 	bl	800100a <_isatty>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d103      	bne.n	8006590 <_isatty_r+0x1c>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d000      	beq.n	8006590 <_isatty_r+0x1c>
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	bd70      	pop	{r4, r5, r6, pc}
 8006592:	46c0      	nop			@ (mov r8, r8)
 8006594:	200012ac 	.word	0x200012ac

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
