
cv05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f90  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005318  08005318  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005318  08005318  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005318  08005318  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005318  08005318  00006318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005320  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000068  08005388  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08005388  00007440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5b9  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d70  00000000  00000000  00012649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  000143c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d6  00000000  00000000  00014dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b75  00000000  00000000  000155ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e490  00000000  00000000  00026123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fd13  00000000  00000000  000345b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000942c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  0009430c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000971dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005038 	.word	0x08005038

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005038 	.word	0x08005038

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char const *buf, int n) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) (buf), n, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <_write+0x28>)
 800024c:	f002 ff0c 	bl	8003068 <HAL_UART_Transmit>
	return n;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	2000011c 	.word	0x2000011c

08000260 <uart_process_command>:

static void uart_process_command(char *cmd) {
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b08e      	sub	sp, #56	@ 0x38
 8000264:	af04      	add	r7, sp, #16
 8000266:	6078      	str	r0, [r7, #4]

	char *token;
	uint16_t addr;
	uint8_t value;
	token = strtok(cmd, " ");
 8000268:	4aa7      	ldr	r2, [pc, #668]	@ (8000508 <uart_process_command+0x2a8>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	0011      	movs	r1, r2
 800026e:	0018      	movs	r0, r3
 8000270:	f004 f82a 	bl	80042c8 <strtok>
 8000274:	0003      	movs	r3, r0
 8000276:	623b      	str	r3, [r7, #32]
	if (strcasecmp(token, "HELLO") == 0) {
 8000278:	4aa4      	ldr	r2, [pc, #656]	@ (800050c <uart_process_command+0x2ac>)
 800027a:	6a3b      	ldr	r3, [r7, #32]
 800027c:	0011      	movs	r1, r2
 800027e:	0018      	movs	r0, r3
 8000280:	f004 f808 	bl	8004294 <strcasecmp>
 8000284:	1e03      	subs	r3, r0, #0
 8000286:	d104      	bne.n	8000292 <uart_process_command+0x32>
		printf("Communication OK\n");
 8000288:	4ba1      	ldr	r3, [pc, #644]	@ (8000510 <uart_process_command+0x2b0>)
 800028a:	0018      	movs	r0, r3
 800028c:	f003 ff04 	bl	8004098 <puts>
			printf("%d ", dump[addr]);
		}
		printf("\n");

	}
}
 8000290:	e135      	b.n	80004fe <uart_process_command+0x29e>
	else if (strcasecmp(token, "LED1") == 0) {
 8000292:	4aa0      	ldr	r2, [pc, #640]	@ (8000514 <uart_process_command+0x2b4>)
 8000294:	6a3b      	ldr	r3, [r7, #32]
 8000296:	0011      	movs	r1, r2
 8000298:	0018      	movs	r0, r3
 800029a:	f003 fffb 	bl	8004294 <strcasecmp>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d12a      	bne.n	80002f8 <uart_process_command+0x98>
		token = strtok(NULL, " ");
 80002a2:	4b99      	ldr	r3, [pc, #612]	@ (8000508 <uart_process_command+0x2a8>)
 80002a4:	0019      	movs	r1, r3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f004 f80e 	bl	80042c8 <strtok>
 80002ac:	0003      	movs	r3, r0
 80002ae:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0) {
 80002b0:	4a99      	ldr	r2, [pc, #612]	@ (8000518 <uart_process_command+0x2b8>)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f003 ffec 	bl	8004294 <strcasecmp>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d107      	bne.n	80002d0 <uart_process_command+0x70>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80002c0:	2390      	movs	r3, #144	@ 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2201      	movs	r2, #1
 80002c6:	2110      	movs	r1, #16
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 f998 	bl	80015fe <HAL_GPIO_WritePin>
 80002ce:	e00e      	b.n	80002ee <uart_process_command+0x8e>
		} else if (strcasecmp(token, "OFF") == 0) {
 80002d0:	4a92      	ldr	r2, [pc, #584]	@ (800051c <uart_process_command+0x2bc>)
 80002d2:	6a3b      	ldr	r3, [r7, #32]
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f003 ffdc 	bl	8004294 <strcasecmp>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d106      	bne.n	80002ee <uart_process_command+0x8e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80002e0:	2390      	movs	r3, #144	@ 0x90
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f988 	bl	80015fe <HAL_GPIO_WritePin>
		printf("OK\n");
 80002ee:	4b8c      	ldr	r3, [pc, #560]	@ (8000520 <uart_process_command+0x2c0>)
 80002f0:	0018      	movs	r0, r3
 80002f2:	f003 fed1 	bl	8004098 <puts>
}
 80002f6:	e102      	b.n	80004fe <uart_process_command+0x29e>
	else if (strcasecmp(token, "LED2") == 0) {
 80002f8:	4a8a      	ldr	r2, [pc, #552]	@ (8000524 <uart_process_command+0x2c4>)
 80002fa:	6a3b      	ldr	r3, [r7, #32]
 80002fc:	0011      	movs	r1, r2
 80002fe:	0018      	movs	r0, r3
 8000300:	f003 ffc8 	bl	8004294 <strcasecmp>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d128      	bne.n	800035a <uart_process_command+0xfa>
		token = strtok(NULL, " ");
 8000308:	4b7f      	ldr	r3, [pc, #508]	@ (8000508 <uart_process_command+0x2a8>)
 800030a:	0019      	movs	r1, r3
 800030c:	2000      	movs	r0, #0
 800030e:	f003 ffdb 	bl	80042c8 <strtok>
 8000312:	0003      	movs	r3, r0
 8000314:	623b      	str	r3, [r7, #32]
		if (strcasecmp(token, "ON") == 0) {
 8000316:	4a80      	ldr	r2, [pc, #512]	@ (8000518 <uart_process_command+0x2b8>)
 8000318:	6a3b      	ldr	r3, [r7, #32]
 800031a:	0011      	movs	r1, r2
 800031c:	0018      	movs	r0, r3
 800031e:	f003 ffb9 	bl	8004294 <strcasecmp>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d106      	bne.n	8000334 <uart_process_command+0xd4>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000326:	4b80      	ldr	r3, [pc, #512]	@ (8000528 <uart_process_command+0x2c8>)
 8000328:	2201      	movs	r2, #1
 800032a:	2101      	movs	r1, #1
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f966 	bl	80015fe <HAL_GPIO_WritePin>
 8000332:	e00d      	b.n	8000350 <uart_process_command+0xf0>
		} else if (strcasecmp(token, "OFF") == 0) {
 8000334:	4a79      	ldr	r2, [pc, #484]	@ (800051c <uart_process_command+0x2bc>)
 8000336:	6a3b      	ldr	r3, [r7, #32]
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f003 ffaa 	bl	8004294 <strcasecmp>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d105      	bne.n	8000350 <uart_process_command+0xf0>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000344:	4b78      	ldr	r3, [pc, #480]	@ (8000528 <uart_process_command+0x2c8>)
 8000346:	2200      	movs	r2, #0
 8000348:	2101      	movs	r1, #1
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f957 	bl	80015fe <HAL_GPIO_WritePin>
		printf("OK\n");
 8000350:	4b73      	ldr	r3, [pc, #460]	@ (8000520 <uart_process_command+0x2c0>)
 8000352:	0018      	movs	r0, r3
 8000354:	f003 fea0 	bl	8004098 <puts>
}
 8000358:	e0d1      	b.n	80004fe <uart_process_command+0x29e>
	else if (strcasecmp(token, "STATUS") == 0) {
 800035a:	4a74      	ldr	r2, [pc, #464]	@ (800052c <uart_process_command+0x2cc>)
 800035c:	6a3b      	ldr	r3, [r7, #32]
 800035e:	0011      	movs	r1, r2
 8000360:	0018      	movs	r0, r3
 8000362:	f003 ff97 	bl	8004294 <strcasecmp>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d121      	bne.n	80003ae <uart_process_command+0x14e>
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin)) {
 800036a:	2390      	movs	r3, #144	@ 0x90
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	2110      	movs	r1, #16
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f927 	bl	80015c4 <HAL_GPIO_ReadPin>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d004      	beq.n	8000384 <uart_process_command+0x124>
			printf("LED1 ON\n");
 800037a:	4b6d      	ldr	r3, [pc, #436]	@ (8000530 <uart_process_command+0x2d0>)
 800037c:	0018      	movs	r0, r3
 800037e:	f003 fe8b 	bl	8004098 <puts>
 8000382:	e003      	b.n	800038c <uart_process_command+0x12c>
			printf("LED1 OFF\n");
 8000384:	4b6b      	ldr	r3, [pc, #428]	@ (8000534 <uart_process_command+0x2d4>)
 8000386:	0018      	movs	r0, r3
 8000388:	f003 fe86 	bl	8004098 <puts>
		if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin)) {
 800038c:	4b66      	ldr	r3, [pc, #408]	@ (8000528 <uart_process_command+0x2c8>)
 800038e:	2101      	movs	r1, #1
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f917 	bl	80015c4 <HAL_GPIO_ReadPin>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d004      	beq.n	80003a4 <uart_process_command+0x144>
			printf("LED2 ON\n");
 800039a:	4b67      	ldr	r3, [pc, #412]	@ (8000538 <uart_process_command+0x2d8>)
 800039c:	0018      	movs	r0, r3
 800039e:	f003 fe7b 	bl	8004098 <puts>
}
 80003a2:	e0ac      	b.n	80004fe <uart_process_command+0x29e>
			printf("LED2 OFF\n");
 80003a4:	4b65      	ldr	r3, [pc, #404]	@ (800053c <uart_process_command+0x2dc>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f003 fe76 	bl	8004098 <puts>
}
 80003ac:	e0a7      	b.n	80004fe <uart_process_command+0x29e>
	else if (strcasecmp(token, "READ") == 0) {
 80003ae:	4a64      	ldr	r2, [pc, #400]	@ (8000540 <uart_process_command+0x2e0>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f003 ff6d 	bl	8004294 <strcasecmp>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d125      	bne.n	800040a <uart_process_command+0x1aa>
		addr = atoi(strtok(NULL, " "));
 80003be:	4b52      	ldr	r3, [pc, #328]	@ (8000508 <uart_process_command+0x2a8>)
 80003c0:	0019      	movs	r1, r3
 80003c2:	2000      	movs	r0, #0
 80003c4:	f003 ff80 	bl	80042c8 <strtok>
 80003c8:	0003      	movs	r3, r0
 80003ca:	0018      	movs	r0, r3
 80003cc:	f003 fc93 	bl	8003cf6 <atoi>
 80003d0:	0002      	movs	r2, r0
 80003d2:	2426      	movs	r4, #38	@ 0x26
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT,
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	881a      	ldrh	r2, [r3, #0]
 80003dc:	4859      	ldr	r0, [pc, #356]	@ (8000544 <uart_process_command+0x2e4>)
 80003de:	23fa      	movs	r3, #250	@ 0xfa
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	9302      	str	r3, [sp, #8]
 80003e4:	2301      	movs	r3, #1
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	251f      	movs	r5, #31
 80003ea:	197b      	adds	r3, r7, r5
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2302      	movs	r3, #2
 80003f0:	21a0      	movs	r1, #160	@ 0xa0
 80003f2:	f001 faf5 	bl	80019e0 <HAL_I2C_Mem_Read>
		printf("Address 0x000%x = 0x%x \n", addr, value);
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	8819      	ldrh	r1, [r3, #0]
 80003fa:	197b      	adds	r3, r7, r5
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	001a      	movs	r2, r3
 8000400:	4b51      	ldr	r3, [pc, #324]	@ (8000548 <uart_process_command+0x2e8>)
 8000402:	0018      	movs	r0, r3
 8000404:	f003 fdd8 	bl	8003fb8 <iprintf>
}
 8000408:	e079      	b.n	80004fe <uart_process_command+0x29e>
	else if (strcasecmp(token, "WRITE") == 0) {
 800040a:	4a50      	ldr	r2, [pc, #320]	@ (800054c <uart_process_command+0x2ec>)
 800040c:	6a3b      	ldr	r3, [r7, #32]
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f003 ff3f 	bl	8004294 <strcasecmp>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d139      	bne.n	800048e <uart_process_command+0x22e>
		addr = atoi(strtok(NULL, " "));
 800041a:	4b3b      	ldr	r3, [pc, #236]	@ (8000508 <uart_process_command+0x2a8>)
 800041c:	0019      	movs	r1, r3
 800041e:	2000      	movs	r0, #0
 8000420:	f003 ff52 	bl	80042c8 <strtok>
 8000424:	0003      	movs	r3, r0
 8000426:	0018      	movs	r0, r3
 8000428:	f003 fc65 	bl	8003cf6 <atoi>
 800042c:	0002      	movs	r2, r0
 800042e:	2426      	movs	r4, #38	@ 0x26
 8000430:	193b      	adds	r3, r7, r4
 8000432:	801a      	strh	r2, [r3, #0]
		value = atoi(strtok(NULL, " "));
 8000434:	4b34      	ldr	r3, [pc, #208]	@ (8000508 <uart_process_command+0x2a8>)
 8000436:	0019      	movs	r1, r3
 8000438:	2000      	movs	r0, #0
 800043a:	f003 ff45 	bl	80042c8 <strtok>
 800043e:	0003      	movs	r3, r0
 8000440:	0018      	movs	r0, r3
 8000442:	f003 fc58 	bl	8003cf6 <atoi>
 8000446:	0003      	movs	r3, r0
 8000448:	b2da      	uxtb	r2, r3
 800044a:	211f      	movs	r1, #31
 800044c:	187b      	adds	r3, r7, r1
 800044e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT,
 8000450:	193b      	adds	r3, r7, r4
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	483b      	ldr	r0, [pc, #236]	@ (8000544 <uart_process_command+0x2e4>)
 8000456:	23fa      	movs	r3, #250	@ 0xfa
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	2301      	movs	r3, #1
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	187b      	adds	r3, r7, r1
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2302      	movs	r3, #2
 8000466:	21a0      	movs	r1, #160	@ 0xa0
 8000468:	f001 f98c 	bl	8001784 <HAL_I2C_Mem_Write>
		while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDR, 300, 1000)
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	23fa      	movs	r3, #250	@ 0xfa
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	2296      	movs	r2, #150	@ 0x96
 8000474:	0052      	lsls	r2, r2, #1
 8000476:	4833      	ldr	r0, [pc, #204]	@ (8000544 <uart_process_command+0x2e4>)
 8000478:	21a0      	movs	r1, #160	@ 0xa0
 800047a:	f001 fbe5 	bl	8001c48 <HAL_I2C_IsDeviceReady>
 800047e:	0003      	movs	r3, r0
				== HAL_TIMEOUT) {
 8000480:	2b03      	cmp	r3, #3
 8000482:	d0f4      	beq.n	800046e <uart_process_command+0x20e>
		printf("Done \n");
 8000484:	4b32      	ldr	r3, [pc, #200]	@ (8000550 <uart_process_command+0x2f0>)
 8000486:	0018      	movs	r0, r3
 8000488:	f003 fe06 	bl	8004098 <puts>
}
 800048c:	e037      	b.n	80004fe <uart_process_command+0x29e>
	else if (strcasecmp(token, "DUMP") == 0) {
 800048e:	4a31      	ldr	r2, [pc, #196]	@ (8000554 <uart_process_command+0x2f4>)
 8000490:	6a3b      	ldr	r3, [r7, #32]
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f003 fefd 	bl	8004294 <strcasecmp>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d12f      	bne.n	80004fe <uart_process_command+0x29e>
		addr = 0;
 800049e:	2426      	movs	r4, #38	@ 0x26
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, dump,16, 1000);
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	881a      	ldrh	r2, [r3, #0]
 80004aa:	4826      	ldr	r0, [pc, #152]	@ (8000544 <uart_process_command+0x2e4>)
 80004ac:	23fa      	movs	r3, #250	@ 0xfa
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	9302      	str	r3, [sp, #8]
 80004b2:	2310      	movs	r3, #16
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2302      	movs	r3, #2
 80004be:	21a0      	movs	r1, #160	@ 0xa0
 80004c0:	f001 fa8e 	bl	80019e0 <HAL_I2C_Mem_Read>
		for (addr = 0; addr < 16; addr++) {
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2200      	movs	r2, #0
 80004c8:	801a      	strh	r2, [r3, #0]
 80004ca:	e010      	b.n	80004ee <uart_process_command+0x28e>
			printf("%d ", dump[addr]);
 80004cc:	2426      	movs	r4, #38	@ 0x26
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	220c      	movs	r2, #12
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	5cd3      	ldrb	r3, [r2, r3]
 80004d8:	001a      	movs	r2, r3
 80004da:	4b1f      	ldr	r3, [pc, #124]	@ (8000558 <uart_process_command+0x2f8>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f003 fd6a 	bl	8003fb8 <iprintf>
		for (addr = 0; addr < 16; addr++) {
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	881a      	ldrh	r2, [r3, #0]
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	3201      	adds	r2, #1
 80004ec:	801a      	strh	r2, [r3, #0]
 80004ee:	2326      	movs	r3, #38	@ 0x26
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d9e9      	bls.n	80004cc <uart_process_command+0x26c>
		printf("\n");
 80004f8:	200a      	movs	r0, #10
 80004fa:	f003 fd6d 	bl	8003fd8 <putchar>
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b00a      	add	sp, #40	@ 0x28
 8000504:	bdb0      	pop	{r4, r5, r7, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	08005050 	.word	0x08005050
 800050c:	08005054 	.word	0x08005054
 8000510:	0800505c 	.word	0x0800505c
 8000514:	08005070 	.word	0x08005070
 8000518:	08005078 	.word	0x08005078
 800051c:	0800507c 	.word	0x0800507c
 8000520:	08005080 	.word	0x08005080
 8000524:	08005084 	.word	0x08005084
 8000528:	48000400 	.word	0x48000400
 800052c:	0800508c 	.word	0x0800508c
 8000530:	08005094 	.word	0x08005094
 8000534:	0800509c 	.word	0x0800509c
 8000538:	080050a8 	.word	0x080050a8
 800053c:	080050b0 	.word	0x080050b0
 8000540:	080050bc 	.word	0x080050bc
 8000544:	200000c8 	.word	0x200000c8
 8000548:	080050c4 	.word	0x080050c4
 800054c:	080050e0 	.word	0x080050e0
 8000550:	080050e8 	.word	0x080050e8
 8000554:	080050f0 	.word	0x080050f0
 8000558:	080050f8 	.word	0x080050f8

0800055c <uart_byte_available>:

static void uart_byte_available(uint8_t c) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	0002      	movs	r2, r0
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126)
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <uart_byte_available+0x74>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	2bff      	cmp	r3, #255	@ 0xff
 800056e:	d812      	bhi.n	8000596 <uart_byte_available+0x3a>
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b1f      	cmp	r3, #31
 8000576:	d90e      	bls.n	8000596 <uart_byte_available+0x3a>
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b7e      	cmp	r3, #126	@ 0x7e
 800057e:	d80a      	bhi.n	8000596 <uart_byte_available+0x3a>
		data[cnt++] = c;
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <uart_byte_available+0x74>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	b291      	uxth	r1, r2
 8000588:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <uart_byte_available+0x74>)
 800058a:	8011      	strh	r1, [r2, #0]
 800058c:	0019      	movs	r1, r3
 800058e:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <uart_byte_available+0x78>)
 8000590:	1dfa      	adds	r2, r7, #7
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0) {
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b0a      	cmp	r3, #10
 800059c:	d003      	beq.n	80005a6 <uart_byte_available+0x4a>
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b0d      	cmp	r3, #13
 80005a4:	d110      	bne.n	80005c8 <uart_byte_available+0x6c>
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <uart_byte_available+0x74>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00c      	beq.n	80005c8 <uart_byte_available+0x6c>
		data[cnt] = '\0';
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <uart_byte_available+0x74>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	001a      	movs	r2, r3
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <uart_byte_available+0x78>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <uart_byte_available+0x78>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f7ff fe4f 	bl	8000260 <uart_process_command>
		cnt = 0;
 80005c2:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <uart_byte_available+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	801a      	strh	r2, [r3, #0]
	}
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001e8 	.word	0x200001e8
 80005d4:	200001ec 	.word	0x200001ec

080005d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005de:	f000 fba7 	bl	8000d30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e2:	f000 f83d 	bl	8000660 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e6:	f000 f92b 	bl	8000840 <MX_GPIO_Init>
	MX_DMA_Init();
 80005ea:	f000 f90b 	bl	8000804 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80005ee:	f000 f8d9 	bl	80007a4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80005f2:	f000 f897 	bl	8000724 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 80005f6:	4916      	ldr	r1, [pc, #88]	@ (8000650 <main+0x78>)
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <main+0x7c>)
 80005fa:	2240      	movs	r2, #64	@ 0x40
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 fdd2 	bl	80031a6 <HAL_UART_Receive_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000602:	e019      	b.n	8000638 <main+0x60>
			uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000604:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <main+0x80>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	0019      	movs	r1, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	4a10      	ldr	r2, [pc, #64]	@ (8000650 <main+0x78>)
 8000610:	5c52      	ldrb	r2, [r2, r1]
 8000612:	701a      	strb	r2, [r3, #0]
			// increase read pointer
			if (++uart_rx_read_ptr >= RX_BUFFER_LEN)
 8000614:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <main+0x80>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	3301      	adds	r3, #1
 800061c:	b29b      	uxth	r3, r3
 800061e:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <main+0x80>)
 8000620:	1c19      	adds	r1, r3, #0
 8000622:	8011      	strh	r1, [r2, #0]
 8000624:	2b3f      	cmp	r3, #63	@ 0x3f
 8000626:	d902      	bls.n	800062e <main+0x56>
				uart_rx_read_ptr = 0;
 8000628:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <main+0x80>)
 800062a:	2200      	movs	r2, #0
 800062c:	801a      	strh	r2, [r3, #0]
			// process every received byte with the RX state machine
			uart_byte_available(b);
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff ff92 	bl	800055c <uart_byte_available>
		while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <main+0x80>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	b29b      	uxth	r3, r3
 800063e:	0019      	movs	r1, r3
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <main+0x84>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	2240      	movs	r2, #64	@ 0x40
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	4299      	cmp	r1, r3
 800064c:	d1da      	bne.n	8000604 <main+0x2c>
 800064e:	e7f3      	b.n	8000638 <main+0x60>
 8000650:	20000084 	.word	0x20000084
 8000654:	2000011c 	.word	0x2000011c
 8000658:	200000c4 	.word	0x200000c4
 800065c:	200001a4 	.word	0x200001a4

08000660 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b095      	sub	sp, #84	@ 0x54
 8000664:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000666:	2420      	movs	r4, #32
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2330      	movs	r3, #48	@ 0x30
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fe07 	bl	8004284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000676:	2310      	movs	r3, #16
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2310      	movs	r3, #16
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f003 fdff 	bl	8004284 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	2310      	movs	r3, #16
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f003 fdf8 	bl	8004284 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	0021      	movs	r1, r4
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2201      	movs	r2, #1
 80006a0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2210      	movs	r2, #16
 80006a6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2202      	movs	r2, #2
 80006ac:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	22a0      	movs	r2, #160	@ 0xa0
 80006b8:	0392      	lsls	r2, r2, #14
 80006ba:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 ff4f 	bl	8002568 <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x72>
		Error_Handler();
 80006ce:	f000 f949 	bl	8000964 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006d2:	2110      	movs	r1, #16
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2207      	movs	r2, #7
 80006d8:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2101      	movs	r1, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 fa53 	bl	8002b9c <HAL_RCC_ClockConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9e>
		Error_Handler();
 80006fa:	f000 f933 	bl	8000964 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006fe:	003b      	movs	r3, r7
 8000700:	2220      	movs	r2, #32
 8000702:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800070a:	003b      	movs	r3, r7
 800070c:	0018      	movs	r0, r3
 800070e:	f002 fb89 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xba>
		Error_Handler();
 8000716:	f000 f925 	bl	8000964 <Error_Handler>
	}
}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b015      	add	sp, #84	@ 0x54
 8000720:	bd90      	pop	{r4, r7, pc}
	...

08000724 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x7c>)
 8000732:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_I2C1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000760:	0018      	movs	r0, r3
 8000762:	f000 ff69 	bl	8001638 <HAL_I2C_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800076a:	f000 f8fb 	bl	8000964 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fe60 	bl	8002438 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800077c:	f000 f8f2 	bl	8000964 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fea3 	bl	80024d0 <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800078e:	f000 f8e9 	bl	8000964 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000c8 	.word	0x200000c8
 800079c:	40005400 	.word	0x40005400
 80007a0:	00201d2b 	.word	0x00201d2b

080007a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	2296      	movs	r2, #150	@ 0x96
 80007b2:	0212      	lsls	r2, r2, #8
 80007b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <MX_USART2_UART_Init+0x58>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fbe9 	bl	8002fc0 <HAL_UART_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007f2:	f000 f8b7 	bl	8000964 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000011c 	.word	0x2000011c
 8000800:	40004400 	.word	0x40004400

08000804 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_DMA_Init+0x38>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_DMA_Init+0x38>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_DMA_Init+0x38>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	200b      	movs	r0, #11
 8000828:	f000 fb92 	bl	8000f50 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800082c:	200b      	movs	r0, #11
 800082e:	f000 fba4 	bl	8000f7a <HAL_NVIC_EnableIRQ>

}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	40021000 	.word	0x40021000

08000840 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b08b      	sub	sp, #44	@ 0x2c
 8000844:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000846:	2414      	movs	r4, #20
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2314      	movs	r3, #20
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f003 fd17 	bl	8004284 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b40      	ldr	r3, [pc, #256]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <MX_GPIO_Init+0x118>)
 800085c:	2180      	movs	r1, #128	@ 0x80
 800085e:	0309      	lsls	r1, r1, #12
 8000860:	430a      	orrs	r2, r1
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	4b3c      	ldr	r3, [pc, #240]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000866:	695a      	ldr	r2, [r3, #20]
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	031b      	lsls	r3, r3, #12
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000872:	4b39      	ldr	r3, [pc, #228]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b38      	ldr	r3, [pc, #224]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000878:	2180      	movs	r1, #128	@ 0x80
 800087a:	03c9      	lsls	r1, r1, #15
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b35      	ldr	r3, [pc, #212]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	03db      	lsls	r3, r3, #15
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b32      	ldr	r3, [pc, #200]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	4b31      	ldr	r3, [pc, #196]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	0289      	lsls	r1, r1, #10
 8000898:	430a      	orrs	r2, r1
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <MX_GPIO_Init+0x118>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	029b      	lsls	r3, r3, #10
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <MX_GPIO_Init+0x118>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <MX_GPIO_Init+0x118>)
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	02c9      	lsls	r1, r1, #11
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <MX_GPIO_Init+0x118>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	2380      	movs	r3, #128	@ 0x80
 80008be:	02db      	lsls	r3, r3, #11
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED1_Pin | LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2390      	movs	r3, #144	@ 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2200      	movs	r2, #0
 80008cc:	2130      	movs	r1, #48	@ 0x30
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fe95 	bl	80015fe <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80008d4:	4b21      	ldr	r3, [pc, #132]	@ (800095c <MX_GPIO_Init+0x11c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fe8f 	bl	80015fe <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	0192      	lsls	r2, r2, #6
 80008e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2284      	movs	r2, #132	@ 0x84
 80008ec:	0392      	lsls	r2, r2, #14
 80008ee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <MX_GPIO_Init+0x120>)
 80008fa:	0019      	movs	r1, r3
 80008fc:	0010      	movs	r0, r2
 80008fe:	f000 fcf1 	bl	80012e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LD2_Pin;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2230      	movs	r2, #48	@ 0x30
 8000906:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2201      	movs	r2, #1
 800090c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	193a      	adds	r2, r7, r4
 800091c:	2390      	movs	r3, #144	@ 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fcde 	bl	80012e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 8000928:	0021      	movs	r1, r4
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000942:	187b      	adds	r3, r7, r1
 8000944:	4a05      	ldr	r2, [pc, #20]	@ (800095c <MX_GPIO_Init+0x11c>)
 8000946:	0019      	movs	r1, r3
 8000948:	0010      	movs	r0, r2
 800094a:	f000 fccb 	bl	80012e4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b00b      	add	sp, #44	@ 0x2c
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400
 8000960:	48000800 	.word	0x48000800

08000964 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x44>)
 8000978:	699a      	ldr	r2, [r3, #24]
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_MspInit+0x44>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	619a      	str	r2, [r3, #24]
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_MspInit+0x44>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x44>)
 8000990:	69da      	ldr	r2, [r3, #28]
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_MspInit+0x44>)
 8000994:	2180      	movs	r1, #128	@ 0x80
 8000996:	0549      	lsls	r1, r1, #21
 8000998:	430a      	orrs	r2, r1
 800099a:	61da      	str	r2, [r3, #28]
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_MspInit+0x44>)
 800099e:	69da      	ldr	r2, [r3, #28]
 80009a0:	2380      	movs	r3, #128	@ 0x80
 80009a2:	055b      	lsls	r3, r3, #21
 80009a4:	4013      	ands	r3, r2
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b002      	add	sp, #8
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b08b      	sub	sp, #44	@ 0x2c
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	2414      	movs	r4, #20
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f003 fc5a 	bl	8004284 <memset>
  if(hi2c->Instance==I2C1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a48 <HAL_I2C_MspInit+0x90>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d132      	bne.n	8000a40 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <HAL_I2C_MspInit+0x94>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <HAL_I2C_MspInit+0x94>)
 80009e0:	2180      	movs	r1, #128	@ 0x80
 80009e2:	02c9      	lsls	r1, r1, #11
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <HAL_I2C_MspInit+0x94>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	02db      	lsls	r3, r3, #11
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	22c0      	movs	r2, #192	@ 0xc0
 80009fa:	0092      	lsls	r2, r2, #2
 80009fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	0021      	movs	r1, r4
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2212      	movs	r2, #18
 8000a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2201      	movs	r2, #1
 8000a16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <HAL_I2C_MspInit+0x98>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f000 fc60 	bl	80012e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_I2C_MspInit+0x94>)
 8000a26:	69da      	ldr	r2, [r3, #28]
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_I2C_MspInit+0x94>)
 8000a2a:	2180      	movs	r1, #128	@ 0x80
 8000a2c:	0389      	lsls	r1, r1, #14
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	61da      	str	r2, [r3, #28]
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_I2C_MspInit+0x94>)
 8000a34:	69da      	ldr	r2, [r3, #28]
 8000a36:	2380      	movs	r3, #128	@ 0x80
 8000a38:	039b      	lsls	r3, r3, #14
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b00b      	add	sp, #44	@ 0x2c
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000400 	.word	0x48000400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b08b      	sub	sp, #44	@ 0x2c
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	2414      	movs	r4, #20
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	0018      	movs	r0, r3
 8000a62:	2314      	movs	r3, #20
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f003 fc0c 	bl	8004284 <memset>
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a2f      	ldr	r2, [pc, #188]	@ (8000b30 <HAL_UART_MspInit+0xdc>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d158      	bne.n	8000b28 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b2f      	ldr	r3, [pc, #188]	@ (8000b34 <HAL_UART_MspInit+0xe0>)
 8000a78:	69da      	ldr	r2, [r3, #28]
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <HAL_UART_MspInit+0xe0>)
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	0289      	lsls	r1, r1, #10
 8000a80:	430a      	orrs	r2, r1
 8000a82:	61da      	str	r2, [r3, #28]
 8000a84:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <HAL_UART_MspInit+0xe0>)
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <HAL_UART_MspInit+0xe0>)
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <HAL_UART_MspInit+0xe0>)
 8000a98:	2180      	movs	r1, #128	@ 0x80
 8000a9a:	0289      	lsls	r1, r1, #10
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <HAL_UART_MspInit+0xe0>)
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	029b      	lsls	r3, r3, #10
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aae:	0021      	movs	r1, r4
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2202      	movs	r2, #2
 8000aba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2201      	movs	r2, #1
 8000acc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	187a      	adds	r2, r7, r1
 8000ad0:	2390      	movs	r3, #144	@ 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fc04 	bl	80012e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <HAL_UART_MspInit+0xe8>)
 8000ae0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000b02:	2220      	movs	r2, #32
 8000b04:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fa50 	bl	8000fb4 <HAL_DMA_Init>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000b18:	f7ff ff24 	bl	8000964 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000b20:	675a      	str	r2, [r3, #116]	@ 0x74
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_UART_MspInit+0xe4>)
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b00b      	add	sp, #44	@ 0x2c
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40021000 	.word	0x40021000
 8000b38:	200001a4 	.word	0x200001a4
 8000b3c:	40020058 	.word	0x40020058

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f92a 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fac8 	bl	8001110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	200001a4 	.word	0x200001a4

08000b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_kill>:

int _kill(int pid, int sig)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ba2:	f003 fc3f 	bl	8004424 <__errno>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	2216      	movs	r2, #22
 8000baa:	601a      	str	r2, [r3, #0]
  return -1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	425b      	negs	r3, r3
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_exit>:

void _exit (int status)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425a      	negs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ffe5 	bl	8000b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	e7fd      	b.n	8000bce <_exit+0x16>

08000bd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e00a      	b.n	8000bfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000be4:	e000      	b.n	8000be8 <_read+0x16>
 8000be6:	bf00      	nop
 8000be8:	0001      	movs	r1, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	60ba      	str	r2, [r7, #8]
 8000bf0:	b2ca      	uxtb	r2, r1
 8000bf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dbf0      	blt.n	8000be4 <_read+0x12>
  }

  return len;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	0192      	lsls	r2, r2, #6
 8000c30:	605a      	str	r2, [r3, #4]
  return 0;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_isatty>:

int _isatty(int file)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b004      	add	sp, #16
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f003 fbc6 	bl	8004424 <__errno>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	18d2      	adds	r2, r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <_sbrk+0x64>)
 8000cb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b006      	add	sp, #24
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20002000 	.word	0x20002000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	200002ec 	.word	0x200002ec
 8000ccc:	20000440 	.word	0x20000440

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce0:	f7ff fff6 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d0a:	f003 fb91 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0e:	f7ff fc63 	bl	80005d8 <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d20:	08005320 	.word	0x08005320
  ldr r2, =_sbss
 8000d24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d28:	20000440 	.word	0x20000440

08000d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_IRQHandler>
	...

08000d30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <HAL_Init+0x24>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_Init+0x24>)
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f000 f809 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d46:	f7ff fe13 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d62:	681c      	ldr	r4, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_InitTick+0x60>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	0019      	movs	r1, r3
 8000d6a:	23fa      	movs	r3, #250	@ 0xfa
 8000d6c:	0098      	lsls	r0, r3, #2
 8000d6e:	f7ff f9d5 	bl	800011c <__udivsi3>
 8000d72:	0003      	movs	r3, r0
 8000d74:	0019      	movs	r1, r3
 8000d76:	0020      	movs	r0, r4
 8000d78:	f7ff f9d0 	bl	800011c <__udivsi3>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f90b 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e00f      	b.n	8000dac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d80b      	bhi.n	8000daa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	2301      	movs	r3, #1
 8000d96:	425b      	negs	r3, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f8d8 	bl	8000f50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_InitTick+0x64>)
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b003      	add	sp, #12
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	18d2      	adds	r2, r2, r3
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200002f0 	.word	0x200002f0

08000de4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	@ (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	200002f0 	.word	0x200002f0

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0a:	d809      	bhi.n	8000e20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	001a      	movs	r2, r3
 8000e12:	231f      	movs	r3, #31
 8000e14:	401a      	ands	r2, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_EnableIRQ+0x30>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4091      	lsls	r1, r2
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
  }
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e40:	d828      	bhi.n	8000e94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e42:	4a2f      	ldr	r2, [pc, #188]	@ (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	33c0      	adds	r3, #192	@ 0xc0
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	589b      	ldr	r3, [r3, r2]
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	0011      	movs	r1, r2
 8000e58:	2203      	movs	r2, #3
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	21ff      	movs	r1, #255	@ 0xff
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	22ff      	movs	r2, #255	@ 0xff
 8000e70:	401a      	ands	r2, r3
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	2303      	movs	r3, #3
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	33c0      	adds	r3, #192	@ 0xc0
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e92:	e031      	b.n	8000ef8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <__NVIC_SetPriority+0xd8>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3306      	adds	r3, #6
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1dfa      	adds	r2, r7, #7
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	00d2      	lsls	r2, r2, #3
 8000eba:	21ff      	movs	r1, #255	@ 0xff
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	43d2      	mvns	r2, r2
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	22ff      	movs	r2, #255	@ 0xff
 8000ecc:	401a      	ands	r2, r3
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	4003      	ands	r3, r0
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <__NVIC_SetPriority+0xd8>)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	001c      	movs	r4, r3
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	4023      	ands	r3, r4
 8000ee8:	3b08      	subs	r3, #8
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	430a      	orrs	r2, r1
 8000eee:	3306      	adds	r3, #6
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	18c3      	adds	r3, r0, r3
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b003      	add	sp, #12
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	045b      	lsls	r3, r3, #17
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d301      	bcc.n	8000f20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e010      	b.n	8000f42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <SysTick_Config+0x44>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	3a01      	subs	r2, #1
 8000f26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f28:	2301      	movs	r3, #1
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff ff7c 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <SysTick_Config+0x44>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <SysTick_Config+0x44>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	1c02      	adds	r2, r0, #0
 8000f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	0002      	movs	r2, r0
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ff33 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ffaf 	bl	8000f08 <SysTick_Config>
 8000faa:	0003      	movs	r3, r0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e036      	b.n	8001038 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2221      	movs	r2, #33	@ 0x21
 8000fce:	2102      	movs	r1, #2
 8000fd0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <HAL_DMA_Init+0x8c>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f946 	bl	80012ac <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2221      	movs	r2, #33	@ 0x21
 800102a:	2101      	movs	r1, #1
 800102c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2220      	movs	r2, #32
 8001032:	2100      	movs	r1, #0
 8001034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b004      	add	sp, #16
 800103e:	bd80      	pop	{r7, pc}
 8001040:	ffffc00f 	.word	0xffffc00f

08001044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001052:	2317      	movs	r3, #23
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2220      	movs	r2, #32
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_DMA_Start_IT+0x24>
 8001064:	2302      	movs	r3, #2
 8001066:	e04f      	b.n	8001108 <HAL_DMA_Start_IT+0xc4>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2220      	movs	r2, #32
 800106c:	2101      	movs	r1, #1
 800106e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2221      	movs	r2, #33	@ 0x21
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d13a      	bne.n	80010f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2221      	movs	r2, #33	@ 0x21
 8001080:	2102      	movs	r1, #2
 8001082:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	438a      	bics	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 f8d7 	bl	8001254 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	210e      	movs	r1, #14
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e00f      	b.n	80010e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	210a      	movs	r1, #10
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2104      	movs	r1, #4
 80010dc:	438a      	bics	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2101      	movs	r1, #1
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2220      	movs	r2, #32
 80010f6:	2100      	movs	r1, #0
 80010f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010fa:	2317      	movs	r3, #23
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	2202      	movs	r2, #2
 8001100:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001102:	2317      	movs	r3, #23
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	781b      	ldrb	r3, [r3, #0]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b006      	add	sp, #24
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	2204      	movs	r2, #4
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	d024      	beq.n	8001182 <HAL_DMA_IRQHandler+0x72>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2204      	movs	r2, #4
 800113c:	4013      	ands	r3, r2
 800113e:	d020      	beq.n	8001182 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2220      	movs	r2, #32
 8001148:	4013      	ands	r3, r2
 800114a:	d107      	bne.n	800115c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2104      	movs	r1, #4
 8001158:	438a      	bics	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001164:	2104      	movs	r1, #4
 8001166:	4091      	lsls	r1, r2
 8001168:	000a      	movs	r2, r1
 800116a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <HAL_DMA_IRQHandler+0x66>
 8001174:	e06a      	b.n	800124c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	0010      	movs	r0, r2
 800117e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001180:	e064      	b.n	800124c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	2202      	movs	r2, #2
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	d02b      	beq.n	80011ea <HAL_DMA_IRQHandler+0xda>
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d027      	beq.n	80011ea <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2220      	movs	r2, #32
 80011a2:	4013      	ands	r3, r2
 80011a4:	d10b      	bne.n	80011be <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	210a      	movs	r1, #10
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2221      	movs	r2, #33	@ 0x21
 80011ba:	2101      	movs	r1, #1
 80011bc:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c6:	2102      	movs	r1, #2
 80011c8:	4091      	lsls	r1, r2
 80011ca:	000a      	movs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2220      	movs	r2, #32
 80011d2:	2100      	movs	r1, #0
 80011d4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d036      	beq.n	800124c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	0010      	movs	r0, r2
 80011e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011e8:	e030      	b.n	800124c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	2208      	movs	r2, #8
 80011f0:	409a      	lsls	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4013      	ands	r3, r2
 80011f8:	d028      	beq.n	800124c <HAL_DMA_IRQHandler+0x13c>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2208      	movs	r2, #8
 80011fe:	4013      	ands	r3, r2
 8001200:	d024      	beq.n	800124c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	210e      	movs	r1, #14
 800120e:	438a      	bics	r2, r1
 8001210:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800121a:	2101      	movs	r1, #1
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2221      	movs	r2, #33	@ 0x21
 800122c:	2101      	movs	r1, #1
 800122e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2220      	movs	r2, #32
 8001234:	2100      	movs	r1, #0
 8001236:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	0010      	movs	r0, r2
 8001248:	4798      	blx	r3
    }
  }
}
 800124a:	e7ff      	b.n	800124c <HAL_DMA_IRQHandler+0x13c>
 800124c:	46c0      	nop			@ (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b004      	add	sp, #16
 8001252:	bd80      	pop	{r7, pc}

08001254 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800126a:	2101      	movs	r1, #1
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b10      	cmp	r3, #16
 8001280:	d108      	bne.n	8001294 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001292:	e007      	b.n	80012a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	60da      	str	r2, [r3, #12]
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b004      	add	sp, #16
 80012aa:	bd80      	pop	{r7, pc}

080012ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <DMA_CalcBaseAndBitshift+0x30>)
 80012ba:	4694      	mov	ip, r2
 80012bc:	4463      	add	r3, ip
 80012be:	2114      	movs	r1, #20
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7fe ff2b 	bl	800011c <__udivsi3>
 80012c6:	0003      	movs	r3, r0
 80012c8:	009a      	lsls	r2, r3, #2
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <DMA_CalcBaseAndBitshift+0x34>)
 80012d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	bffdfff8 	.word	0xbffdfff8
 80012e0:	40020000 	.word	0x40020000

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e14f      	b.n	8001594 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4091      	lsls	r1, r2
 80012fe:	000a      	movs	r2, r1
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <HAL_GPIO_Init+0x28>
 800130a:	e140      	b.n	800158e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2203      	movs	r2, #3
 8001312:	4013      	ands	r3, r2
 8001314:	2b01      	cmp	r3, #1
 8001316:	d005      	beq.n	8001324 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001320:	2b02      	cmp	r3, #2
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	409a      	lsls	r2, r3
 8001332:	0013      	movs	r3, r2
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	409a      	lsls	r2, r3
 8001346:	0013      	movs	r3, r2
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	2201      	movs	r2, #1
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	4013      	ands	r3, r2
 800138e:	2b03      	cmp	r3, #3
 8001390:	d017      	beq.n	80013c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	43da      	mvns	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2203      	movs	r2, #3
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d123      	bne.n	8001416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	58d3      	ldr	r3, [r2, r3]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2207      	movs	r2, #7
 80013e0:	4013      	ands	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2107      	movs	r1, #7
 80013fa:	400b      	ands	r3, r1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	6939      	ldr	r1, [r7, #16]
 8001414:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	401a      	ands	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	23c0      	movs	r3, #192	@ 0xc0
 8001450:	029b      	lsls	r3, r3, #10
 8001452:	4013      	ands	r3, r2
 8001454:	d100      	bne.n	8001458 <HAL_GPIO_Init+0x174>
 8001456:	e09a      	b.n	800158e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b54      	ldr	r3, [pc, #336]	@ (80015ac <HAL_GPIO_Init+0x2c8>)
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	4b53      	ldr	r3, [pc, #332]	@ (80015ac <HAL_GPIO_Init+0x2c8>)
 800145e:	2101      	movs	r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	4b51      	ldr	r3, [pc, #324]	@ (80015ac <HAL_GPIO_Init+0x2c8>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2201      	movs	r2, #1
 800146a:	4013      	ands	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001470:	4a4f      	ldr	r2, [pc, #316]	@ (80015b0 <HAL_GPIO_Init+0x2cc>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	589b      	ldr	r3, [r3, r2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2203      	movs	r2, #3
 8001482:	4013      	ands	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	409a      	lsls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	43da      	mvns	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	2390      	movs	r3, #144	@ 0x90
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	429a      	cmp	r2, r3
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x1e2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a44      	ldr	r2, [pc, #272]	@ (80015b4 <HAL_GPIO_Init+0x2d0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x1de>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <HAL_GPIO_Init+0x2d4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x1da>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a42      	ldr	r2, [pc, #264]	@ (80015bc <HAL_GPIO_Init+0x2d8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x1d6>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x1e4>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x1e4>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x1e4>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x1e4>
 80014c6:	2300      	movs	r3, #0
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	2103      	movs	r1, #3
 80014cc:	400a      	ands	r2, r1
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d8:	4935      	ldr	r1, [pc, #212]	@ (80015b0 <HAL_GPIO_Init+0x2cc>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b36      	ldr	r3, [pc, #216]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	2380      	movs	r3, #128	@ 0x80
 80014fc:	035b      	lsls	r3, r3, #13
 80014fe:	4013      	ands	r3, r2
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43da      	mvns	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	039b      	lsls	r3, r3, #14
 8001528:	4013      	ands	r3, r2
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001534:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	029b      	lsls	r3, r3, #10
 8001552:	4013      	ands	r3, r2
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43da      	mvns	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4013      	ands	r3, r2
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001588:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_GPIO_Init+0x2dc>)
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	40da      	lsrs	r2, r3
 800159c:	1e13      	subs	r3, r2, #0
 800159e:	d000      	beq.n	80015a2 <HAL_GPIO_Init+0x2be>
 80015a0:	e6a8      	b.n	80012f4 <HAL_GPIO_Init+0x10>
  } 
}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b006      	add	sp, #24
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000
 80015b4:	48000400 	.word	0x48000400
 80015b8:	48000800 	.word	0x48000800
 80015bc:	48000c00 	.word	0x48000c00
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	000a      	movs	r2, r1
 80015ce:	1cbb      	adds	r3, r7, #2
 80015d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	1cba      	adds	r2, r7, #2
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	4013      	ands	r3, r2
 80015dc:	d004      	beq.n	80015e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015de:	230f      	movs	r3, #15
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e003      	b.n	80015f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e8:	230f      	movs	r3, #15
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015f0:	230f      	movs	r3, #15
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	781b      	ldrb	r3, [r3, #0]
  }
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	0008      	movs	r0, r1
 8001608:	0011      	movs	r1, r2
 800160a:	1cbb      	adds	r3, r7, #2
 800160c:	1c02      	adds	r2, r0, #0
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	1c7b      	adds	r3, r7, #1
 8001612:	1c0a      	adds	r2, r1, #0
 8001614:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001616:	1c7b      	adds	r3, r7, #1
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161e:	1cbb      	adds	r3, r7, #2
 8001620:	881a      	ldrh	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001626:	e003      	b.n	8001630 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001628:	1cbb      	adds	r3, r7, #2
 800162a:	881a      	ldrh	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e08f      	b.n	800176a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2241      	movs	r2, #65	@ 0x41
 800164e:	5c9b      	ldrb	r3, [r3, r2]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d107      	bne.n	8001666 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2240      	movs	r2, #64	@ 0x40
 800165a:	2100      	movs	r1, #0
 800165c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff f9a9 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2241      	movs	r2, #65	@ 0x41
 800166a:	2124      	movs	r1, #36	@ 0x24
 800166c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	438a      	bics	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	493b      	ldr	r1, [pc, #236]	@ (8001774 <HAL_I2C_Init+0x13c>)
 8001688:	400a      	ands	r2, r1
 800168a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4938      	ldr	r1, [pc, #224]	@ (8001778 <HAL_I2C_Init+0x140>)
 8001698:	400a      	ands	r2, r1
 800169a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	0209      	lsls	r1, r1, #8
 80016b0:	430a      	orrs	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	e007      	b.n	80016c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2184      	movs	r1, #132	@ 0x84
 80016c0:	0209      	lsls	r1, r1, #8
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d109      	bne.n	80016e2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0109      	lsls	r1, r1, #4
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e007      	b.n	80016f2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4923      	ldr	r1, [pc, #140]	@ (800177c <HAL_I2C_Init+0x144>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4920      	ldr	r1, [pc, #128]	@ (8001780 <HAL_I2C_Init+0x148>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	491a      	ldr	r1, [pc, #104]	@ (8001778 <HAL_I2C_Init+0x140>)
 800170e:	400a      	ands	r2, r1
 8001710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	431a      	orrs	r2, r3
 800171c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69d9      	ldr	r1, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2101      	movs	r1, #1
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2241      	movs	r2, #65	@ 0x41
 8001756:	2120      	movs	r1, #32
 8001758:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2242      	movs	r2, #66	@ 0x42
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	f0ffffff 	.word	0xf0ffffff
 8001778:	ffff7fff 	.word	0xffff7fff
 800177c:	fffff7ff 	.word	0xfffff7ff
 8001780:	02008000 	.word	0x02008000

08001784 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af02      	add	r7, sp, #8
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	000c      	movs	r4, r1
 800178e:	0010      	movs	r0, r2
 8001790:	0019      	movs	r1, r3
 8001792:	230a      	movs	r3, #10
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	1c22      	adds	r2, r4, #0
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	2308      	movs	r3, #8
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	1c02      	adds	r2, r0, #0
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	1c0a      	adds	r2, r1, #0
 80017a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2241      	movs	r2, #65	@ 0x41
 80017ac:	5c9b      	ldrb	r3, [r3, r2]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d000      	beq.n	80017b6 <HAL_I2C_Mem_Write+0x32>
 80017b4:	e10c      	b.n	80019d0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80017b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_I2C_Mem_Write+0x42>
 80017bc:	232c      	movs	r3, #44	@ 0x2c
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2280      	movs	r2, #128	@ 0x80
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0ff      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2240      	movs	r2, #64	@ 0x40
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x5c>
 80017dc:	2302      	movs	r3, #2
 80017de:	e0f8      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2240      	movs	r2, #64	@ 0x40
 80017e4:	2101      	movs	r1, #1
 80017e6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017e8:	f7ff fafc 	bl	8000de4 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	0219      	lsls	r1, r3, #8
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2319      	movs	r3, #25
 80017fc:	2201      	movs	r2, #1
 80017fe:	f000 fc07 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0e3      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2241      	movs	r2, #65	@ 0x41
 800180e:	2121      	movs	r1, #33	@ 0x21
 8001810:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2242      	movs	r2, #66	@ 0x42
 8001816:	2140      	movs	r1, #64	@ 0x40
 8001818:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	222c      	movs	r2, #44	@ 0x2c
 800182a:	18ba      	adds	r2, r7, r2
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001836:	1dbb      	adds	r3, r7, #6
 8001838:	881c      	ldrh	r4, [r3, #0]
 800183a:	2308      	movs	r3, #8
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	881a      	ldrh	r2, [r3, #0]
 8001840:	230a      	movs	r3, #10
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	8819      	ldrh	r1, [r3, #0]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	0023      	movs	r3, r4
 8001852:	f000 faf5 	bl	8001e40 <I2C_RequestMemoryWrite>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d005      	beq.n	8001866 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2240      	movs	r2, #64	@ 0x40
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0b5      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186a:	b29b      	uxth	r3, r3
 800186c:	2bff      	cmp	r3, #255	@ 0xff
 800186e:	d911      	bls.n	8001894 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	22ff      	movs	r2, #255	@ 0xff
 8001874:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187a:	b2da      	uxtb	r2, r3
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	045c      	lsls	r4, r3, #17
 8001880:	230a      	movs	r3, #10
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	8819      	ldrh	r1, [r3, #0]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	0023      	movs	r3, r4
 800188e:	f000 fd99 	bl	80023c4 <I2C_TransferConfig>
 8001892:	e012      	b.n	80018ba <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	049c      	lsls	r4, r3, #18
 80018a8:	230a      	movs	r3, #10
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	8819      	ldrh	r1, [r3, #0]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	0023      	movs	r3, r4
 80018b6:	f000 fd85 	bl	80023c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 fbfd 	bl	80020c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e081      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001902:	b29b      	uxth	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03a      	beq.n	800197e <HAL_I2C_Mem_Write+0x1fa>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	d136      	bne.n	800197e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	0013      	movs	r3, r2
 800191a:	2200      	movs	r2, #0
 800191c:	2180      	movs	r1, #128	@ 0x80
 800191e:	f000 fb77 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001922:	1e03      	subs	r3, r0, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e053      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	2bff      	cmp	r3, #255	@ 0xff
 8001932:	d911      	bls.n	8001958 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	22ff      	movs	r2, #255	@ 0xff
 8001938:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193e:	b2da      	uxtb	r2, r3
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	045c      	lsls	r4, r3, #17
 8001944:	230a      	movs	r3, #10
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	8819      	ldrh	r1, [r3, #0]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	2300      	movs	r3, #0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	0023      	movs	r3, r4
 8001952:	f000 fd37 	bl	80023c4 <I2C_TransferConfig>
 8001956:	e012      	b.n	800197e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001966:	b2da      	uxtb	r2, r3
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	049c      	lsls	r4, r3, #18
 800196c:	230a      	movs	r3, #10
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	8819      	ldrh	r1, [r3, #0]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	2300      	movs	r3, #0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	0023      	movs	r3, r4
 800197a:	f000 fd23 	bl	80023c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d198      	bne.n	80018ba <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	0018      	movs	r0, r3
 8001990:	f000 fbdc 	bl	800214c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e01a      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2220      	movs	r2, #32
 80019a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	490b      	ldr	r1, [pc, #44]	@ (80019dc <HAL_I2C_Mem_Write+0x258>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2241      	movs	r2, #65	@ 0x41
 80019b8:	2120      	movs	r1, #32
 80019ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2242      	movs	r2, #66	@ 0x42
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2240      	movs	r2, #64	@ 0x40
 80019c8:	2100      	movs	r1, #0
 80019ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80019d0:	2302      	movs	r3, #2
  }
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b007      	add	sp, #28
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	fe00e800 	.word	0xfe00e800

080019e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	000c      	movs	r4, r1
 80019ea:	0010      	movs	r0, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	230a      	movs	r3, #10
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	1c22      	adds	r2, r4, #0
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	2308      	movs	r3, #8
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	1c02      	adds	r2, r0, #0
 80019fc:	801a      	strh	r2, [r3, #0]
 80019fe:	1dbb      	adds	r3, r7, #6
 8001a00:	1c0a      	adds	r2, r1, #0
 8001a02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2241      	movs	r2, #65	@ 0x41
 8001a08:	5c9b      	ldrb	r3, [r3, r2]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d000      	beq.n	8001a12 <HAL_I2C_Mem_Read+0x32>
 8001a10:	e110      	b.n	8001c34 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_I2C_Mem_Read+0x42>
 8001a18:	232c      	movs	r3, #44	@ 0x2c
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2280      	movs	r2, #128	@ 0x80
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e103      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2240      	movs	r2, #64	@ 0x40
 8001a32:	5c9b      	ldrb	r3, [r3, r2]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_I2C_Mem_Read+0x5c>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e0fc      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2240      	movs	r2, #64	@ 0x40
 8001a40:	2101      	movs	r1, #1
 8001a42:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a44:	f7ff f9ce 	bl	8000de4 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	0219      	lsls	r1, r3, #8
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2319      	movs	r3, #25
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f000 fad9 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0e7      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2241      	movs	r2, #65	@ 0x41
 8001a6a:	2122      	movs	r1, #34	@ 0x22
 8001a6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2242      	movs	r2, #66	@ 0x42
 8001a72:	2140      	movs	r1, #64	@ 0x40
 8001a74:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	222c      	movs	r2, #44	@ 0x2c
 8001a86:	18ba      	adds	r2, r7, r2
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a92:	1dbb      	adds	r3, r7, #6
 8001a94:	881c      	ldrh	r4, [r3, #0]
 8001a96:	2308      	movs	r3, #8
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	881a      	ldrh	r2, [r3, #0]
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	8819      	ldrh	r1, [r3, #0]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	0023      	movs	r3, r4
 8001aae:	f000 fa2b 	bl	8001f08 <I2C_RequestMemoryRead>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2240      	movs	r2, #64	@ 0x40
 8001aba:	2100      	movs	r1, #0
 8001abc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0b9      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2bff      	cmp	r3, #255	@ 0xff
 8001aca:	d911      	bls.n	8001af0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	045c      	lsls	r4, r3, #17
 8001adc:	230a      	movs	r3, #10
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	8819      	ldrh	r1, [r3, #0]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	4b56      	ldr	r3, [pc, #344]	@ (8001c40 <HAL_I2C_Mem_Read+0x260>)
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	0023      	movs	r3, r4
 8001aea:	f000 fc6b 	bl	80023c4 <I2C_TransferConfig>
 8001aee:	e012      	b.n	8001b16 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	049c      	lsls	r4, r3, #18
 8001b04:	230a      	movs	r3, #10
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	8819      	ldrh	r1, [r3, #0]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c40 <HAL_I2C_Mem_Read+0x260>)
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	0023      	movs	r3, r4
 8001b12:	f000 fc57 	bl	80023c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	0013      	movs	r3, r2
 8001b20:	2200      	movs	r2, #0
 8001b22:	2104      	movs	r1, #4
 8001b24:	f000 fa74 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e082      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03a      	beq.n	8001be2 <HAL_I2C_Mem_Read+0x202>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d136      	bne.n	8001be2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2180      	movs	r1, #128	@ 0x80
 8001b82:	f000 fa45 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001b86:	1e03      	subs	r3, r0, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e053      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2bff      	cmp	r3, #255	@ 0xff
 8001b96:	d911      	bls.n	8001bbc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	045c      	lsls	r4, r3, #17
 8001ba8:	230a      	movs	r3, #10
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	8819      	ldrh	r1, [r3, #0]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	0023      	movs	r3, r4
 8001bb6:	f000 fc05 	bl	80023c4 <I2C_TransferConfig>
 8001bba:	e012      	b.n	8001be2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	049c      	lsls	r4, r3, #18
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	8819      	ldrh	r1, [r3, #0]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	0023      	movs	r3, r4
 8001bde:	f000 fbf1 	bl	80023c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d194      	bne.n	8001b16 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 faaa 	bl	800214c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e01a      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2220      	movs	r2, #32
 8001c06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <HAL_I2C_Mem_Read+0x264>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2241      	movs	r2, #65	@ 0x41
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2242      	movs	r2, #66	@ 0x42
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2240      	movs	r2, #64	@ 0x40
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b007      	add	sp, #28
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	80002400 	.word	0x80002400
 8001c44:	fe00e800 	.word	0xfe00e800

08001c48 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	230a      	movs	r3, #10
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	1c0a      	adds	r2, r1, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2241      	movs	r2, #65	@ 0x41
 8001c64:	5c9b      	ldrb	r3, [r3, r2]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d000      	beq.n	8001c6e <HAL_I2C_IsDeviceReady+0x26>
 8001c6c:	e0df      	b.n	8001e2e <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	401a      	ands	r2, r3
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
 8001c84:	e0d4      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2240      	movs	r2, #64	@ 0x40
 8001c8a:	5c9b      	ldrb	r3, [r3, r2]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_I2C_IsDeviceReady+0x4c>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e0cd      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x1e8>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2240      	movs	r2, #64	@ 0x40
 8001c98:	2101      	movs	r1, #1
 8001c9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2241      	movs	r2, #65	@ 0x41
 8001ca0:	2124      	movs	r1, #36	@ 0x24
 8001ca2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_I2C_IsDeviceReady+0x7a>
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	059b      	lsls	r3, r3, #22
 8001cba:	0d9b      	lsrs	r3, r3, #22
 8001cbc:	4a5e      	ldr	r2, [pc, #376]	@ (8001e38 <HAL_I2C_IsDeviceReady+0x1f0>)
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	e006      	b.n	8001cd0 <HAL_I2C_IsDeviceReady+0x88>
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	059b      	lsls	r3, r3, #22
 8001cca:	0d9b      	lsrs	r3, r3, #22
 8001ccc:	4a5b      	ldr	r2, [pc, #364]	@ (8001e3c <HAL_I2C_IsDeviceReady+0x1f4>)
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001cd6:	f7ff f885 	bl	8000de4 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	3b20      	subs	r3, #32
 8001cea:	425a      	negs	r2, r3
 8001cec:	4153      	adcs	r3, r2
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	4013      	ands	r3, r2
 8001d00:	3b10      	subs	r3, #16
 8001d02:	425a      	negs	r2, r3
 8001d04:	4153      	adcs	r3, r2
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	231e      	movs	r3, #30
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d0e:	e035      	b.n	8001d7c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	d01a      	beq.n	8001d4c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff f865 	bl	8000de4 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <HAL_I2C_IsDeviceReady+0xe4>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2241      	movs	r2, #65	@ 0x41
 8001d30:	2120      	movs	r1, #32
 8001d32:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	2220      	movs	r2, #32
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2240      	movs	r2, #64	@ 0x40
 8001d44:	2100      	movs	r1, #0
 8001d46:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e071      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2220      	movs	r2, #32
 8001d54:	4013      	ands	r3, r2
 8001d56:	3b20      	subs	r3, #32
 8001d58:	425a      	negs	r2, r3
 8001d5a:	4153      	adcs	r3, r2
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	231f      	movs	r3, #31
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	3b10      	subs	r3, #16
 8001d70:	425a      	negs	r2, r3
 8001d72:	4153      	adcs	r3, r2
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	231e      	movs	r3, #30
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <HAL_I2C_IsDeviceReady+0x148>
 8001d86:	231e      	movs	r3, #30
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0bf      	beq.n	8001d10 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2210      	movs	r2, #16
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d01a      	beq.n	8001dd4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	0013      	movs	r3, r2
 8001da8:	2200      	movs	r2, #0
 8001daa:	2120      	movs	r1, #32
 8001dac:	f000 f930 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e03b      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2241      	movs	r2, #65	@ 0x41
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2240      	movs	r2, #64	@ 0x40
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e02d      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	0013      	movs	r3, r2
 8001dde:	2200      	movs	r2, #0
 8001de0:	2120      	movs	r1, #32
 8001de2:	f000 f915 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e020      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2210      	movs	r2, #16
 8001df4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d900      	bls.n	8001e0e <HAL_I2C_IsDeviceReady+0x1c6>
 8001e0c:	e74d      	b.n	8001caa <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2241      	movs	r2, #65	@ 0x41
 8001e12:	2120      	movs	r1, #32
 8001e14:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2240      	movs	r2, #64	@ 0x40
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
  }
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b008      	add	sp, #32
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	02002000 	.word	0x02002000
 8001e3c:	02002800 	.word	0x02002800

08001e40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	000c      	movs	r4, r1
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	250a      	movs	r5, #10
 8001e50:	197b      	adds	r3, r7, r5
 8001e52:	1c22      	adds	r2, r4, #0
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	2308      	movs	r3, #8
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	1c02      	adds	r2, r0, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	1dbb      	adds	r3, r7, #6
 8001e60:	1c0a      	adds	r2, r1, #0
 8001e62:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e64:	1dbb      	adds	r3, r7, #6
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	045c      	lsls	r4, r3, #17
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	8819      	ldrh	r1, [r3, #0]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <I2C_RequestMemoryWrite+0xc4>)
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	0023      	movs	r3, r4
 8001e7a:	f000 faa3 	bl	80023c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 f91b 	bl	80020c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e033      	b.n	8001efa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e92:	1dbb      	adds	r3, r7, #6
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ea8:	e019      	b.n	8001ede <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eaa:	2308      	movs	r3, #8
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ebe:	6a39      	ldr	r1, [r7, #32]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 f8fc 	bl	80020c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d001      	beq.n	8001ed0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e014      	b.n	8001efa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ede:	6a3a      	ldr	r2, [r7, #32]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	f000 f890 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d001      	beq.n	8001ef8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b004      	add	sp, #16
 8001f00:	bdb0      	pop	{r4, r5, r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	80002000 	.word	0x80002000

08001f08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	000c      	movs	r4, r1
 8001f12:	0010      	movs	r0, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	250a      	movs	r5, #10
 8001f18:	197b      	adds	r3, r7, r5
 8001f1a:	1c22      	adds	r2, r4, #0
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	2308      	movs	r3, #8
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	1c02      	adds	r2, r0, #0
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	1dbb      	adds	r3, r7, #6
 8001f28:	1c0a      	adds	r2, r1, #0
 8001f2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f2c:	1dbb      	adds	r3, r7, #6
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	197b      	adds	r3, r7, r5
 8001f34:	8819      	ldrh	r1, [r3, #0]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <I2C_RequestMemoryRead+0xc0>)
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f000 fa41 	bl	80023c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 f8b9 	bl	80020c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e033      	b.n	8001fbe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f56:	1dbb      	adds	r3, r7, #6
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f5e:	2308      	movs	r3, #8
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f6c:	e019      	b.n	8001fa2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f6e:	2308      	movs	r3, #8
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f82:	6a39      	ldr	r1, [r7, #32]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 f89a 	bl	80020c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d001      	beq.n	8001f94 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e014      	b.n	8001fbe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f94:	2308      	movs	r3, #8
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa2:	6a3a      	ldr	r2, [r7, #32]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	0013      	movs	r3, r2
 8001fac:	2200      	movs	r2, #0
 8001fae:	2140      	movs	r1, #64	@ 0x40
 8001fb0:	f000 f82e 	bl	8002010 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	1e03      	subs	r3, r0, #0
 8001fb6:	d001      	beq.n	8001fbc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	80002000 	.word	0x80002000

08001fcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d103      	bne.n	8001fea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d007      	beq.n	8002008 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2101      	movs	r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	619a      	str	r2, [r3, #24]
  }
}
 8002008:	46c0      	nop			@ (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002020:	e03a      	b.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0018      	movs	r0, r3
 800202a:	f000 f8d3 	bl	80021d4 <I2C_IsErrorOccurred>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e040      	b.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	d02d      	beq.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203c:	f7fe fed2 	bl	8000de4 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x42>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d122      	bne.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	425a      	negs	r2, r3
 8002062:	4153      	adcs	r3, r2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	001a      	movs	r2, r3
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d113      	bne.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	2220      	movs	r2, #32
 8002076:	431a      	orrs	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2241      	movs	r2, #65	@ 0x41
 8002080:	2120      	movs	r1, #32
 8002082:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2242      	movs	r2, #66	@ 0x42
 8002088:	2100      	movs	r1, #0
 800208a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2240      	movs	r2, #64	@ 0x40
 8002090:	2100      	movs	r1, #0
 8002092:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e00f      	b.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4013      	ands	r3, r2
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	425a      	negs	r2, r3
 80020a8:	4153      	adcs	r3, r2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	001a      	movs	r2, r3
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d0b5      	beq.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b004      	add	sp, #16
 80020be:	bd80      	pop	{r7, pc}

080020c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020cc:	e032      	b.n	8002134 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f87d 	bl	80021d4 <I2C_IsErrorOccurred>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d001      	beq.n	80020e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e030      	b.n	8002144 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	d025      	beq.n	8002134 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e8:	f7fe fe7c 	bl	8000de4 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d302      	bcc.n	80020fe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11a      	bne.n	8002134 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d013      	beq.n	8002134 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	2220      	movs	r2, #32
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2241      	movs	r2, #65	@ 0x41
 800211c:	2120      	movs	r1, #32
 800211e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2242      	movs	r2, #66	@ 0x42
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2240      	movs	r2, #64	@ 0x40
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e007      	b.n	8002144 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2202      	movs	r2, #2
 800213c:	4013      	ands	r3, r2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d1c5      	bne.n	80020ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bd80      	pop	{r7, pc}

0800214c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002158:	e02f      	b.n	80021ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0018      	movs	r0, r3
 8002162:	f000 f837 	bl	80021d4 <I2C_IsErrorOccurred>
 8002166:	1e03      	subs	r3, r0, #0
 8002168:	d001      	beq.n	800216e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e02d      	b.n	80021ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216e:	f7fe fe39 	bl	8000de4 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	429a      	cmp	r2, r3
 800217c:	d302      	bcc.n	8002184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11a      	bne.n	80021ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2220      	movs	r2, #32
 800218c:	4013      	ands	r3, r2
 800218e:	2b20      	cmp	r3, #32
 8002190:	d013      	beq.n	80021ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	2220      	movs	r2, #32
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2241      	movs	r2, #65	@ 0x41
 80021a2:	2120      	movs	r1, #32
 80021a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2242      	movs	r2, #66	@ 0x42
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2240      	movs	r2, #64	@ 0x40
 80021b2:	2100      	movs	r1, #0
 80021b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e007      	b.n	80021ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2220      	movs	r2, #32
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d1c8      	bne.n	800215a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	0018      	movs	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b004      	add	sp, #16
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	@ 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e0:	2327      	movs	r3, #39	@ 0x27
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2210      	movs	r2, #16
 80021fc:	4013      	ands	r3, r2
 80021fe:	d100      	bne.n	8002202 <I2C_IsErrorOccurred+0x2e>
 8002200:	e079      	b.n	80022f6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2210      	movs	r2, #16
 8002208:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800220a:	e057      	b.n	80022bc <I2C_IsErrorOccurred+0xe8>
 800220c:	2227      	movs	r2, #39	@ 0x27
 800220e:	18bb      	adds	r3, r7, r2
 8002210:	18ba      	adds	r2, r7, r2
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3301      	adds	r3, #1
 800221a:	d04f      	beq.n	80022bc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7fe fde2 	bl	8000de4 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <I2C_IsErrorOccurred+0x5e>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d144      	bne.n	80022bc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	01db      	lsls	r3, r3, #7
 800223c:	4013      	ands	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002240:	2013      	movs	r0, #19
 8002242:	183b      	adds	r3, r7, r0
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	2142      	movs	r1, #66	@ 0x42
 8002248:	5c52      	ldrb	r2, [r2, r1]
 800224a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	401a      	ands	r2, r3
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	429a      	cmp	r2, r3
 800225e:	d126      	bne.n	80022ae <I2C_IsErrorOccurred+0xda>
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	01db      	lsls	r3, r3, #7
 8002266:	429a      	cmp	r2, r3
 8002268:	d021      	beq.n	80022ae <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800226a:	183b      	adds	r3, r7, r0
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b20      	cmp	r3, #32
 8002270:	d01d      	beq.n	80022ae <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2180      	movs	r1, #128	@ 0x80
 800227e:	01c9      	lsls	r1, r1, #7
 8002280:	430a      	orrs	r2, r1
 8002282:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002284:	f7fe fdae 	bl	8000de4 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228c:	e00f      	b.n	80022ae <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800228e:	f7fe fda9 	bl	8000de4 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b19      	cmp	r3, #25
 800229a:	d908      	bls.n	80022ae <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2220      	movs	r2, #32
 80022a0:	4313      	orrs	r3, r2
 80022a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022a4:	2327      	movs	r3, #39	@ 0x27
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]

              break;
 80022ac:	e006      	b.n	80022bc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2220      	movs	r2, #32
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d1e8      	bne.n	800228e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2220      	movs	r2, #32
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d004      	beq.n	80022d4 <I2C_IsErrorOccurred+0x100>
 80022ca:	2327      	movs	r3, #39	@ 0x27
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d09b      	beq.n	800220c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022d4:	2327      	movs	r3, #39	@ 0x27
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2220      	movs	r2, #32
 80022e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2204      	movs	r2, #4
 80022ea:	4313      	orrs	r3, r2
 80022ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022ee:	2327      	movs	r3, #39	@ 0x27
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4013      	ands	r3, r2
 8002306:	d00c      	beq.n	8002322 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	2201      	movs	r2, #1
 800230c:	4313      	orrs	r3, r2
 800230e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	0052      	lsls	r2, r2, #1
 8002318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800231a:	2327      	movs	r3, #39	@ 0x27
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4013      	ands	r3, r2
 800232a:	d00c      	beq.n	8002346 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2208      	movs	r2, #8
 8002330:	4313      	orrs	r3, r2
 8002332:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2280      	movs	r2, #128	@ 0x80
 800233a:	00d2      	lsls	r2, r2, #3
 800233c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800233e:	2327      	movs	r3, #39	@ 0x27
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	2380      	movs	r3, #128	@ 0x80
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d00c      	beq.n	800236a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2202      	movs	r2, #2
 8002354:	4313      	orrs	r3, r2
 8002356:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002362:	2327      	movs	r3, #39	@ 0x27
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800236a:	2327      	movs	r3, #39	@ 0x27
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01d      	beq.n	80023b0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff fe28 	bl	8001fcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	490e      	ldr	r1, [pc, #56]	@ (80023c0 <I2C_IsErrorOccurred+0x1ec>)
 8002388:	400a      	ands	r2, r1
 800238a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	431a      	orrs	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2241      	movs	r2, #65	@ 0x41
 800239c:	2120      	movs	r1, #32
 800239e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2242      	movs	r2, #66	@ 0x42
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2240      	movs	r2, #64	@ 0x40
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80023b0:	2327      	movs	r3, #39	@ 0x27
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	781b      	ldrb	r3, [r3, #0]
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b00a      	add	sp, #40	@ 0x28
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	fe00e800 	.word	0xfe00e800

080023c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	0008      	movs	r0, r1
 80023ce:	0011      	movs	r1, r2
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	240a      	movs	r4, #10
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	1c02      	adds	r2, r0, #0
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	2009      	movs	r0, #9
 80023dc:	183b      	adds	r3, r7, r0
 80023de:	1c0a      	adds	r2, r1, #0
 80023e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	059b      	lsls	r3, r3, #22
 80023e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023ea:	183b      	adds	r3, r7, r0
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	0419      	lsls	r1, r3, #16
 80023f0:	23ff      	movs	r3, #255	@ 0xff
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fe:	4313      	orrs	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800240e:	0d51      	lsrs	r1, r2, #21
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	00d2      	lsls	r2, r2, #3
 8002414:	400a      	ands	r2, r1
 8002416:	4907      	ldr	r1, [pc, #28]	@ (8002434 <I2C_TransferConfig+0x70>)
 8002418:	430a      	orrs	r2, r1
 800241a:	43d2      	mvns	r2, r2
 800241c:	401a      	ands	r2, r3
 800241e:	0011      	movs	r1, r2
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b007      	add	sp, #28
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	03ff63ff 	.word	0x03ff63ff

08002438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	@ 0x41
 8002446:	5c9b      	ldrb	r3, [r3, r2]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b20      	cmp	r3, #32
 800244c:	d138      	bne.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002458:	2302      	movs	r3, #2
 800245a:	e032      	b.n	80024c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	2101      	movs	r1, #1
 8002462:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2241      	movs	r2, #65	@ 0x41
 8002468:	2124      	movs	r1, #36	@ 0x24
 800246a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4911      	ldr	r1, [pc, #68]	@ (80024cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6819      	ldr	r1, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2101      	movs	r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2241      	movs	r2, #65	@ 0x41
 80024b0:	2120      	movs	r1, #32
 80024b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2240      	movs	r2, #64	@ 0x40
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	ffffefff 	.word	0xffffefff

080024d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2241      	movs	r2, #65	@ 0x41
 80024de:	5c9b      	ldrb	r3, [r3, r2]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d139      	bne.n	800255a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2240      	movs	r2, #64	@ 0x40
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e033      	b.n	800255c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2240      	movs	r2, #64	@ 0x40
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2241      	movs	r2, #65	@ 0x41
 8002500:	2124      	movs	r1, #36	@ 0x24
 8002502:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2241      	movs	r2, #65	@ 0x41
 800254a:	2120      	movs	r1, #32
 800254c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2240      	movs	r2, #64	@ 0x40
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}
 8002564:	fffff0ff 	.word	0xfffff0ff

08002568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e301      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	4013      	ands	r3, r2
 8002582:	d100      	bne.n	8002586 <HAL_RCC_OscConfig+0x1e>
 8002584:	e08d      	b.n	80026a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002586:	4bc3      	ldr	r3, [pc, #780]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00e      	beq.n	80025b0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002592:	4bc0      	ldr	r3, [pc, #768]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	220c      	movs	r2, #12
 8002598:	4013      	ands	r3, r2
 800259a:	2b08      	cmp	r3, #8
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x64>
 800259e:	4bbd      	ldr	r3, [pc, #756]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	025b      	lsls	r3, r3, #9
 80025a6:	401a      	ands	r2, r3
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	025b      	lsls	r3, r3, #9
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10d      	bne.n	80025cc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	4bb8      	ldr	r3, [pc, #736]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d100      	bne.n	80025be <HAL_RCC_OscConfig+0x56>
 80025bc:	e070      	b.n	80026a0 <HAL_RCC_OscConfig+0x138>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d000      	beq.n	80025c8 <HAL_RCC_OscConfig+0x60>
 80025c6:	e06b      	b.n	80026a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e2d8      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x7c>
 80025d4:	4baf      	ldr	r3, [pc, #700]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4bae      	ldr	r3, [pc, #696]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025da:	2180      	movs	r1, #128	@ 0x80
 80025dc:	0249      	lsls	r1, r1, #9
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e02f      	b.n	8002644 <HAL_RCC_OscConfig+0xdc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10c      	bne.n	8002606 <HAL_RCC_OscConfig+0x9e>
 80025ec:	4ba9      	ldr	r3, [pc, #676]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4ba8      	ldr	r3, [pc, #672]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025f2:	49a9      	ldr	r1, [pc, #676]	@ (8002898 <HAL_RCC_OscConfig+0x330>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	4ba6      	ldr	r3, [pc, #664]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4ba5      	ldr	r3, [pc, #660]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80025fe:	49a7      	ldr	r1, [pc, #668]	@ (800289c <HAL_RCC_OscConfig+0x334>)
 8002600:	400a      	ands	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e01e      	b.n	8002644 <HAL_RCC_OscConfig+0xdc>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d10e      	bne.n	800262c <HAL_RCC_OscConfig+0xc4>
 800260e:	4ba1      	ldr	r3, [pc, #644]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4ba0      	ldr	r3, [pc, #640]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	02c9      	lsls	r1, r1, #11
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	4b9d      	ldr	r3, [pc, #628]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b9c      	ldr	r3, [pc, #624]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002622:	2180      	movs	r1, #128	@ 0x80
 8002624:	0249      	lsls	r1, r1, #9
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0xdc>
 800262c:	4b99      	ldr	r3, [pc, #612]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b98      	ldr	r3, [pc, #608]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002632:	4999      	ldr	r1, [pc, #612]	@ (8002898 <HAL_RCC_OscConfig+0x330>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4b96      	ldr	r3, [pc, #600]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b95      	ldr	r3, [pc, #596]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800263e:	4997      	ldr	r1, [pc, #604]	@ (800289c <HAL_RCC_OscConfig+0x334>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d014      	beq.n	8002676 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fbca 	bl	8000de4 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002656:	f7fe fbc5 	bl	8000de4 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b64      	cmp	r3, #100	@ 0x64
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e28a      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002668:	4b8a      	ldr	r3, [pc, #552]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	4013      	ands	r3, r2
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0xee>
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fbb5 	bl	8000de4 <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe fbb0 	bl	8000de4 <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	@ 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e275      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b80      	ldr	r3, [pc, #512]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	029b      	lsls	r3, r3, #10
 800269a:	4013      	ands	r3, r2
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x118>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	d100      	bne.n	80026ae <HAL_RCC_OscConfig+0x146>
 80026ac:	e069      	b.n	8002782 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026ae:	4b79      	ldr	r3, [pc, #484]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	220c      	movs	r2, #12
 80026b4:	4013      	ands	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026b8:	4b76      	ldr	r3, [pc, #472]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	220c      	movs	r2, #12
 80026be:	4013      	ands	r3, r2
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d11c      	bne.n	80026fe <HAL_RCC_OscConfig+0x196>
 80026c4:	4b73      	ldr	r3, [pc, #460]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	025b      	lsls	r3, r3, #9
 80026cc:	4013      	ands	r3, r2
 80026ce:	d116      	bne.n	80026fe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d0:	4b70      	ldr	r3, [pc, #448]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d005      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e24b      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	22f8      	movs	r2, #248	@ 0xf8
 80026ec:	4393      	bics	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00da      	lsls	r2, r3, #3
 80026f6:	4b67      	ldr	r3, [pc, #412]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fc:	e041      	b.n	8002782 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d024      	beq.n	8002750 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002706:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fb67 	bl	8000de4 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271c:	f7fe fb62 	bl	8000de4 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e227      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2202      	movs	r2, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d0f1      	beq.n	800271c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b56      	ldr	r3, [pc, #344]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	22f8      	movs	r2, #248	@ 0xf8
 800273e:	4393      	bics	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00da      	lsls	r2, r3, #3
 8002748:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e018      	b.n	8002782 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002750:	4b50      	ldr	r3, [pc, #320]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002756:	2101      	movs	r1, #1
 8002758:	438a      	bics	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fb42 	bl	8000de4 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002766:	f7fe fb3d 	bl	8000de4 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e202      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002778:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2202      	movs	r2, #2
 800277e:	4013      	ands	r3, r2
 8002780:	d1f1      	bne.n	8002766 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2208      	movs	r2, #8
 8002788:	4013      	ands	r3, r2
 800278a:	d036      	beq.n	80027fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d019      	beq.n	80027c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002794:	4b3f      	ldr	r3, [pc, #252]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002796:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002798:	4b3e      	ldr	r3, [pc, #248]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800279a:	2101      	movs	r1, #1
 800279c:	430a      	orrs	r2, r1
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe fb20 	bl	8000de4 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027aa:	f7fe fb1b 	bl	8000de4 <HAL_GetTick>
 80027ae:	0002      	movs	r2, r0
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1e0      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027bc:	4b35      	ldr	r3, [pc, #212]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d0f1      	beq.n	80027aa <HAL_RCC_OscConfig+0x242>
 80027c6:	e018      	b.n	80027fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c8:	4b32      	ldr	r3, [pc, #200]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80027ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	438a      	bics	r2, r1
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7fe fb06 	bl	8000de4 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027de:	f7fe fb01 	bl	8000de4 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1c6      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d1f1      	bne.n	80027de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2204      	movs	r2, #4
 8002800:	4013      	ands	r3, r2
 8002802:	d100      	bne.n	8002806 <HAL_RCC_OscConfig+0x29e>
 8002804:	e0b4      	b.n	8002970 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	201f      	movs	r0, #31
 8002808:	183b      	adds	r3, r7, r0
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	055b      	lsls	r3, r3, #21
 8002816:	4013      	ands	r3, r2
 8002818:	d110      	bne.n	800283c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002820:	2180      	movs	r1, #128	@ 0x80
 8002822:	0549      	lsls	r1, r1, #21
 8002824:	430a      	orrs	r2, r1
 8002826:	61da      	str	r2, [r3, #28]
 8002828:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	055b      	lsls	r3, r3, #21
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002836:	183b      	adds	r3, r7, r0
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <HAL_RCC_OscConfig+0x338>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d11a      	bne.n	800287e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002848:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <HAL_RCC_OscConfig+0x338>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_RCC_OscConfig+0x338>)
 800284e:	2180      	movs	r1, #128	@ 0x80
 8002850:	0049      	lsls	r1, r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7fe fac5 	bl	8000de4 <HAL_GetTick>
 800285a:	0003      	movs	r3, r0
 800285c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fac0 	bl	8000de4 <HAL_GetTick>
 8002864:	0002      	movs	r2, r0
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	@ 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e185      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_OscConfig+0x338>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4013      	ands	r3, r2
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d10e      	bne.n	80028a4 <HAL_RCC_OscConfig+0x33c>
 8002886:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 8002888:	6a1a      	ldr	r2, [r3, #32]
 800288a:	4b02      	ldr	r3, [pc, #8]	@ (8002894 <HAL_RCC_OscConfig+0x32c>)
 800288c:	2101      	movs	r1, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	621a      	str	r2, [r3, #32]
 8002892:	e035      	b.n	8002900 <HAL_RCC_OscConfig+0x398>
 8002894:	40021000 	.word	0x40021000
 8002898:	fffeffff 	.word	0xfffeffff
 800289c:	fffbffff 	.word	0xfffbffff
 80028a0:	40007000 	.word	0x40007000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_OscConfig+0x35e>
 80028ac:	4bb6      	ldr	r3, [pc, #728]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	4bb5      	ldr	r3, [pc, #724]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	621a      	str	r2, [r3, #32]
 80028b8:	4bb3      	ldr	r3, [pc, #716]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	4bb2      	ldr	r3, [pc, #712]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028be:	2104      	movs	r1, #4
 80028c0:	438a      	bics	r2, r1
 80028c2:	621a      	str	r2, [r3, #32]
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x398>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x380>
 80028ce:	4bae      	ldr	r3, [pc, #696]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028d0:	6a1a      	ldr	r2, [r3, #32]
 80028d2:	4bad      	ldr	r3, [pc, #692]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028d4:	2104      	movs	r1, #4
 80028d6:	430a      	orrs	r2, r1
 80028d8:	621a      	str	r2, [r3, #32]
 80028da:	4bab      	ldr	r3, [pc, #684]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028dc:	6a1a      	ldr	r2, [r3, #32]
 80028de:	4baa      	ldr	r3, [pc, #680]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	621a      	str	r2, [r3, #32]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x398>
 80028e8:	4ba7      	ldr	r3, [pc, #668]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	4ba6      	ldr	r3, [pc, #664]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028ee:	2101      	movs	r1, #1
 80028f0:	438a      	bics	r2, r1
 80028f2:	621a      	str	r2, [r3, #32]
 80028f4:	4ba4      	ldr	r3, [pc, #656]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	4ba3      	ldr	r3, [pc, #652]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80028fa:	2104      	movs	r1, #4
 80028fc:	438a      	bics	r2, r1
 80028fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7fe fa6c 	bl	8000de4 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e009      	b.n	8002926 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fa67 	bl	8000de4 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a9b      	ldr	r2, [pc, #620]	@ (8002b8c <HAL_RCC_OscConfig+0x624>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e12b      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	4b98      	ldr	r3, [pc, #608]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x3aa>
 8002930:	e013      	b.n	800295a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7fe fa57 	bl	8000de4 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	e009      	b.n	8002950 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fa52 	bl	8000de4 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	4a91      	ldr	r2, [pc, #580]	@ (8002b8c <HAL_RCC_OscConfig+0x624>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e116      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	4b8d      	ldr	r3, [pc, #564]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	2202      	movs	r2, #2
 8002956:	4013      	ands	r3, r2
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800295a:	231f      	movs	r3, #31
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	4b87      	ldr	r3, [pc, #540]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 800296a:	4989      	ldr	r1, [pc, #548]	@ (8002b90 <HAL_RCC_OscConfig+0x628>)
 800296c:	400a      	ands	r2, r1
 800296e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	4013      	ands	r3, r2
 8002978:	d063      	beq.n	8002a42 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d12a      	bne.n	80029d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002982:	4b81      	ldr	r3, [pc, #516]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002986:	4b80      	ldr	r3, [pc, #512]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002988:	2104      	movs	r1, #4
 800298a:	430a      	orrs	r2, r1
 800298c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800298e:	4b7e      	ldr	r3, [pc, #504]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002992:	4b7d      	ldr	r3, [pc, #500]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe fa23 	bl	8000de4 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029a4:	f7fe fa1e 	bl	8000de4 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0e3      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029b6:	4b74      	ldr	r3, [pc, #464]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80029b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d0f1      	beq.n	80029a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029c0:	4b71      	ldr	r3, [pc, #452]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80029c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c4:	22f8      	movs	r2, #248	@ 0xf8
 80029c6:	4393      	bics	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	00da      	lsls	r2, r3, #3
 80029d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80029d2:	430a      	orrs	r2, r1
 80029d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80029d6:	e034      	b.n	8002a42 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	3305      	adds	r3, #5
 80029de:	d111      	bne.n	8002a04 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80029e0:	4b69      	ldr	r3, [pc, #420]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80029e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e4:	4b68      	ldr	r3, [pc, #416]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80029e6:	2104      	movs	r1, #4
 80029e8:	438a      	bics	r2, r1
 80029ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029ec:	4b66      	ldr	r3, [pc, #408]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80029ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f0:	22f8      	movs	r2, #248	@ 0xf8
 80029f2:	4393      	bics	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	00da      	lsls	r2, r3, #3
 80029fc:	4b62      	ldr	r3, [pc, #392]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a02:	e01e      	b.n	8002a42 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a04:	4b60      	ldr	r3, [pc, #384]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a08:	4b5f      	ldr	r3, [pc, #380]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a10:	4b5d      	ldr	r3, [pc, #372]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a14:	4b5c      	ldr	r3, [pc, #368]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a16:	2101      	movs	r1, #1
 8002a18:	438a      	bics	r2, r1
 8002a1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe f9e2 	bl	8000de4 <HAL_GetTick>
 8002a20:	0003      	movs	r3, r0
 8002a22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a26:	f7fe f9dd 	bl	8000de4 <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0a2      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a38:	4b53      	ldr	r3, [pc, #332]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d1f1      	bne.n	8002a26 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d100      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4e4>
 8002a4a:	e097      	b.n	8002b7c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	220c      	movs	r2, #12
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d100      	bne.n	8002a5a <HAL_RCC_OscConfig+0x4f2>
 8002a58:	e06b      	b.n	8002b32 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d14c      	bne.n	8002afc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b49      	ldr	r3, [pc, #292]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b48      	ldr	r3, [pc, #288]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a68:	494a      	ldr	r1, [pc, #296]	@ (8002b94 <HAL_RCC_OscConfig+0x62c>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f9b9 	bl	8000de4 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe f9b4 	bl	8000de4 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e079      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	049b      	lsls	r3, r3, #18
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a96:	4b3c      	ldr	r3, [pc, #240]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa4:	4b38      	ldr	r3, [pc, #224]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002aaa:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_RCC_OscConfig+0x630>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	431a      	orrs	r2, r3
 8002abe:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002aca:	2180      	movs	r1, #128	@ 0x80
 8002acc:	0449      	lsls	r1, r1, #17
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe f987 	bl	8000de4 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe f982 	bl	8000de4 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e047      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aee:	4b26      	ldr	r3, [pc, #152]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	049b      	lsls	r3, r3, #18
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x574>
 8002afa:	e03f      	b.n	8002b7c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afc:	4b22      	ldr	r3, [pc, #136]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002b02:	4924      	ldr	r1, [pc, #144]	@ (8002b94 <HAL_RCC_OscConfig+0x62c>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe f96c 	bl	8000de4 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fe f967 	bl	8000de4 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e02c      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	049b      	lsls	r3, r3, #18
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x5aa>
 8002b30:	e024      	b.n	8002b7c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e01f      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b44:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_RCC_OscConfig+0x620>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	025b      	lsls	r3, r3, #9
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10e      	bne.n	8002b78 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	23f0      	movs	r3, #240	@ 0xf0
 8002b6c:	039b      	lsls	r3, r3, #14
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b008      	add	sp, #32
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	00001388 	.word	0x00001388
 8002b90:	efffffff 	.word	0xefffffff
 8002b94:	feffffff 	.word	0xfeffffff
 8002b98:	ffc2ffff 	.word	0xffc2ffff

08002b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b3      	b.n	8002d18 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d911      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b58      	ldr	r3, [pc, #352]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4393      	bics	r3, r2
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	4b55      	ldr	r3, [pc, #340]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd0:	4b53      	ldr	r3, [pc, #332]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e09a      	b.n	8002d18 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d015      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d006      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002bfc:	21e0      	movs	r1, #224	@ 0xe0
 8002bfe:	00c9      	lsls	r1, r1, #3
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	22f0      	movs	r2, #240	@ 0xf0
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	4b44      	ldr	r3, [pc, #272]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d040      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	2380      	movs	r3, #128	@ 0x80
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	4013      	ands	r3, r2
 8002c34:	d114      	bne.n	8002c60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06e      	b.n	8002d18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c42:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2380      	movs	r3, #128	@ 0x80
 8002c48:	049b      	lsls	r3, r3, #18
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e062      	b.n	8002d18 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c52:	4b34      	ldr	r3, [pc, #208]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e05b      	b.n	8002d18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c60:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2203      	movs	r2, #3
 8002c66:	4393      	bics	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c74:	f7fe f8b6 	bl	8000de4 <HAL_GetTick>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	e009      	b.n	8002c92 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7e:	f7fe f8b1 	bl	8000de4 <HAL_GetTick>
 8002c82:	0002      	movs	r2, r0
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	4a27      	ldr	r2, [pc, #156]	@ (8002d28 <HAL_RCC_ClockConfig+0x18c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e042      	b.n	8002d18 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	220c      	movs	r2, #12
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d1ec      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4013      	ands	r3, r2
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d211      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4393      	bics	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc4:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <HAL_RCC_ClockConfig+0x184>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e020      	b.n	8002d18 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce0:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <HAL_RCC_ClockConfig+0x190>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cf4:	f000 f820 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf8:	0001      	movs	r1, r0
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <HAL_RCC_ClockConfig+0x188>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	220f      	movs	r2, #15
 8002d02:	4013      	ands	r3, r2
 8002d04:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <HAL_RCC_ClockConfig+0x194>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	000a      	movs	r2, r1
 8002d0a:	40da      	lsrs	r2, r3
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x198>)
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe f821 	bl	8000d58 <HAL_InitTick>
  
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40022000 	.word	0x40022000
 8002d24:	40021000 	.word	0x40021000
 8002d28:	00001388 	.word	0x00001388
 8002d2c:	fffff8ff 	.word	0xfffff8ff
 8002d30:	080050fc 	.word	0x080050fc
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x30>
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x36>
 8002d66:	e02c      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d6a:	613b      	str	r3, [r7, #16]
      break;
 8002d6c:	e02c      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0c9b      	lsrs	r3, r3, #18
 8002d72:	220f      	movs	r2, #15
 8002d74:	4013      	ands	r3, r2
 8002d76:	4a19      	ldr	r2, [pc, #100]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d7c:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	220f      	movs	r2, #15
 8002d82:	4013      	ands	r3, r2
 8002d84:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	025b      	lsls	r3, r3, #9
 8002d90:	4013      	ands	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4810      	ldr	r0, [pc, #64]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d98:	f7fd f9c0 	bl	800011c <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	001a      	movs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4353      	muls	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e009      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	000a      	movs	r2, r1
 8002dac:	0152      	lsls	r2, r2, #5
 8002dae:	1a52      	subs	r2, r2, r1
 8002db0:	0193      	lsls	r3, r2, #6
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	185b      	adds	r3, r3, r1
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
      break;
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dc4:	613b      	str	r3, [r7, #16]
      break;
 8002dc6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002dc8:	693b      	ldr	r3, [r7, #16]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b006      	add	sp, #24
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	007a1200 	.word	0x007a1200
 8002ddc:	08005114 	.word	0x08005114
 8002de0:	08005124 	.word	0x08005124

08002de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b02      	ldr	r3, [pc, #8]	@ (8002df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	20000000 	.word	0x20000000

08002df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002dfc:	f7ff fff2 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 8002e00:	0001      	movs	r1, r0
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	2207      	movs	r2, #7
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	4a04      	ldr	r2, [pc, #16]	@ (8002e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	40d9      	lsrs	r1, r3
 8002e12:	000b      	movs	r3, r1
}    
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	0800510c 	.word	0x0800510c

08002e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	025b      	lsls	r3, r3, #9
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e40:	e08e      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e42:	2017      	movs	r0, #23
 8002e44:	183b      	adds	r3, r7, r0
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b57      	ldr	r3, [pc, #348]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	2380      	movs	r3, #128	@ 0x80
 8002e50:	055b      	lsls	r3, r3, #21
 8002e52:	4013      	ands	r3, r2
 8002e54:	d110      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b54      	ldr	r3, [pc, #336]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	4b53      	ldr	r3, [pc, #332]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e5c:	2180      	movs	r1, #128	@ 0x80
 8002e5e:	0549      	lsls	r1, r1, #21
 8002e60:	430a      	orrs	r2, r1
 8002e62:	61da      	str	r2, [r3, #28]
 8002e64:	4b50      	ldr	r3, [pc, #320]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	055b      	lsls	r3, r3, #21
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	183b      	adds	r3, r7, r0
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b4c      	ldr	r3, [pc, #304]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d11a      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e84:	4b49      	ldr	r3, [pc, #292]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e8a:	2180      	movs	r1, #128	@ 0x80
 8002e8c:	0049      	lsls	r1, r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7fd ffa7 	bl	8000de4 <HAL_GetTick>
 8002e96:	0003      	movs	r3, r0
 8002e98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	e008      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fd ffa2 	bl	8000de4 <HAL_GetTick>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	@ 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e077      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b3f      	ldr	r3, [pc, #252]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eba:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	23c0      	movs	r3, #192	@ 0xc0
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d034      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	23c0      	movs	r3, #192	@ 0xc0
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d02c      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002edc:	4b32      	ldr	r3, [pc, #200]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a33      	ldr	r2, [pc, #204]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee6:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002eec:	2180      	movs	r1, #128	@ 0x80
 8002eee:	0249      	lsls	r1, r1, #9
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002efa:	492e      	ldr	r1, [pc, #184]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f00:	4b29      	ldr	r3, [pc, #164]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fd ff69 	bl	8000de4 <HAL_GetTick>
 8002f12:	0003      	movs	r3, r0
 8002f14:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	e009      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fd ff64 	bl	8000de4 <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	4a25      	ldr	r2, [pc, #148]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e038      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	2202      	movs	r2, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f4a:	2317      	movs	r3, #23
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f5a:	4918      	ldr	r1, [pc, #96]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	4013      	ands	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	2203      	movs	r2, #3
 8002f70:	4393      	bics	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2220      	movs	r2, #32
 8002f84:	4013      	ands	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f88:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	4393      	bics	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b006      	add	sp, #24
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	fffffcff 	.word	0xfffffcff
 8002fb4:	fffeffff 	.word	0xfffeffff
 8002fb8:	00001388 	.word	0x00001388
 8002fbc:	efffffff 	.word	0xefffffff

08002fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e044      	b.n	800305c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2278      	movs	r2, #120	@ 0x78
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7fd fd35 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2224      	movs	r2, #36	@ 0x24
 8002fee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0018      	movs	r0, r3
 800300c:	f000 fa86 	bl	800351c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f942 	bl	800329c <UART_SetConfig>
 8003018:	0003      	movs	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e01c      	b.n	800305c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	490d      	ldr	r1, [pc, #52]	@ (8003064 <HAL_UART_Init+0xa4>)
 800302e:	400a      	ands	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2108      	movs	r1, #8
 800303e:	438a      	bics	r2, r1
 8003040:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2101      	movs	r1, #1
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 fb15 	bl	8003684 <UART_CheckIdleState>
 800305a:	0003      	movs	r3, r0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}
 8003064:	fffff7ff 	.word	0xfffff7ff

08003068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	@ 0x28
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	1dbb      	adds	r3, r7, #6
 8003076:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800307c:	2b20      	cmp	r3, #32
 800307e:	d000      	beq.n	8003082 <HAL_UART_Transmit+0x1a>
 8003080:	e08c      	b.n	800319c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_UART_Transmit+0x28>
 8003088:	1dbb      	adds	r3, r7, #6
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e084      	b.n	800319e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	015b      	lsls	r3, r3, #5
 800309c:	429a      	cmp	r2, r3
 800309e:	d109      	bne.n	80030b4 <HAL_UART_Transmit+0x4c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e074      	b.n	800319e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2284      	movs	r2, #132	@ 0x84
 80030b8:	2100      	movs	r1, #0
 80030ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2221      	movs	r2, #33	@ 0x21
 80030c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c2:	f7fd fe8f 	bl	8000de4 <HAL_GetTick>
 80030c6:	0003      	movs	r3, r0
 80030c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1dba      	adds	r2, r7, #6
 80030ce:	2150      	movs	r1, #80	@ 0x50
 80030d0:	8812      	ldrh	r2, [r2, #0]
 80030d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1dba      	adds	r2, r7, #6
 80030d8:	2152      	movs	r1, #82	@ 0x52
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	015b      	lsls	r3, r3, #5
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d108      	bne.n	80030fc <HAL_UART_Transmit+0x94>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e003      	b.n	8003104 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003104:	e02f      	b.n	8003166 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	0013      	movs	r3, r2
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	@ 0x80
 8003114:	f000 fb5e 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d004      	beq.n	8003126 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e03b      	b.n	800319e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	05d2      	lsls	r2, r2, #23
 8003136:	0dd2      	lsrs	r2, r2, #23
 8003138:	b292      	uxth	r2, r2
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	3302      	adds	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e007      	b.n	8003154 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2252      	movs	r2, #82	@ 0x52
 8003158:	5a9b      	ldrh	r3, [r3, r2]
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b299      	uxth	r1, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2252      	movs	r2, #82	@ 0x52
 8003164:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2252      	movs	r2, #82	@ 0x52
 800316a:	5a9b      	ldrh	r3, [r3, r2]
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1c9      	bne.n	8003106 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	0013      	movs	r3, r2
 800317c:	2200      	movs	r2, #0
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	f000 fb28 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003184:	1e03      	subs	r3, r0, #0
 8003186:	d004      	beq.n	8003192 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e005      	b.n	800319e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b008      	add	sp, #32
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b088      	sub	sp, #32
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	1dbb      	adds	r3, r7, #6
 80031b2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2280      	movs	r2, #128	@ 0x80
 80031b8:	589b      	ldr	r3, [r3, r2]
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d145      	bne.n	800324a <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_UART_Receive_DMA+0x26>
 80031c4:	1dbb      	adds	r3, r7, #6
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e03d      	b.n	800324c <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	429a      	cmp	r2, r3
 80031da:	d109      	bne.n	80031f0 <HAL_UART_Receive_DMA+0x4a>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2201      	movs	r2, #1
 80031e8:	4013      	ands	r3, r2
 80031ea:	d001      	beq.n	80031f0 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e02d      	b.n	800324c <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	4013      	ands	r3, r2
 8003202:	d019      	beq.n	8003238 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003204:	f3ef 8310 	mrs	r3, PRIMASK
 8003208:	613b      	str	r3, [r7, #16]
  return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	2301      	movs	r3, #1
 8003210:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f383 8810 	msr	PRIMASK, r3
}
 8003218:	46c0      	nop			@ (mov r8, r8)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	04c9      	lsls	r1, r1, #19
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f383 8810 	msr	PRIMASK, r3
}
 8003236:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003238:	1dbb      	adds	r3, r7, #6
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0018      	movs	r0, r3
 8003242:	f000 fb37 	bl	80038b4 <UART_Start_Receive_DMA>
 8003246:	0003      	movs	r3, r0
 8003248:	e000      	b.n	800324c <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
  }
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b008      	add	sp, #32
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800325c:	46c0      	nop			@ (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800327c:	46c0      	nop			@ (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	000a      	movs	r2, r1
 800328e:	1cbb      	adds	r3, r7, #2
 8003290:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a4:	231e      	movs	r3, #30
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a8d      	ldr	r2, [pc, #564]	@ (8003500 <UART_SetConfig+0x264>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a88      	ldr	r2, [pc, #544]	@ (8003504 <UART_SetConfig+0x268>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a7f      	ldr	r2, [pc, #508]	@ (8003508 <UART_SetConfig+0x26c>)
 800330a:	4013      	ands	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7b      	ldr	r2, [pc, #492]	@ (800350c <UART_SetConfig+0x270>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d127      	bne.n	8003372 <UART_SetConfig+0xd6>
 8003322:	4b7b      	ldr	r3, [pc, #492]	@ (8003510 <UART_SetConfig+0x274>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	2203      	movs	r2, #3
 8003328:	4013      	ands	r3, r2
 800332a:	2b03      	cmp	r3, #3
 800332c:	d00d      	beq.n	800334a <UART_SetConfig+0xae>
 800332e:	d81b      	bhi.n	8003368 <UART_SetConfig+0xcc>
 8003330:	2b02      	cmp	r3, #2
 8003332:	d014      	beq.n	800335e <UART_SetConfig+0xc2>
 8003334:	d818      	bhi.n	8003368 <UART_SetConfig+0xcc>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <UART_SetConfig+0xa4>
 800333a:	2b01      	cmp	r3, #1
 800333c:	d00a      	beq.n	8003354 <UART_SetConfig+0xb8>
 800333e:	e013      	b.n	8003368 <UART_SetConfig+0xcc>
 8003340:	231f      	movs	r3, #31
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e021      	b.n	800338e <UART_SetConfig+0xf2>
 800334a:	231f      	movs	r3, #31
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2202      	movs	r2, #2
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e01c      	b.n	800338e <UART_SetConfig+0xf2>
 8003354:	231f      	movs	r3, #31
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2204      	movs	r2, #4
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e017      	b.n	800338e <UART_SetConfig+0xf2>
 800335e:	231f      	movs	r3, #31
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2208      	movs	r2, #8
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e012      	b.n	800338e <UART_SetConfig+0xf2>
 8003368:	231f      	movs	r3, #31
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2210      	movs	r2, #16
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e00d      	b.n	800338e <UART_SetConfig+0xf2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <UART_SetConfig+0x278>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d104      	bne.n	8003386 <UART_SetConfig+0xea>
 800337c:	231f      	movs	r3, #31
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e003      	b.n	800338e <UART_SetConfig+0xf2>
 8003386:	231f      	movs	r3, #31
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2210      	movs	r2, #16
 800338c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	429a      	cmp	r2, r3
 8003398:	d15c      	bne.n	8003454 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800339a:	231f      	movs	r3, #31
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d015      	beq.n	80033d0 <UART_SetConfig+0x134>
 80033a4:	dc18      	bgt.n	80033d8 <UART_SetConfig+0x13c>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00d      	beq.n	80033c6 <UART_SetConfig+0x12a>
 80033aa:	dc15      	bgt.n	80033d8 <UART_SetConfig+0x13c>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <UART_SetConfig+0x11a>
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d005      	beq.n	80033c0 <UART_SetConfig+0x124>
 80033b4:	e010      	b.n	80033d8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b6:	f7ff fd1f 	bl	8002df8 <HAL_RCC_GetPCLK1Freq>
 80033ba:	0003      	movs	r3, r0
 80033bc:	61bb      	str	r3, [r7, #24]
        break;
 80033be:	e012      	b.n	80033e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b55      	ldr	r3, [pc, #340]	@ (8003518 <UART_SetConfig+0x27c>)
 80033c2:	61bb      	str	r3, [r7, #24]
        break;
 80033c4:	e00f      	b.n	80033e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7ff fcb7 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 80033ca:	0003      	movs	r3, r0
 80033cc:	61bb      	str	r3, [r7, #24]
        break;
 80033ce:	e00a      	b.n	80033e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	61bb      	str	r3, [r7, #24]
        break;
 80033d6:	e006      	b.n	80033e6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033dc:	231e      	movs	r3, #30
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
        break;
 80033e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d100      	bne.n	80033ee <UART_SetConfig+0x152>
 80033ec:	e07a      	b.n	80034e4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	005a      	lsls	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	18d2      	adds	r2, r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	0019      	movs	r1, r3
 8003400:	0010      	movs	r0, r2
 8003402:	f7fc fe8b 	bl	800011c <__udivsi3>
 8003406:	0003      	movs	r3, r0
 8003408:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d91c      	bls.n	800344a <UART_SetConfig+0x1ae>
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	025b      	lsls	r3, r3, #9
 8003416:	429a      	cmp	r2, r3
 8003418:	d217      	bcs.n	800344a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	b29a      	uxth	r2, r3
 800341e:	200e      	movs	r0, #14
 8003420:	183b      	adds	r3, r7, r0
 8003422:	210f      	movs	r1, #15
 8003424:	438a      	bics	r2, r1
 8003426:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	2207      	movs	r2, #7
 8003430:	4013      	ands	r3, r2
 8003432:	b299      	uxth	r1, r3
 8003434:	183b      	adds	r3, r7, r0
 8003436:	183a      	adds	r2, r7, r0
 8003438:	8812      	ldrh	r2, [r2, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	183a      	adds	r2, r7, r0
 8003444:	8812      	ldrh	r2, [r2, #0]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e04c      	b.n	80034e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800344a:	231e      	movs	r3, #30
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e047      	b.n	80034e4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003454:	231f      	movs	r3, #31
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d015      	beq.n	800348a <UART_SetConfig+0x1ee>
 800345e:	dc18      	bgt.n	8003492 <UART_SetConfig+0x1f6>
 8003460:	2b04      	cmp	r3, #4
 8003462:	d00d      	beq.n	8003480 <UART_SetConfig+0x1e4>
 8003464:	dc15      	bgt.n	8003492 <UART_SetConfig+0x1f6>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <UART_SetConfig+0x1d4>
 800346a:	2b02      	cmp	r3, #2
 800346c:	d005      	beq.n	800347a <UART_SetConfig+0x1de>
 800346e:	e010      	b.n	8003492 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003470:	f7ff fcc2 	bl	8002df8 <HAL_RCC_GetPCLK1Freq>
 8003474:	0003      	movs	r3, r0
 8003476:	61bb      	str	r3, [r7, #24]
        break;
 8003478:	e012      	b.n	80034a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800347a:	4b27      	ldr	r3, [pc, #156]	@ (8003518 <UART_SetConfig+0x27c>)
 800347c:	61bb      	str	r3, [r7, #24]
        break;
 800347e:	e00f      	b.n	80034a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003480:	f7ff fc5a 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8003484:	0003      	movs	r3, r0
 8003486:	61bb      	str	r3, [r7, #24]
        break;
 8003488:	e00a      	b.n	80034a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e006      	b.n	80034a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003496:	231e      	movs	r3, #30
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
        break;
 800349e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01e      	beq.n	80034e4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085a      	lsrs	r2, r3, #1
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	18d2      	adds	r2, r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0019      	movs	r1, r3
 80034b6:	0010      	movs	r0, r2
 80034b8:	f7fc fe30 	bl	800011c <__udivsi3>
 80034bc:	0003      	movs	r3, r0
 80034be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d90a      	bls.n	80034dc <UART_SetConfig+0x240>
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d205      	bcs.n	80034dc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	e003      	b.n	80034e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80034dc:	231e      	movs	r3, #30
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034f0:	231e      	movs	r3, #30
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	781b      	ldrb	r3, [r3, #0]
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b008      	add	sp, #32
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	ffff69f3 	.word	0xffff69f3
 8003504:	ffffcfff 	.word	0xffffcfff
 8003508:	fffff4ff 	.word	0xfffff4ff
 800350c:	40013800 	.word	0x40013800
 8003510:	40021000 	.word	0x40021000
 8003514:	40004400 	.word	0x40004400
 8003518:	007a1200 	.word	0x007a1200

0800351c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	2208      	movs	r2, #8
 800352a:	4013      	ands	r3, r2
 800352c:	d00b      	beq.n	8003546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a4a      	ldr	r2, [pc, #296]	@ (8003660 <UART_AdvFeatureConfig+0x144>)
 8003536:	4013      	ands	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	2201      	movs	r2, #1
 800354c:	4013      	ands	r3, r2
 800354e:	d00b      	beq.n	8003568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a43      	ldr	r2, [pc, #268]	@ (8003664 <UART_AdvFeatureConfig+0x148>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	d00b      	beq.n	800358a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a3b      	ldr	r2, [pc, #236]	@ (8003668 <UART_AdvFeatureConfig+0x14c>)
 800357a:	4013      	ands	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	2204      	movs	r2, #4
 8003590:	4013      	ands	r3, r2
 8003592:	d00b      	beq.n	80035ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4a34      	ldr	r2, [pc, #208]	@ (800366c <UART_AdvFeatureConfig+0x150>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	2210      	movs	r2, #16
 80035b2:	4013      	ands	r3, r2
 80035b4:	d00b      	beq.n	80035ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003670 <UART_AdvFeatureConfig+0x154>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	2220      	movs	r2, #32
 80035d4:	4013      	ands	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4a25      	ldr	r2, [pc, #148]	@ (8003674 <UART_AdvFeatureConfig+0x158>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	2240      	movs	r2, #64	@ 0x40
 80035f6:	4013      	ands	r3, r2
 80035f8:	d01d      	beq.n	8003636 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a1d      	ldr	r2, [pc, #116]	@ (8003678 <UART_AdvFeatureConfig+0x15c>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003616:	2380      	movs	r3, #128	@ 0x80
 8003618:	035b      	lsls	r3, r3, #13
 800361a:	429a      	cmp	r2, r3
 800361c:	d10b      	bne.n	8003636 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a15      	ldr	r2, [pc, #84]	@ (800367c <UART_AdvFeatureConfig+0x160>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	2280      	movs	r2, #128	@ 0x80
 800363c:	4013      	ands	r3, r2
 800363e:	d00b      	beq.n	8003658 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a0e      	ldr	r2, [pc, #56]	@ (8003680 <UART_AdvFeatureConfig+0x164>)
 8003648:	4013      	ands	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }
}
 8003658:	46c0      	nop			@ (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}
 8003660:	ffff7fff 	.word	0xffff7fff
 8003664:	fffdffff 	.word	0xfffdffff
 8003668:	fffeffff 	.word	0xfffeffff
 800366c:	fffbffff 	.word	0xfffbffff
 8003670:	ffffefff 	.word	0xffffefff
 8003674:	ffffdfff 	.word	0xffffdfff
 8003678:	ffefffff 	.word	0xffefffff
 800367c:	ff9fffff 	.word	0xff9fffff
 8003680:	fff7ffff 	.word	0xfff7ffff

08003684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b092      	sub	sp, #72	@ 0x48
 8003688:	af02      	add	r7, sp, #8
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2284      	movs	r2, #132	@ 0x84
 8003690:	2100      	movs	r1, #0
 8003692:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003694:	f7fd fba6 	bl	8000de4 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2208      	movs	r2, #8
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d12c      	bne.n	8003704 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ac:	2280      	movs	r2, #128	@ 0x80
 80036ae:	0391      	lsls	r1, r2, #14
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4a46      	ldr	r2, [pc, #280]	@ (80037cc <UART_CheckIdleState+0x148>)
 80036b4:	9200      	str	r2, [sp, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f000 f88c 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d021      	beq.n	8003704 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c0:	f3ef 8310 	mrs	r3, PRIMASK
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036ca:	2301      	movs	r3, #1
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	f383 8810 	msr	PRIMASK, r3
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	438a      	bics	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2278      	movs	r2, #120	@ 0x78
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e05f      	b.n	80037c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2204      	movs	r2, #4
 800370c:	4013      	ands	r3, r2
 800370e:	2b04      	cmp	r3, #4
 8003710:	d146      	bne.n	80037a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003714:	2280      	movs	r2, #128	@ 0x80
 8003716:	03d1      	lsls	r1, r2, #15
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4a2c      	ldr	r2, [pc, #176]	@ (80037cc <UART_CheckIdleState+0x148>)
 800371c:	9200      	str	r2, [sp, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	f000 f858 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d03b      	beq.n	80037a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003728:	f3ef 8310 	mrs	r3, PRIMASK
 800372c:	60fb      	str	r3, [r7, #12]
  return(result);
 800372e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
 8003732:	2301      	movs	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			@ (mov r8, r8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4921      	ldr	r1, [pc, #132]	@ (80037d0 <UART_CheckIdleState+0x14c>)
 800374a:	400a      	ands	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003760:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	633b      	str	r3, [r7, #48]	@ 0x30
 8003764:	2301      	movs	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2101      	movs	r1, #1
 800377c:	438a      	bics	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2280      	movs	r2, #128	@ 0x80
 8003790:	2120      	movs	r1, #32
 8003792:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2278      	movs	r2, #120	@ 0x78
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e011      	b.n	80037c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	2120      	movs	r1, #32
 80037ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2278      	movs	r2, #120	@ 0x78
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b010      	add	sp, #64	@ 0x40
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	01ffffff 	.word	0x01ffffff
 80037d0:	fffffedf 	.word	0xfffffedf

080037d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e4:	e051      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3301      	adds	r3, #1
 80037ea:	d04e      	beq.n	800388a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fd fafa 	bl	8000de4 <HAL_GetTick>
 80037f0:	0002      	movs	r2, r0
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <UART_WaitOnFlagUntilTimeout+0x2e>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e051      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2204      	movs	r2, #4
 800380e:	4013      	ands	r3, r2
 8003810:	d03b      	beq.n	800388a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b80      	cmp	r3, #128	@ 0x80
 8003816:	d038      	beq.n	800388a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b40      	cmp	r3, #64	@ 0x40
 800381c:	d035      	beq.n	800388a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2208      	movs	r2, #8
 8003826:	4013      	ands	r3, r2
 8003828:	2b08      	cmp	r3, #8
 800382a:	d111      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2208      	movs	r2, #8
 8003832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 f900 	bl	8003a3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2284      	movs	r2, #132	@ 0x84
 8003840:	2108      	movs	r1, #8
 8003842:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2278      	movs	r2, #120	@ 0x78
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e02c      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	401a      	ands	r2, r3
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	429a      	cmp	r2, r3
 8003862:	d112      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f8e3 	bl	8003a3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2284      	movs	r2, #132	@ 0x84
 800387a:	2120      	movs	r1, #32
 800387c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2278      	movs	r2, #120	@ 0x78
 8003882:	2100      	movs	r1, #0
 8003884:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e00f      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4013      	ands	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	425a      	negs	r2, r3
 800389a:	4153      	adcs	r3, r2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	001a      	movs	r2, r3
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d09e      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b090      	sub	sp, #64	@ 0x40
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	1dbb      	adds	r3, r7, #6
 80038c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1dba      	adds	r2, r7, #6
 80038cc:	2158      	movs	r1, #88	@ 0x58
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2284      	movs	r2, #132	@ 0x84
 80038d6:	2100      	movs	r1, #0
 80038d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2280      	movs	r2, #128	@ 0x80
 80038de:	2122      	movs	r1, #34	@ 0x22
 80038e0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d028      	beq.n	800393c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ee:	4a3e      	ldr	r2, [pc, #248]	@ (80039e8 <UART_Start_Receive_DMA+0x134>)
 80038f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	4a3d      	ldr	r2, [pc, #244]	@ (80039ec <UART_Start_Receive_DMA+0x138>)
 80038f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	4a3c      	ldr	r2, [pc, #240]	@ (80039f0 <UART_Start_Receive_DMA+0x13c>)
 8003900:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3324      	adds	r3, #36	@ 0x24
 8003914:	0019      	movs	r1, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	001a      	movs	r2, r3
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f7fd fb90 	bl	8001044 <HAL_DMA_Start_IT>
 8003924:	1e03      	subs	r3, r0, #0
 8003926:	d009      	beq.n	800393c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2284      	movs	r2, #132	@ 0x84
 800392c:	2110      	movs	r1, #16
 800392e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2280      	movs	r2, #128	@ 0x80
 8003934:	2120      	movs	r1, #32
 8003936:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e050      	b.n	80039de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d019      	beq.n	8003978 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003944:	f3ef 8310 	mrs	r3, PRIMASK
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800394e:	2301      	movs	r3, #1
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2180      	movs	r1, #128	@ 0x80
 8003966:	0049      	lsls	r1, r1, #1
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	613b      	str	r3, [r7, #16]
  return(result);
 800397e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003982:	2301      	movs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039aa:	f3ef 8310 	mrs	r3, PRIMASK
 80039ae:	61fb      	str	r3, [r7, #28]
  return(result);
 80039b0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039b4:	2301      	movs	r3, #1
 80039b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2140      	movs	r1, #64	@ 0x40
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b010      	add	sp, #64	@ 0x40
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	08003b05 	.word	0x08003b05
 80039ec:	08003c31 	.word	0x08003c31
 80039f0:	08003c73 	.word	0x08003c73

080039f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a02:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	2301      	movs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	21c0      	movs	r1, #192	@ 0xc0
 8003a1e:	438a      	bics	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003a34:	46c0      	nop			@ (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b006      	add	sp, #24
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	@ 0x38
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a44:	f3ef 8310 	mrs	r3, PRIMASK
 8003a48:	617b      	str	r3, [r7, #20]
  return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f383 8810 	msr	PRIMASK, r3
}
 8003a58:	46c0      	nop			@ (mov r8, r8)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4926      	ldr	r1, [pc, #152]	@ (8003b00 <UART_EndRxTransfer+0xc4>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a76:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7a:	623b      	str	r3, [r7, #32]
  return(result);
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a80:	2301      	movs	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	f383 8810 	msr	PRIMASK, r3
}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	438a      	bics	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d118      	bne.n	8003ae2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aba:	2301      	movs	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	438a      	bics	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	@ 0x80
 8003ae6:	2120      	movs	r1, #32
 8003ae8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b00e      	add	sp, #56	@ 0x38
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	fffffedf 	.word	0xfffffedf

08003b04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b094      	sub	sp, #80	@ 0x50
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d06f      	beq.n	8003bfa <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b1c:	225a      	movs	r2, #90	@ 0x5a
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b22:	f3ef 8310 	mrs	r3, PRIMASK
 8003b26:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b28:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f383 8810 	msr	PRIMASK, r3
}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	493a      	ldr	r1, [pc, #232]	@ (8003c2c <UART_DMAReceiveCplt+0x128>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f383 8810 	msr	PRIMASK, r3
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b54:	f3ef 8310 	mrs	r3, PRIMASK
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b5e:	2301      	movs	r3, #1
 8003b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	f383 8810 	msr	PRIMASK, r3
}
 8003b68:	46c0      	nop			@ (mov r8, r8)
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2101      	movs	r1, #1
 8003b76:	438a      	bics	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]
 8003b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	f383 8810 	msr	PRIMASK, r3
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b86:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b90:	2301      	movs	r3, #1
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2140      	movs	r1, #64	@ 0x40
 8003ba8:	438a      	bics	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb2:	f383 8810 	msr	PRIMASK, r3
}
 8003bb6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bba:	2280      	movs	r2, #128	@ 0x80
 8003bbc:	2120      	movs	r1, #32
 8003bbe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d118      	bne.n	8003bfa <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bce:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2110      	movs	r1, #16
 8003bea:	438a      	bics	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d108      	bne.n	8003c1a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c0a:	2258      	movs	r2, #88	@ 0x58
 8003c0c:	5a9a      	ldrh	r2, [r3, r2]
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c10:	0011      	movs	r1, r2
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7ff fb36 	bl	8003284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c18:	e003      	b.n	8003c22 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7ff fb19 	bl	8003254 <HAL_UART_RxCpltCallback>
}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b014      	add	sp, #80	@ 0x50
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	fffffeff 	.word	0xfffffeff

08003c30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10a      	bne.n	8003c62 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2258      	movs	r2, #88	@ 0x58
 8003c50:	5a9b      	ldrh	r3, [r3, r2]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0011      	movs	r1, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7ff fb12 	bl	8003284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c60:	e003      	b.n	8003c6a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff fafd 	bl	8003264 <HAL_UART_RxHalfCpltCallback>
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	589b      	ldr	r3, [r3, r2]
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2280      	movs	r2, #128	@ 0x80
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b80      	cmp	r3, #128	@ 0x80
 8003c9a:	d10a      	bne.n	8003cb2 <UART_DMAError+0x40>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b21      	cmp	r3, #33	@ 0x21
 8003ca0:	d107      	bne.n	8003cb2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2252      	movs	r2, #82	@ 0x52
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff fea1 	bl	80039f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2240      	movs	r2, #64	@ 0x40
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b40      	cmp	r3, #64	@ 0x40
 8003cbe:	d10a      	bne.n	8003cd6 <UART_DMAError+0x64>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b22      	cmp	r3, #34	@ 0x22
 8003cc4:	d107      	bne.n	8003cd6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	225a      	movs	r2, #90	@ 0x5a
 8003cca:	2100      	movs	r1, #0
 8003ccc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff feb3 	bl	8003a3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2284      	movs	r2, #132	@ 0x84
 8003cda:	589b      	ldr	r3, [r3, r2]
 8003cdc:	2210      	movs	r2, #16
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2184      	movs	r1, #132	@ 0x84
 8003ce4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff fac3 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b006      	add	sp, #24
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <atoi>:
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	220a      	movs	r2, #10
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f000 f88c 	bl	8003e18 <strtol>
 8003d00:	bd10      	pop	{r4, pc}
	...

08003d04 <_strtol_l.constprop.0>:
 8003d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	0017      	movs	r7, r2
 8003d0a:	001e      	movs	r6, r3
 8003d0c:	9003      	str	r0, [sp, #12]
 8003d0e:	9101      	str	r1, [sp, #4]
 8003d10:	2b24      	cmp	r3, #36	@ 0x24
 8003d12:	d844      	bhi.n	8003d9e <_strtol_l.constprop.0+0x9a>
 8003d14:	000c      	movs	r4, r1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d041      	beq.n	8003d9e <_strtol_l.constprop.0+0x9a>
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <_strtol_l.constprop.0+0x10c>)
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	469c      	mov	ip, r3
 8003d20:	0023      	movs	r3, r4
 8003d22:	4661      	mov	r1, ip
 8003d24:	781d      	ldrb	r5, [r3, #0]
 8003d26:	3401      	adds	r4, #1
 8003d28:	5d48      	ldrb	r0, [r1, r5]
 8003d2a:	0001      	movs	r1, r0
 8003d2c:	4011      	ands	r1, r2
 8003d2e:	4210      	tst	r0, r2
 8003d30:	d1f6      	bne.n	8003d20 <_strtol_l.constprop.0+0x1c>
 8003d32:	2d2d      	cmp	r5, #45	@ 0x2d
 8003d34:	d13a      	bne.n	8003dac <_strtol_l.constprop.0+0xa8>
 8003d36:	7825      	ldrb	r5, [r4, #0]
 8003d38:	1c9c      	adds	r4, r3, #2
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2210      	movs	r2, #16
 8003d40:	0033      	movs	r3, r6
 8003d42:	4393      	bics	r3, r2
 8003d44:	d109      	bne.n	8003d5a <_strtol_l.constprop.0+0x56>
 8003d46:	2d30      	cmp	r5, #48	@ 0x30
 8003d48:	d136      	bne.n	8003db8 <_strtol_l.constprop.0+0xb4>
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	7823      	ldrb	r3, [r4, #0]
 8003d4e:	438b      	bics	r3, r1
 8003d50:	2b58      	cmp	r3, #88	@ 0x58
 8003d52:	d131      	bne.n	8003db8 <_strtol_l.constprop.0+0xb4>
 8003d54:	0016      	movs	r6, r2
 8003d56:	7865      	ldrb	r5, [r4, #1]
 8003d58:	3402      	adds	r4, #2
 8003d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003e14 <_strtol_l.constprop.0+0x110>)
 8003d5c:	9b00      	ldr	r3, [sp, #0]
 8003d5e:	4694      	mov	ip, r2
 8003d60:	4463      	add	r3, ip
 8003d62:	0031      	movs	r1, r6
 8003d64:	0018      	movs	r0, r3
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	f7fc fa5e 	bl	8000228 <__aeabi_uidivmod>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	4684      	mov	ip, r0
 8003d70:	0010      	movs	r0, r2
 8003d72:	002b      	movs	r3, r5
 8003d74:	3b30      	subs	r3, #48	@ 0x30
 8003d76:	2b09      	cmp	r3, #9
 8003d78:	d825      	bhi.n	8003dc6 <_strtol_l.constprop.0+0xc2>
 8003d7a:	001d      	movs	r5, r3
 8003d7c:	42ae      	cmp	r6, r5
 8003d7e:	dd31      	ble.n	8003de4 <_strtol_l.constprop.0+0xe0>
 8003d80:	1c53      	adds	r3, r2, #1
 8003d82:	d009      	beq.n	8003d98 <_strtol_l.constprop.0+0x94>
 8003d84:	2201      	movs	r2, #1
 8003d86:	4252      	negs	r2, r2
 8003d88:	4584      	cmp	ip, r0
 8003d8a:	d305      	bcc.n	8003d98 <_strtol_l.constprop.0+0x94>
 8003d8c:	d101      	bne.n	8003d92 <_strtol_l.constprop.0+0x8e>
 8003d8e:	42a9      	cmp	r1, r5
 8003d90:	db25      	blt.n	8003dde <_strtol_l.constprop.0+0xda>
 8003d92:	2201      	movs	r2, #1
 8003d94:	4370      	muls	r0, r6
 8003d96:	1828      	adds	r0, r5, r0
 8003d98:	7825      	ldrb	r5, [r4, #0]
 8003d9a:	3401      	adds	r4, #1
 8003d9c:	e7e9      	b.n	8003d72 <_strtol_l.constprop.0+0x6e>
 8003d9e:	f000 fb41 	bl	8004424 <__errno>
 8003da2:	2316      	movs	r3, #22
 8003da4:	6003      	str	r3, [r0, #0]
 8003da6:	2000      	movs	r0, #0
 8003da8:	b005      	add	sp, #20
 8003daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dac:	9100      	str	r1, [sp, #0]
 8003dae:	2d2b      	cmp	r5, #43	@ 0x2b
 8003db0:	d1c5      	bne.n	8003d3e <_strtol_l.constprop.0+0x3a>
 8003db2:	7825      	ldrb	r5, [r4, #0]
 8003db4:	1c9c      	adds	r4, r3, #2
 8003db6:	e7c2      	b.n	8003d3e <_strtol_l.constprop.0+0x3a>
 8003db8:	2e00      	cmp	r6, #0
 8003dba:	d1ce      	bne.n	8003d5a <_strtol_l.constprop.0+0x56>
 8003dbc:	3608      	adds	r6, #8
 8003dbe:	2d30      	cmp	r5, #48	@ 0x30
 8003dc0:	d0cb      	beq.n	8003d5a <_strtol_l.constprop.0+0x56>
 8003dc2:	3602      	adds	r6, #2
 8003dc4:	e7c9      	b.n	8003d5a <_strtol_l.constprop.0+0x56>
 8003dc6:	002b      	movs	r3, r5
 8003dc8:	3b41      	subs	r3, #65	@ 0x41
 8003dca:	2b19      	cmp	r3, #25
 8003dcc:	d801      	bhi.n	8003dd2 <_strtol_l.constprop.0+0xce>
 8003dce:	3d37      	subs	r5, #55	@ 0x37
 8003dd0:	e7d4      	b.n	8003d7c <_strtol_l.constprop.0+0x78>
 8003dd2:	002b      	movs	r3, r5
 8003dd4:	3b61      	subs	r3, #97	@ 0x61
 8003dd6:	2b19      	cmp	r3, #25
 8003dd8:	d804      	bhi.n	8003de4 <_strtol_l.constprop.0+0xe0>
 8003dda:	3d57      	subs	r5, #87	@ 0x57
 8003ddc:	e7ce      	b.n	8003d7c <_strtol_l.constprop.0+0x78>
 8003dde:	2201      	movs	r2, #1
 8003de0:	4252      	negs	r2, r2
 8003de2:	e7d9      	b.n	8003d98 <_strtol_l.constprop.0+0x94>
 8003de4:	1c53      	adds	r3, r2, #1
 8003de6:	d108      	bne.n	8003dfa <_strtol_l.constprop.0+0xf6>
 8003de8:	2322      	movs	r3, #34	@ 0x22
 8003dea:	9a03      	ldr	r2, [sp, #12]
 8003dec:	9802      	ldr	r0, [sp, #8]
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	2f00      	cmp	r7, #0
 8003df2:	d0d9      	beq.n	8003da8 <_strtol_l.constprop.0+0xa4>
 8003df4:	1e63      	subs	r3, r4, #1
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	e007      	b.n	8003e0a <_strtol_l.constprop.0+0x106>
 8003dfa:	9b00      	ldr	r3, [sp, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d000      	beq.n	8003e02 <_strtol_l.constprop.0+0xfe>
 8003e00:	4240      	negs	r0, r0
 8003e02:	2f00      	cmp	r7, #0
 8003e04:	d0d0      	beq.n	8003da8 <_strtol_l.constprop.0+0xa4>
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d1f4      	bne.n	8003df4 <_strtol_l.constprop.0+0xf0>
 8003e0a:	9b01      	ldr	r3, [sp, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	e7cb      	b.n	8003da8 <_strtol_l.constprop.0+0xa4>
 8003e10:	08005135 	.word	0x08005135
 8003e14:	7fffffff 	.word	0x7fffffff

08003e18 <strtol>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4c04      	ldr	r4, [pc, #16]	@ (8003e2c <strtol+0x14>)
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	000a      	movs	r2, r1
 8003e20:	0001      	movs	r1, r0
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	f7ff ff6e 	bl	8003d04 <_strtol_l.constprop.0>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	20000018 	.word	0x20000018

08003e30 <std>:
 8003e30:	2300      	movs	r3, #0
 8003e32:	b510      	push	{r4, lr}
 8003e34:	0004      	movs	r4, r0
 8003e36:	6003      	str	r3, [r0, #0]
 8003e38:	6043      	str	r3, [r0, #4]
 8003e3a:	6083      	str	r3, [r0, #8]
 8003e3c:	8181      	strh	r1, [r0, #12]
 8003e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e40:	81c2      	strh	r2, [r0, #14]
 8003e42:	6103      	str	r3, [r0, #16]
 8003e44:	6143      	str	r3, [r0, #20]
 8003e46:	6183      	str	r3, [r0, #24]
 8003e48:	0019      	movs	r1, r3
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	305c      	adds	r0, #92	@ 0x5c
 8003e4e:	f000 fa19 	bl	8004284 <memset>
 8003e52:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <std+0x50>)
 8003e54:	6224      	str	r4, [r4, #32]
 8003e56:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <std+0x54>)
 8003e5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <std+0x58>)
 8003e5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <std+0x5c>)
 8003e62:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e64:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <std+0x60>)
 8003e66:	429c      	cmp	r4, r3
 8003e68:	d005      	beq.n	8003e76 <std+0x46>
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <std+0x64>)
 8003e6c:	429c      	cmp	r4, r3
 8003e6e:	d002      	beq.n	8003e76 <std+0x46>
 8003e70:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <std+0x68>)
 8003e72:	429c      	cmp	r4, r3
 8003e74:	d103      	bne.n	8003e7e <std+0x4e>
 8003e76:	0020      	movs	r0, r4
 8003e78:	3058      	adds	r0, #88	@ 0x58
 8003e7a:	f000 fafd 	bl	8004478 <__retarget_lock_init_recursive>
 8003e7e:	bd10      	pop	{r4, pc}
 8003e80:	080040ad 	.word	0x080040ad
 8003e84:	080040d5 	.word	0x080040d5
 8003e88:	0800410d 	.word	0x0800410d
 8003e8c:	08004139 	.word	0x08004139
 8003e90:	200002f4 	.word	0x200002f4
 8003e94:	2000035c 	.word	0x2000035c
 8003e98:	200003c4 	.word	0x200003c4

08003e9c <stdio_exit_handler>:
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4a03      	ldr	r2, [pc, #12]	@ (8003eac <stdio_exit_handler+0x10>)
 8003ea0:	4903      	ldr	r1, [pc, #12]	@ (8003eb0 <stdio_exit_handler+0x14>)
 8003ea2:	4804      	ldr	r0, [pc, #16]	@ (8003eb4 <stdio_exit_handler+0x18>)
 8003ea4:	f000 f86c 	bl	8003f80 <_fwalk_sglue>
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	08004d59 	.word	0x08004d59
 8003eb4:	2000001c 	.word	0x2000001c

08003eb8 <cleanup_stdio>:
 8003eb8:	6841      	ldr	r1, [r0, #4]
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <cleanup_stdio+0x30>)
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	0004      	movs	r4, r0
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	d001      	beq.n	8003ec8 <cleanup_stdio+0x10>
 8003ec4:	f000 ff48 	bl	8004d58 <_fflush_r>
 8003ec8:	68a1      	ldr	r1, [r4, #8]
 8003eca:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <cleanup_stdio+0x34>)
 8003ecc:	4299      	cmp	r1, r3
 8003ece:	d002      	beq.n	8003ed6 <cleanup_stdio+0x1e>
 8003ed0:	0020      	movs	r0, r4
 8003ed2:	f000 ff41 	bl	8004d58 <_fflush_r>
 8003ed6:	68e1      	ldr	r1, [r4, #12]
 8003ed8:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <cleanup_stdio+0x38>)
 8003eda:	4299      	cmp	r1, r3
 8003edc:	d002      	beq.n	8003ee4 <cleanup_stdio+0x2c>
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f000 ff3a 	bl	8004d58 <_fflush_r>
 8003ee4:	bd10      	pop	{r4, pc}
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	200002f4 	.word	0x200002f4
 8003eec:	2000035c 	.word	0x2000035c
 8003ef0:	200003c4 	.word	0x200003c4

08003ef4 <global_stdio_init.part.0>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <global_stdio_init.part.0+0x28>)
 8003ef8:	4a09      	ldr	r2, [pc, #36]	@ (8003f20 <global_stdio_init.part.0+0x2c>)
 8003efa:	2104      	movs	r1, #4
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	4809      	ldr	r0, [pc, #36]	@ (8003f24 <global_stdio_init.part.0+0x30>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	f7ff ff95 	bl	8003e30 <std>
 8003f06:	2201      	movs	r2, #1
 8003f08:	2109      	movs	r1, #9
 8003f0a:	4807      	ldr	r0, [pc, #28]	@ (8003f28 <global_stdio_init.part.0+0x34>)
 8003f0c:	f7ff ff90 	bl	8003e30 <std>
 8003f10:	2202      	movs	r2, #2
 8003f12:	2112      	movs	r1, #18
 8003f14:	4805      	ldr	r0, [pc, #20]	@ (8003f2c <global_stdio_init.part.0+0x38>)
 8003f16:	f7ff ff8b 	bl	8003e30 <std>
 8003f1a:	bd10      	pop	{r4, pc}
 8003f1c:	2000042c 	.word	0x2000042c
 8003f20:	08003e9d 	.word	0x08003e9d
 8003f24:	200002f4 	.word	0x200002f4
 8003f28:	2000035c 	.word	0x2000035c
 8003f2c:	200003c4 	.word	0x200003c4

08003f30 <__sfp_lock_acquire>:
 8003f30:	b510      	push	{r4, lr}
 8003f32:	4802      	ldr	r0, [pc, #8]	@ (8003f3c <__sfp_lock_acquire+0xc>)
 8003f34:	f000 faa1 	bl	800447a <__retarget_lock_acquire_recursive>
 8003f38:	bd10      	pop	{r4, pc}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	20000435 	.word	0x20000435

08003f40 <__sfp_lock_release>:
 8003f40:	b510      	push	{r4, lr}
 8003f42:	4802      	ldr	r0, [pc, #8]	@ (8003f4c <__sfp_lock_release+0xc>)
 8003f44:	f000 fa9a 	bl	800447c <__retarget_lock_release_recursive>
 8003f48:	bd10      	pop	{r4, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	20000435 	.word	0x20000435

08003f50 <__sinit>:
 8003f50:	b510      	push	{r4, lr}
 8003f52:	0004      	movs	r4, r0
 8003f54:	f7ff ffec 	bl	8003f30 <__sfp_lock_acquire>
 8003f58:	6a23      	ldr	r3, [r4, #32]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <__sinit+0x14>
 8003f5e:	f7ff ffef 	bl	8003f40 <__sfp_lock_release>
 8003f62:	bd10      	pop	{r4, pc}
 8003f64:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <__sinit+0x28>)
 8003f66:	6223      	str	r3, [r4, #32]
 8003f68:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <__sinit+0x2c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f6      	bne.n	8003f5e <__sinit+0xe>
 8003f70:	f7ff ffc0 	bl	8003ef4 <global_stdio_init.part.0>
 8003f74:	e7f3      	b.n	8003f5e <__sinit+0xe>
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	08003eb9 	.word	0x08003eb9
 8003f7c:	2000042c 	.word	0x2000042c

08003f80 <_fwalk_sglue>:
 8003f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f82:	0014      	movs	r4, r2
 8003f84:	2600      	movs	r6, #0
 8003f86:	9000      	str	r0, [sp, #0]
 8003f88:	9101      	str	r1, [sp, #4]
 8003f8a:	68a5      	ldr	r5, [r4, #8]
 8003f8c:	6867      	ldr	r7, [r4, #4]
 8003f8e:	3f01      	subs	r7, #1
 8003f90:	d504      	bpl.n	8003f9c <_fwalk_sglue+0x1c>
 8003f92:	6824      	ldr	r4, [r4, #0]
 8003f94:	2c00      	cmp	r4, #0
 8003f96:	d1f8      	bne.n	8003f8a <_fwalk_sglue+0xa>
 8003f98:	0030      	movs	r0, r6
 8003f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f9c:	89ab      	ldrh	r3, [r5, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d908      	bls.n	8003fb4 <_fwalk_sglue+0x34>
 8003fa2:	220e      	movs	r2, #14
 8003fa4:	5eab      	ldrsh	r3, [r5, r2]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	d004      	beq.n	8003fb4 <_fwalk_sglue+0x34>
 8003faa:	0029      	movs	r1, r5
 8003fac:	9800      	ldr	r0, [sp, #0]
 8003fae:	9b01      	ldr	r3, [sp, #4]
 8003fb0:	4798      	blx	r3
 8003fb2:	4306      	orrs	r6, r0
 8003fb4:	3568      	adds	r5, #104	@ 0x68
 8003fb6:	e7ea      	b.n	8003f8e <_fwalk_sglue+0xe>

08003fb8 <iprintf>:
 8003fb8:	b40f      	push	{r0, r1, r2, r3}
 8003fba:	b507      	push	{r0, r1, r2, lr}
 8003fbc:	4905      	ldr	r1, [pc, #20]	@ (8003fd4 <iprintf+0x1c>)
 8003fbe:	ab04      	add	r3, sp, #16
 8003fc0:	6808      	ldr	r0, [r1, #0]
 8003fc2:	cb04      	ldmia	r3!, {r2}
 8003fc4:	6881      	ldr	r1, [r0, #8]
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	f000 fba6 	bl	8004718 <_vfiprintf_r>
 8003fcc:	b003      	add	sp, #12
 8003fce:	bc08      	pop	{r3}
 8003fd0:	b004      	add	sp, #16
 8003fd2:	4718      	bx	r3
 8003fd4:	20000018 	.word	0x20000018

08003fd8 <putchar>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <putchar+0x10>)
 8003fdc:	0001      	movs	r1, r0
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	6882      	ldr	r2, [r0, #8]
 8003fe2:	f000 ff60 	bl	8004ea6 <_putc_r>
 8003fe6:	bd10      	pop	{r4, pc}
 8003fe8:	20000018 	.word	0x20000018

08003fec <_puts_r>:
 8003fec:	6a03      	ldr	r3, [r0, #32]
 8003fee:	b570      	push	{r4, r5, r6, lr}
 8003ff0:	0005      	movs	r5, r0
 8003ff2:	000e      	movs	r6, r1
 8003ff4:	6884      	ldr	r4, [r0, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <_puts_r+0x12>
 8003ffa:	f7ff ffa9 	bl	8003f50 <__sinit>
 8003ffe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004000:	07db      	lsls	r3, r3, #31
 8004002:	d405      	bmi.n	8004010 <_puts_r+0x24>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	059b      	lsls	r3, r3, #22
 8004008:	d402      	bmi.n	8004010 <_puts_r+0x24>
 800400a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800400c:	f000 fa35 	bl	800447a <__retarget_lock_acquire_recursive>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	071b      	lsls	r3, r3, #28
 8004014:	d502      	bpl.n	800401c <_puts_r+0x30>
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d11f      	bne.n	800405c <_puts_r+0x70>
 800401c:	0021      	movs	r1, r4
 800401e:	0028      	movs	r0, r5
 8004020:	f000 f8d2 	bl	80041c8 <__swsetup_r>
 8004024:	2800      	cmp	r0, #0
 8004026:	d019      	beq.n	800405c <_puts_r+0x70>
 8004028:	2501      	movs	r5, #1
 800402a:	426d      	negs	r5, r5
 800402c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800402e:	07db      	lsls	r3, r3, #31
 8004030:	d405      	bmi.n	800403e <_puts_r+0x52>
 8004032:	89a3      	ldrh	r3, [r4, #12]
 8004034:	059b      	lsls	r3, r3, #22
 8004036:	d402      	bmi.n	800403e <_puts_r+0x52>
 8004038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800403a:	f000 fa1f 	bl	800447c <__retarget_lock_release_recursive>
 800403e:	0028      	movs	r0, r5
 8004040:	bd70      	pop	{r4, r5, r6, pc}
 8004042:	3601      	adds	r6, #1
 8004044:	60a3      	str	r3, [r4, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	da04      	bge.n	8004054 <_puts_r+0x68>
 800404a:	69a2      	ldr	r2, [r4, #24]
 800404c:	429a      	cmp	r2, r3
 800404e:	dc16      	bgt.n	800407e <_puts_r+0x92>
 8004050:	290a      	cmp	r1, #10
 8004052:	d014      	beq.n	800407e <_puts_r+0x92>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	6022      	str	r2, [r4, #0]
 800405a:	7019      	strb	r1, [r3, #0]
 800405c:	68a3      	ldr	r3, [r4, #8]
 800405e:	7831      	ldrb	r1, [r6, #0]
 8004060:	3b01      	subs	r3, #1
 8004062:	2900      	cmp	r1, #0
 8004064:	d1ed      	bne.n	8004042 <_puts_r+0x56>
 8004066:	60a3      	str	r3, [r4, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	da0f      	bge.n	800408c <_puts_r+0xa0>
 800406c:	0022      	movs	r2, r4
 800406e:	0028      	movs	r0, r5
 8004070:	310a      	adds	r1, #10
 8004072:	f000 f867 	bl	8004144 <__swbuf_r>
 8004076:	3001      	adds	r0, #1
 8004078:	d0d6      	beq.n	8004028 <_puts_r+0x3c>
 800407a:	250a      	movs	r5, #10
 800407c:	e7d6      	b.n	800402c <_puts_r+0x40>
 800407e:	0022      	movs	r2, r4
 8004080:	0028      	movs	r0, r5
 8004082:	f000 f85f 	bl	8004144 <__swbuf_r>
 8004086:	3001      	adds	r0, #1
 8004088:	d1e8      	bne.n	800405c <_puts_r+0x70>
 800408a:	e7cd      	b.n	8004028 <_puts_r+0x3c>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	6022      	str	r2, [r4, #0]
 8004092:	220a      	movs	r2, #10
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e7f0      	b.n	800407a <_puts_r+0x8e>

08004098 <puts>:
 8004098:	b510      	push	{r4, lr}
 800409a:	4b03      	ldr	r3, [pc, #12]	@ (80040a8 <puts+0x10>)
 800409c:	0001      	movs	r1, r0
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	f7ff ffa4 	bl	8003fec <_puts_r>
 80040a4:	bd10      	pop	{r4, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	20000018 	.word	0x20000018

080040ac <__sread>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	000c      	movs	r4, r1
 80040b0:	250e      	movs	r5, #14
 80040b2:	5f49      	ldrsh	r1, [r1, r5]
 80040b4:	f000 f98e 	bl	80043d4 <_read_r>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	db03      	blt.n	80040c4 <__sread+0x18>
 80040bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040be:	181b      	adds	r3, r3, r0
 80040c0:	6563      	str	r3, [r4, #84]	@ 0x54
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	4a02      	ldr	r2, [pc, #8]	@ (80040d0 <__sread+0x24>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	e7f9      	b.n	80040c2 <__sread+0x16>
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	ffffefff 	.word	0xffffefff

080040d4 <__swrite>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	001f      	movs	r7, r3
 80040d8:	898b      	ldrh	r3, [r1, #12]
 80040da:	0005      	movs	r5, r0
 80040dc:	000c      	movs	r4, r1
 80040de:	0016      	movs	r6, r2
 80040e0:	05db      	lsls	r3, r3, #23
 80040e2:	d505      	bpl.n	80040f0 <__swrite+0x1c>
 80040e4:	230e      	movs	r3, #14
 80040e6:	5ec9      	ldrsh	r1, [r1, r3]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2302      	movs	r3, #2
 80040ec:	f000 f95e 	bl	80043ac <_lseek_r>
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	4a05      	ldr	r2, [pc, #20]	@ (8004108 <__swrite+0x34>)
 80040f4:	0028      	movs	r0, r5
 80040f6:	4013      	ands	r3, r2
 80040f8:	81a3      	strh	r3, [r4, #12]
 80040fa:	0032      	movs	r2, r6
 80040fc:	230e      	movs	r3, #14
 80040fe:	5ee1      	ldrsh	r1, [r4, r3]
 8004100:	003b      	movs	r3, r7
 8004102:	f000 f97b 	bl	80043fc <_write_r>
 8004106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004108:	ffffefff 	.word	0xffffefff

0800410c <__sseek>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	000c      	movs	r4, r1
 8004110:	250e      	movs	r5, #14
 8004112:	5f49      	ldrsh	r1, [r1, r5]
 8004114:	f000 f94a 	bl	80043ac <_lseek_r>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	1c42      	adds	r2, r0, #1
 800411c:	d103      	bne.n	8004126 <__sseek+0x1a>
 800411e:	4a05      	ldr	r2, [pc, #20]	@ (8004134 <__sseek+0x28>)
 8004120:	4013      	ands	r3, r2
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	2280      	movs	r2, #128	@ 0x80
 8004128:	0152      	lsls	r2, r2, #5
 800412a:	4313      	orrs	r3, r2
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004130:	e7f8      	b.n	8004124 <__sseek+0x18>
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	ffffefff 	.word	0xffffefff

08004138 <__sclose>:
 8004138:	b510      	push	{r4, lr}
 800413a:	230e      	movs	r3, #14
 800413c:	5ec9      	ldrsh	r1, [r1, r3]
 800413e:	f000 f923 	bl	8004388 <_close_r>
 8004142:	bd10      	pop	{r4, pc}

08004144 <__swbuf_r>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	0006      	movs	r6, r0
 8004148:	000d      	movs	r5, r1
 800414a:	0014      	movs	r4, r2
 800414c:	2800      	cmp	r0, #0
 800414e:	d004      	beq.n	800415a <__swbuf_r+0x16>
 8004150:	6a03      	ldr	r3, [r0, #32]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <__swbuf_r+0x16>
 8004156:	f7ff fefb 	bl	8003f50 <__sinit>
 800415a:	69a3      	ldr	r3, [r4, #24]
 800415c:	60a3      	str	r3, [r4, #8]
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	071b      	lsls	r3, r3, #28
 8004162:	d502      	bpl.n	800416a <__swbuf_r+0x26>
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <__swbuf_r+0x3a>
 800416a:	0021      	movs	r1, r4
 800416c:	0030      	movs	r0, r6
 800416e:	f000 f82b 	bl	80041c8 <__swsetup_r>
 8004172:	2800      	cmp	r0, #0
 8004174:	d003      	beq.n	800417e <__swbuf_r+0x3a>
 8004176:	2501      	movs	r5, #1
 8004178:	426d      	negs	r5, r5
 800417a:	0028      	movs	r0, r5
 800417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	b2ef      	uxtb	r7, r5
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	6963      	ldr	r3, [r4, #20]
 8004188:	b2ed      	uxtb	r5, r5
 800418a:	4283      	cmp	r3, r0
 800418c:	dc05      	bgt.n	800419a <__swbuf_r+0x56>
 800418e:	0021      	movs	r1, r4
 8004190:	0030      	movs	r0, r6
 8004192:	f000 fde1 	bl	8004d58 <_fflush_r>
 8004196:	2800      	cmp	r0, #0
 8004198:	d1ed      	bne.n	8004176 <__swbuf_r+0x32>
 800419a:	68a3      	ldr	r3, [r4, #8]
 800419c:	3001      	adds	r0, #1
 800419e:	3b01      	subs	r3, #1
 80041a0:	60a3      	str	r3, [r4, #8]
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	6022      	str	r2, [r4, #0]
 80041a8:	701f      	strb	r7, [r3, #0]
 80041aa:	6963      	ldr	r3, [r4, #20]
 80041ac:	4283      	cmp	r3, r0
 80041ae:	d004      	beq.n	80041ba <__swbuf_r+0x76>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	07db      	lsls	r3, r3, #31
 80041b4:	d5e1      	bpl.n	800417a <__swbuf_r+0x36>
 80041b6:	2d0a      	cmp	r5, #10
 80041b8:	d1df      	bne.n	800417a <__swbuf_r+0x36>
 80041ba:	0021      	movs	r1, r4
 80041bc:	0030      	movs	r0, r6
 80041be:	f000 fdcb 	bl	8004d58 <_fflush_r>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d0d9      	beq.n	800417a <__swbuf_r+0x36>
 80041c6:	e7d6      	b.n	8004176 <__swbuf_r+0x32>

080041c8 <__swsetup_r>:
 80041c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004280 <__swsetup_r+0xb8>)
 80041ca:	b570      	push	{r4, r5, r6, lr}
 80041cc:	0005      	movs	r5, r0
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	000c      	movs	r4, r1
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d004      	beq.n	80041e0 <__swsetup_r+0x18>
 80041d6:	6a03      	ldr	r3, [r0, #32]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <__swsetup_r+0x18>
 80041dc:	f7ff feb8 	bl	8003f50 <__sinit>
 80041e0:	230c      	movs	r3, #12
 80041e2:	5ee2      	ldrsh	r2, [r4, r3]
 80041e4:	0713      	lsls	r3, r2, #28
 80041e6:	d423      	bmi.n	8004230 <__swsetup_r+0x68>
 80041e8:	06d3      	lsls	r3, r2, #27
 80041ea:	d407      	bmi.n	80041fc <__swsetup_r+0x34>
 80041ec:	2309      	movs	r3, #9
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	2340      	movs	r3, #64	@ 0x40
 80041f2:	2001      	movs	r0, #1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	4240      	negs	r0, r0
 80041fa:	e03a      	b.n	8004272 <__swsetup_r+0xaa>
 80041fc:	0752      	lsls	r2, r2, #29
 80041fe:	d513      	bpl.n	8004228 <__swsetup_r+0x60>
 8004200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004202:	2900      	cmp	r1, #0
 8004204:	d008      	beq.n	8004218 <__swsetup_r+0x50>
 8004206:	0023      	movs	r3, r4
 8004208:	3344      	adds	r3, #68	@ 0x44
 800420a:	4299      	cmp	r1, r3
 800420c:	d002      	beq.n	8004214 <__swsetup_r+0x4c>
 800420e:	0028      	movs	r0, r5
 8004210:	f000 f954 	bl	80044bc <_free_r>
 8004214:	2300      	movs	r3, #0
 8004216:	6363      	str	r3, [r4, #52]	@ 0x34
 8004218:	2224      	movs	r2, #36	@ 0x24
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	4393      	bics	r3, r2
 800421e:	81a3      	strh	r3, [r4, #12]
 8004220:	2300      	movs	r3, #0
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	2308      	movs	r3, #8
 800422a:	89a2      	ldrh	r2, [r4, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <__swsetup_r+0x86>
 8004236:	21a0      	movs	r1, #160	@ 0xa0
 8004238:	2280      	movs	r2, #128	@ 0x80
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	0089      	lsls	r1, r1, #2
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	400b      	ands	r3, r1
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <__swsetup_r+0x86>
 8004246:	0021      	movs	r1, r4
 8004248:	0028      	movs	r0, r5
 800424a:	f000 fdeb 	bl	8004e24 <__smakebuf_r>
 800424e:	230c      	movs	r3, #12
 8004250:	5ee2      	ldrsh	r2, [r4, r3]
 8004252:	2101      	movs	r1, #1
 8004254:	0013      	movs	r3, r2
 8004256:	400b      	ands	r3, r1
 8004258:	420a      	tst	r2, r1
 800425a:	d00b      	beq.n	8004274 <__swsetup_r+0xac>
 800425c:	2300      	movs	r3, #0
 800425e:	60a3      	str	r3, [r4, #8]
 8004260:	6963      	ldr	r3, [r4, #20]
 8004262:	425b      	negs	r3, r3
 8004264:	61a3      	str	r3, [r4, #24]
 8004266:	2000      	movs	r0, #0
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	4283      	cmp	r3, r0
 800426c:	d101      	bne.n	8004272 <__swsetup_r+0xaa>
 800426e:	0613      	lsls	r3, r2, #24
 8004270:	d4be      	bmi.n	80041f0 <__swsetup_r+0x28>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	0791      	lsls	r1, r2, #30
 8004276:	d400      	bmi.n	800427a <__swsetup_r+0xb2>
 8004278:	6963      	ldr	r3, [r4, #20]
 800427a:	60a3      	str	r3, [r4, #8]
 800427c:	e7f3      	b.n	8004266 <__swsetup_r+0x9e>
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	20000018 	.word	0x20000018

08004284 <memset>:
 8004284:	0003      	movs	r3, r0
 8004286:	1882      	adds	r2, r0, r2
 8004288:	4293      	cmp	r3, r2
 800428a:	d100      	bne.n	800428e <memset+0xa>
 800428c:	4770      	bx	lr
 800428e:	7019      	strb	r1, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	e7f9      	b.n	8004288 <memset+0x4>

08004294 <strcasecmp>:
 8004294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004296:	0005      	movs	r5, r0
 8004298:	2400      	movs	r4, #0
 800429a:	2703      	movs	r7, #3
 800429c:	4e09      	ldr	r6, [pc, #36]	@ (80042c4 <strcasecmp+0x30>)
 800429e:	5d2a      	ldrb	r2, [r5, r4]
 80042a0:	5cb3      	ldrb	r3, [r6, r2]
 80042a2:	403b      	ands	r3, r7
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d100      	bne.n	80042aa <strcasecmp+0x16>
 80042a8:	3220      	adds	r2, #32
 80042aa:	5d0b      	ldrb	r3, [r1, r4]
 80042ac:	5cf0      	ldrb	r0, [r6, r3]
 80042ae:	4038      	ands	r0, r7
 80042b0:	2801      	cmp	r0, #1
 80042b2:	d100      	bne.n	80042b6 <strcasecmp+0x22>
 80042b4:	3320      	adds	r3, #32
 80042b6:	1ad0      	subs	r0, r2, r3
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d102      	bne.n	80042c2 <strcasecmp+0x2e>
 80042bc:	3401      	adds	r4, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ed      	bne.n	800429e <strcasecmp+0xa>
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	08005135 	.word	0x08005135

080042c8 <strtok>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	4b16      	ldr	r3, [pc, #88]	@ (8004324 <strtok+0x5c>)
 80042cc:	0005      	movs	r5, r0
 80042ce:	681f      	ldr	r7, [r3, #0]
 80042d0:	000e      	movs	r6, r1
 80042d2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80042d4:	2c00      	cmp	r4, #0
 80042d6:	d11d      	bne.n	8004314 <strtok+0x4c>
 80042d8:	2050      	movs	r0, #80	@ 0x50
 80042da:	f000 f939 	bl	8004550 <malloc>
 80042de:	1e02      	subs	r2, r0, #0
 80042e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80042e2:	d104      	bne.n	80042ee <strtok+0x26>
 80042e4:	215b      	movs	r1, #91	@ 0x5b
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <strtok+0x60>)
 80042e8:	4810      	ldr	r0, [pc, #64]	@ (800432c <strtok+0x64>)
 80042ea:	f000 f8c9 	bl	8004480 <__assert_func>
 80042ee:	6004      	str	r4, [r0, #0]
 80042f0:	6044      	str	r4, [r0, #4]
 80042f2:	6084      	str	r4, [r0, #8]
 80042f4:	60c4      	str	r4, [r0, #12]
 80042f6:	6104      	str	r4, [r0, #16]
 80042f8:	6144      	str	r4, [r0, #20]
 80042fa:	6184      	str	r4, [r0, #24]
 80042fc:	6284      	str	r4, [r0, #40]	@ 0x28
 80042fe:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8004300:	6304      	str	r4, [r0, #48]	@ 0x30
 8004302:	6344      	str	r4, [r0, #52]	@ 0x34
 8004304:	6384      	str	r4, [r0, #56]	@ 0x38
 8004306:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8004308:	6404      	str	r4, [r0, #64]	@ 0x40
 800430a:	6444      	str	r4, [r0, #68]	@ 0x44
 800430c:	6484      	str	r4, [r0, #72]	@ 0x48
 800430e:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8004310:	7704      	strb	r4, [r0, #28]
 8004312:	6244      	str	r4, [r0, #36]	@ 0x24
 8004314:	0031      	movs	r1, r6
 8004316:	0028      	movs	r0, r5
 8004318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800431a:	2301      	movs	r3, #1
 800431c:	f000 f808 	bl	8004330 <__strtok_r>
 8004320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	20000018 	.word	0x20000018
 8004328:	08005235 	.word	0x08005235
 800432c:	0800524c 	.word	0x0800524c

08004330 <__strtok_r>:
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	1e04      	subs	r4, r0, #0
 8004334:	d102      	bne.n	800433c <__strtok_r+0xc>
 8004336:	6814      	ldr	r4, [r2, #0]
 8004338:	2c00      	cmp	r4, #0
 800433a:	d009      	beq.n	8004350 <__strtok_r+0x20>
 800433c:	0020      	movs	r0, r4
 800433e:	000e      	movs	r6, r1
 8004340:	7805      	ldrb	r5, [r0, #0]
 8004342:	3401      	adds	r4, #1
 8004344:	7837      	ldrb	r7, [r6, #0]
 8004346:	2f00      	cmp	r7, #0
 8004348:	d104      	bne.n	8004354 <__strtok_r+0x24>
 800434a:	2d00      	cmp	r5, #0
 800434c:	d10d      	bne.n	800436a <__strtok_r+0x3a>
 800434e:	6015      	str	r5, [r2, #0]
 8004350:	2000      	movs	r0, #0
 8004352:	e006      	b.n	8004362 <__strtok_r+0x32>
 8004354:	3601      	adds	r6, #1
 8004356:	42bd      	cmp	r5, r7
 8004358:	d1f4      	bne.n	8004344 <__strtok_r+0x14>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ee      	bne.n	800433c <__strtok_r+0xc>
 800435e:	6014      	str	r4, [r2, #0]
 8004360:	7003      	strb	r3, [r0, #0]
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	3301      	adds	r3, #1
 8004366:	2d00      	cmp	r5, #0
 8004368:	d102      	bne.n	8004370 <__strtok_r+0x40>
 800436a:	000b      	movs	r3, r1
 800436c:	7826      	ldrb	r6, [r4, #0]
 800436e:	3401      	adds	r4, #1
 8004370:	781d      	ldrb	r5, [r3, #0]
 8004372:	42ae      	cmp	r6, r5
 8004374:	d1f6      	bne.n	8004364 <__strtok_r+0x34>
 8004376:	2300      	movs	r3, #0
 8004378:	001d      	movs	r5, r3
 800437a:	429e      	cmp	r6, r3
 800437c:	d002      	beq.n	8004384 <__strtok_r+0x54>
 800437e:	0023      	movs	r3, r4
 8004380:	1e61      	subs	r1, r4, #1
 8004382:	700d      	strb	r5, [r1, #0]
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e7ec      	b.n	8004362 <__strtok_r+0x32>

08004388 <_close_r>:
 8004388:	2300      	movs	r3, #0
 800438a:	b570      	push	{r4, r5, r6, lr}
 800438c:	4d06      	ldr	r5, [pc, #24]	@ (80043a8 <_close_r+0x20>)
 800438e:	0004      	movs	r4, r0
 8004390:	0008      	movs	r0, r1
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	f7fc fc3a 	bl	8000c0c <_close>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d103      	bne.n	80043a4 <_close_r+0x1c>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d000      	beq.n	80043a4 <_close_r+0x1c>
 80043a2:	6023      	str	r3, [r4, #0]
 80043a4:	bd70      	pop	{r4, r5, r6, pc}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	20000430 	.word	0x20000430

080043ac <_lseek_r>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	0004      	movs	r4, r0
 80043b0:	0008      	movs	r0, r1
 80043b2:	0011      	movs	r1, r2
 80043b4:	001a      	movs	r2, r3
 80043b6:	2300      	movs	r3, #0
 80043b8:	4d05      	ldr	r5, [pc, #20]	@ (80043d0 <_lseek_r+0x24>)
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	f7fc fc47 	bl	8000c4e <_lseek>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d103      	bne.n	80043cc <_lseek_r+0x20>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d000      	beq.n	80043cc <_lseek_r+0x20>
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	bd70      	pop	{r4, r5, r6, pc}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	20000430 	.word	0x20000430

080043d4 <_read_r>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	0004      	movs	r4, r0
 80043d8:	0008      	movs	r0, r1
 80043da:	0011      	movs	r1, r2
 80043dc:	001a      	movs	r2, r3
 80043de:	2300      	movs	r3, #0
 80043e0:	4d05      	ldr	r5, [pc, #20]	@ (80043f8 <_read_r+0x24>)
 80043e2:	602b      	str	r3, [r5, #0]
 80043e4:	f7fc fbf5 	bl	8000bd2 <_read>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d103      	bne.n	80043f4 <_read_r+0x20>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d000      	beq.n	80043f4 <_read_r+0x20>
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	20000430 	.word	0x20000430

080043fc <_write_r>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	0004      	movs	r4, r0
 8004400:	0008      	movs	r0, r1
 8004402:	0011      	movs	r1, r2
 8004404:	001a      	movs	r2, r3
 8004406:	2300      	movs	r3, #0
 8004408:	4d05      	ldr	r5, [pc, #20]	@ (8004420 <_write_r+0x24>)
 800440a:	602b      	str	r3, [r5, #0]
 800440c:	f7fb ff12 	bl	8000234 <_write>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d103      	bne.n	800441c <_write_r+0x20>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d000      	beq.n	800441c <_write_r+0x20>
 800441a:	6023      	str	r3, [r4, #0]
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	20000430 	.word	0x20000430

08004424 <__errno>:
 8004424:	4b01      	ldr	r3, [pc, #4]	@ (800442c <__errno+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4770      	bx	lr
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	20000018 	.word	0x20000018

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	2600      	movs	r6, #0
 8004434:	4c0c      	ldr	r4, [pc, #48]	@ (8004468 <__libc_init_array+0x38>)
 8004436:	4d0d      	ldr	r5, [pc, #52]	@ (800446c <__libc_init_array+0x3c>)
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	2600      	movs	r6, #0
 8004442:	f000 fdf9 	bl	8005038 <_init>
 8004446:	4c0a      	ldr	r4, [pc, #40]	@ (8004470 <__libc_init_array+0x40>)
 8004448:	4d0a      	ldr	r5, [pc, #40]	@ (8004474 <__libc_init_array+0x44>)
 800444a:	1b64      	subs	r4, r4, r5
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	00b3      	lsls	r3, r6, #2
 8004456:	58eb      	ldr	r3, [r5, r3]
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	00b3      	lsls	r3, r6, #2
 8004460:	58eb      	ldr	r3, [r5, r3]
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	08005318 	.word	0x08005318
 800446c:	08005318 	.word	0x08005318
 8004470:	0800531c 	.word	0x0800531c
 8004474:	08005318 	.word	0x08005318

08004478 <__retarget_lock_init_recursive>:
 8004478:	4770      	bx	lr

0800447a <__retarget_lock_acquire_recursive>:
 800447a:	4770      	bx	lr

0800447c <__retarget_lock_release_recursive>:
 800447c:	4770      	bx	lr
	...

08004480 <__assert_func>:
 8004480:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004482:	0014      	movs	r4, r2
 8004484:	001a      	movs	r2, r3
 8004486:	4b09      	ldr	r3, [pc, #36]	@ (80044ac <__assert_func+0x2c>)
 8004488:	0005      	movs	r5, r0
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	000e      	movs	r6, r1
 800448e:	68d8      	ldr	r0, [r3, #12]
 8004490:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <__assert_func+0x30>)
 8004492:	2c00      	cmp	r4, #0
 8004494:	d101      	bne.n	800449a <__assert_func+0x1a>
 8004496:	4b07      	ldr	r3, [pc, #28]	@ (80044b4 <__assert_func+0x34>)
 8004498:	001c      	movs	r4, r3
 800449a:	4907      	ldr	r1, [pc, #28]	@ (80044b8 <__assert_func+0x38>)
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	9402      	str	r4, [sp, #8]
 80044a0:	002b      	movs	r3, r5
 80044a2:	9600      	str	r6, [sp, #0]
 80044a4:	f000 fc84 	bl	8004db0 <fiprintf>
 80044a8:	f000 fd75 	bl	8004f96 <abort>
 80044ac:	20000018 	.word	0x20000018
 80044b0:	080052a6 	.word	0x080052a6
 80044b4:	080052e1 	.word	0x080052e1
 80044b8:	080052b3 	.word	0x080052b3

080044bc <_free_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	0005      	movs	r5, r0
 80044c0:	1e0c      	subs	r4, r1, #0
 80044c2:	d010      	beq.n	80044e6 <_free_r+0x2a>
 80044c4:	3c04      	subs	r4, #4
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	da00      	bge.n	80044ce <_free_r+0x12>
 80044cc:	18e4      	adds	r4, r4, r3
 80044ce:	0028      	movs	r0, r5
 80044d0:	f000 f8ea 	bl	80046a8 <__malloc_lock>
 80044d4:	4a1d      	ldr	r2, [pc, #116]	@ (800454c <_free_r+0x90>)
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <_free_r+0x2c>
 80044dc:	6063      	str	r3, [r4, #4]
 80044de:	6014      	str	r4, [r2, #0]
 80044e0:	0028      	movs	r0, r5
 80044e2:	f000 f8e9 	bl	80046b8 <__malloc_unlock>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	d908      	bls.n	80044fe <_free_r+0x42>
 80044ec:	6820      	ldr	r0, [r4, #0]
 80044ee:	1821      	adds	r1, r4, r0
 80044f0:	428b      	cmp	r3, r1
 80044f2:	d1f3      	bne.n	80044dc <_free_r+0x20>
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	1809      	adds	r1, r1, r0
 80044fa:	6021      	str	r1, [r4, #0]
 80044fc:	e7ee      	b.n	80044dc <_free_r+0x20>
 80044fe:	001a      	movs	r2, r3
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <_free_r+0x4e>
 8004506:	42a3      	cmp	r3, r4
 8004508:	d9f9      	bls.n	80044fe <_free_r+0x42>
 800450a:	6811      	ldr	r1, [r2, #0]
 800450c:	1850      	adds	r0, r2, r1
 800450e:	42a0      	cmp	r0, r4
 8004510:	d10b      	bne.n	800452a <_free_r+0x6e>
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	1809      	adds	r1, r1, r0
 8004516:	1850      	adds	r0, r2, r1
 8004518:	6011      	str	r1, [r2, #0]
 800451a:	4283      	cmp	r3, r0
 800451c:	d1e0      	bne.n	80044e0 <_free_r+0x24>
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	1841      	adds	r1, r0, r1
 8004524:	6011      	str	r1, [r2, #0]
 8004526:	6053      	str	r3, [r2, #4]
 8004528:	e7da      	b.n	80044e0 <_free_r+0x24>
 800452a:	42a0      	cmp	r0, r4
 800452c:	d902      	bls.n	8004534 <_free_r+0x78>
 800452e:	230c      	movs	r3, #12
 8004530:	602b      	str	r3, [r5, #0]
 8004532:	e7d5      	b.n	80044e0 <_free_r+0x24>
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	1821      	adds	r1, r4, r0
 8004538:	428b      	cmp	r3, r1
 800453a:	d103      	bne.n	8004544 <_free_r+0x88>
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	1809      	adds	r1, r1, r0
 8004542:	6021      	str	r1, [r4, #0]
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	6054      	str	r4, [r2, #4]
 8004548:	e7ca      	b.n	80044e0 <_free_r+0x24>
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	2000043c 	.word	0x2000043c

08004550 <malloc>:
 8004550:	b510      	push	{r4, lr}
 8004552:	4b03      	ldr	r3, [pc, #12]	@ (8004560 <malloc+0x10>)
 8004554:	0001      	movs	r1, r0
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	f000 f826 	bl	80045a8 <_malloc_r>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	20000018 	.word	0x20000018

08004564 <sbrk_aligned>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	4e0f      	ldr	r6, [pc, #60]	@ (80045a4 <sbrk_aligned+0x40>)
 8004568:	000d      	movs	r5, r1
 800456a:	6831      	ldr	r1, [r6, #0]
 800456c:	0004      	movs	r4, r0
 800456e:	2900      	cmp	r1, #0
 8004570:	d102      	bne.n	8004578 <sbrk_aligned+0x14>
 8004572:	f000 fcf3 	bl	8004f5c <_sbrk_r>
 8004576:	6030      	str	r0, [r6, #0]
 8004578:	0029      	movs	r1, r5
 800457a:	0020      	movs	r0, r4
 800457c:	f000 fcee 	bl	8004f5c <_sbrk_r>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d103      	bne.n	800458c <sbrk_aligned+0x28>
 8004584:	2501      	movs	r5, #1
 8004586:	426d      	negs	r5, r5
 8004588:	0028      	movs	r0, r5
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	2303      	movs	r3, #3
 800458e:	1cc5      	adds	r5, r0, #3
 8004590:	439d      	bics	r5, r3
 8004592:	42a8      	cmp	r0, r5
 8004594:	d0f8      	beq.n	8004588 <sbrk_aligned+0x24>
 8004596:	1a29      	subs	r1, r5, r0
 8004598:	0020      	movs	r0, r4
 800459a:	f000 fcdf 	bl	8004f5c <_sbrk_r>
 800459e:	3001      	adds	r0, #1
 80045a0:	d1f2      	bne.n	8004588 <sbrk_aligned+0x24>
 80045a2:	e7ef      	b.n	8004584 <sbrk_aligned+0x20>
 80045a4:	20000438 	.word	0x20000438

080045a8 <_malloc_r>:
 80045a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045aa:	2203      	movs	r2, #3
 80045ac:	1ccb      	adds	r3, r1, #3
 80045ae:	4393      	bics	r3, r2
 80045b0:	3308      	adds	r3, #8
 80045b2:	0005      	movs	r5, r0
 80045b4:	001f      	movs	r7, r3
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d234      	bcs.n	8004624 <_malloc_r+0x7c>
 80045ba:	270c      	movs	r7, #12
 80045bc:	42b9      	cmp	r1, r7
 80045be:	d833      	bhi.n	8004628 <_malloc_r+0x80>
 80045c0:	0028      	movs	r0, r5
 80045c2:	f000 f871 	bl	80046a8 <__malloc_lock>
 80045c6:	4e37      	ldr	r6, [pc, #220]	@ (80046a4 <_malloc_r+0xfc>)
 80045c8:	6833      	ldr	r3, [r6, #0]
 80045ca:	001c      	movs	r4, r3
 80045cc:	2c00      	cmp	r4, #0
 80045ce:	d12f      	bne.n	8004630 <_malloc_r+0x88>
 80045d0:	0039      	movs	r1, r7
 80045d2:	0028      	movs	r0, r5
 80045d4:	f7ff ffc6 	bl	8004564 <sbrk_aligned>
 80045d8:	0004      	movs	r4, r0
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	d15f      	bne.n	800469e <_malloc_r+0xf6>
 80045de:	6834      	ldr	r4, [r6, #0]
 80045e0:	9400      	str	r4, [sp, #0]
 80045e2:	9b00      	ldr	r3, [sp, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d14a      	bne.n	800467e <_malloc_r+0xd6>
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d052      	beq.n	8004692 <_malloc_r+0xea>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	0028      	movs	r0, r5
 80045f0:	18e3      	adds	r3, r4, r3
 80045f2:	9900      	ldr	r1, [sp, #0]
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	f000 fcb1 	bl	8004f5c <_sbrk_r>
 80045fa:	9b01      	ldr	r3, [sp, #4]
 80045fc:	4283      	cmp	r3, r0
 80045fe:	d148      	bne.n	8004692 <_malloc_r+0xea>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	0028      	movs	r0, r5
 8004604:	1aff      	subs	r7, r7, r3
 8004606:	0039      	movs	r1, r7
 8004608:	f7ff ffac 	bl	8004564 <sbrk_aligned>
 800460c:	3001      	adds	r0, #1
 800460e:	d040      	beq.n	8004692 <_malloc_r+0xea>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	19db      	adds	r3, r3, r7
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	6833      	ldr	r3, [r6, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	2a00      	cmp	r2, #0
 800461c:	d133      	bne.n	8004686 <_malloc_r+0xde>
 800461e:	9b00      	ldr	r3, [sp, #0]
 8004620:	6033      	str	r3, [r6, #0]
 8004622:	e019      	b.n	8004658 <_malloc_r+0xb0>
 8004624:	2b00      	cmp	r3, #0
 8004626:	dac9      	bge.n	80045bc <_malloc_r+0x14>
 8004628:	230c      	movs	r3, #12
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	2000      	movs	r0, #0
 800462e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004630:	6821      	ldr	r1, [r4, #0]
 8004632:	1bc9      	subs	r1, r1, r7
 8004634:	d420      	bmi.n	8004678 <_malloc_r+0xd0>
 8004636:	290b      	cmp	r1, #11
 8004638:	d90a      	bls.n	8004650 <_malloc_r+0xa8>
 800463a:	19e2      	adds	r2, r4, r7
 800463c:	6027      	str	r7, [r4, #0]
 800463e:	42a3      	cmp	r3, r4
 8004640:	d104      	bne.n	800464c <_malloc_r+0xa4>
 8004642:	6032      	str	r2, [r6, #0]
 8004644:	6863      	ldr	r3, [r4, #4]
 8004646:	6011      	str	r1, [r2, #0]
 8004648:	6053      	str	r3, [r2, #4]
 800464a:	e005      	b.n	8004658 <_malloc_r+0xb0>
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	e7f9      	b.n	8004644 <_malloc_r+0x9c>
 8004650:	6862      	ldr	r2, [r4, #4]
 8004652:	42a3      	cmp	r3, r4
 8004654:	d10e      	bne.n	8004674 <_malloc_r+0xcc>
 8004656:	6032      	str	r2, [r6, #0]
 8004658:	0028      	movs	r0, r5
 800465a:	f000 f82d 	bl	80046b8 <__malloc_unlock>
 800465e:	0020      	movs	r0, r4
 8004660:	2207      	movs	r2, #7
 8004662:	300b      	adds	r0, #11
 8004664:	1d23      	adds	r3, r4, #4
 8004666:	4390      	bics	r0, r2
 8004668:	1ac2      	subs	r2, r0, r3
 800466a:	4298      	cmp	r0, r3
 800466c:	d0df      	beq.n	800462e <_malloc_r+0x86>
 800466e:	1a1b      	subs	r3, r3, r0
 8004670:	50a3      	str	r3, [r4, r2]
 8004672:	e7dc      	b.n	800462e <_malloc_r+0x86>
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	e7ef      	b.n	8004658 <_malloc_r+0xb0>
 8004678:	0023      	movs	r3, r4
 800467a:	6864      	ldr	r4, [r4, #4]
 800467c:	e7a6      	b.n	80045cc <_malloc_r+0x24>
 800467e:	9c00      	ldr	r4, [sp, #0]
 8004680:	6863      	ldr	r3, [r4, #4]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	e7ad      	b.n	80045e2 <_malloc_r+0x3a>
 8004686:	001a      	movs	r2, r3
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	42a3      	cmp	r3, r4
 800468c:	d1fb      	bne.n	8004686 <_malloc_r+0xde>
 800468e:	2300      	movs	r3, #0
 8004690:	e7da      	b.n	8004648 <_malloc_r+0xa0>
 8004692:	230c      	movs	r3, #12
 8004694:	0028      	movs	r0, r5
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	f000 f80e 	bl	80046b8 <__malloc_unlock>
 800469c:	e7c6      	b.n	800462c <_malloc_r+0x84>
 800469e:	6007      	str	r7, [r0, #0]
 80046a0:	e7da      	b.n	8004658 <_malloc_r+0xb0>
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	2000043c 	.word	0x2000043c

080046a8 <__malloc_lock>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	4802      	ldr	r0, [pc, #8]	@ (80046b4 <__malloc_lock+0xc>)
 80046ac:	f7ff fee5 	bl	800447a <__retarget_lock_acquire_recursive>
 80046b0:	bd10      	pop	{r4, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	20000434 	.word	0x20000434

080046b8 <__malloc_unlock>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4802      	ldr	r0, [pc, #8]	@ (80046c4 <__malloc_unlock+0xc>)
 80046bc:	f7ff fede 	bl	800447c <__retarget_lock_release_recursive>
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	20000434 	.word	0x20000434

080046c8 <__sfputc_r>:
 80046c8:	6893      	ldr	r3, [r2, #8]
 80046ca:	b510      	push	{r4, lr}
 80046cc:	3b01      	subs	r3, #1
 80046ce:	6093      	str	r3, [r2, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da04      	bge.n	80046de <__sfputc_r+0x16>
 80046d4:	6994      	ldr	r4, [r2, #24]
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	db07      	blt.n	80046ea <__sfputc_r+0x22>
 80046da:	290a      	cmp	r1, #10
 80046dc:	d005      	beq.n	80046ea <__sfputc_r+0x22>
 80046de:	6813      	ldr	r3, [r2, #0]
 80046e0:	1c58      	adds	r0, r3, #1
 80046e2:	6010      	str	r0, [r2, #0]
 80046e4:	7019      	strb	r1, [r3, #0]
 80046e6:	0008      	movs	r0, r1
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	f7ff fd2b 	bl	8004144 <__swbuf_r>
 80046ee:	0001      	movs	r1, r0
 80046f0:	e7f9      	b.n	80046e6 <__sfputc_r+0x1e>

080046f2 <__sfputs_r>:
 80046f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f4:	0006      	movs	r6, r0
 80046f6:	000f      	movs	r7, r1
 80046f8:	0014      	movs	r4, r2
 80046fa:	18d5      	adds	r5, r2, r3
 80046fc:	42ac      	cmp	r4, r5
 80046fe:	d101      	bne.n	8004704 <__sfputs_r+0x12>
 8004700:	2000      	movs	r0, #0
 8004702:	e007      	b.n	8004714 <__sfputs_r+0x22>
 8004704:	7821      	ldrb	r1, [r4, #0]
 8004706:	003a      	movs	r2, r7
 8004708:	0030      	movs	r0, r6
 800470a:	f7ff ffdd 	bl	80046c8 <__sfputc_r>
 800470e:	3401      	adds	r4, #1
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d1f3      	bne.n	80046fc <__sfputs_r+0xa>
 8004714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004718 <_vfiprintf_r>:
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b0a1      	sub	sp, #132	@ 0x84
 800471c:	000f      	movs	r7, r1
 800471e:	0015      	movs	r5, r2
 8004720:	001e      	movs	r6, r3
 8004722:	9003      	str	r0, [sp, #12]
 8004724:	2800      	cmp	r0, #0
 8004726:	d004      	beq.n	8004732 <_vfiprintf_r+0x1a>
 8004728:	6a03      	ldr	r3, [r0, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <_vfiprintf_r+0x1a>
 800472e:	f7ff fc0f 	bl	8003f50 <__sinit>
 8004732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004734:	07db      	lsls	r3, r3, #31
 8004736:	d405      	bmi.n	8004744 <_vfiprintf_r+0x2c>
 8004738:	89bb      	ldrh	r3, [r7, #12]
 800473a:	059b      	lsls	r3, r3, #22
 800473c:	d402      	bmi.n	8004744 <_vfiprintf_r+0x2c>
 800473e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004740:	f7ff fe9b 	bl	800447a <__retarget_lock_acquire_recursive>
 8004744:	89bb      	ldrh	r3, [r7, #12]
 8004746:	071b      	lsls	r3, r3, #28
 8004748:	d502      	bpl.n	8004750 <_vfiprintf_r+0x38>
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d113      	bne.n	8004778 <_vfiprintf_r+0x60>
 8004750:	0039      	movs	r1, r7
 8004752:	9803      	ldr	r0, [sp, #12]
 8004754:	f7ff fd38 	bl	80041c8 <__swsetup_r>
 8004758:	2800      	cmp	r0, #0
 800475a:	d00d      	beq.n	8004778 <_vfiprintf_r+0x60>
 800475c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800475e:	07db      	lsls	r3, r3, #31
 8004760:	d503      	bpl.n	800476a <_vfiprintf_r+0x52>
 8004762:	2001      	movs	r0, #1
 8004764:	4240      	negs	r0, r0
 8004766:	b021      	add	sp, #132	@ 0x84
 8004768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800476a:	89bb      	ldrh	r3, [r7, #12]
 800476c:	059b      	lsls	r3, r3, #22
 800476e:	d4f8      	bmi.n	8004762 <_vfiprintf_r+0x4a>
 8004770:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004772:	f7ff fe83 	bl	800447c <__retarget_lock_release_recursive>
 8004776:	e7f4      	b.n	8004762 <_vfiprintf_r+0x4a>
 8004778:	2300      	movs	r3, #0
 800477a:	ac08      	add	r4, sp, #32
 800477c:	6163      	str	r3, [r4, #20]
 800477e:	3320      	adds	r3, #32
 8004780:	7663      	strb	r3, [r4, #25]
 8004782:	3310      	adds	r3, #16
 8004784:	76a3      	strb	r3, [r4, #26]
 8004786:	9607      	str	r6, [sp, #28]
 8004788:	002e      	movs	r6, r5
 800478a:	7833      	ldrb	r3, [r6, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <_vfiprintf_r+0x7c>
 8004790:	2b25      	cmp	r3, #37	@ 0x25
 8004792:	d148      	bne.n	8004826 <_vfiprintf_r+0x10e>
 8004794:	1b73      	subs	r3, r6, r5
 8004796:	9305      	str	r3, [sp, #20]
 8004798:	42ae      	cmp	r6, r5
 800479a:	d00b      	beq.n	80047b4 <_vfiprintf_r+0x9c>
 800479c:	002a      	movs	r2, r5
 800479e:	0039      	movs	r1, r7
 80047a0:	9803      	ldr	r0, [sp, #12]
 80047a2:	f7ff ffa6 	bl	80046f2 <__sfputs_r>
 80047a6:	3001      	adds	r0, #1
 80047a8:	d100      	bne.n	80047ac <_vfiprintf_r+0x94>
 80047aa:	e0ae      	b.n	800490a <_vfiprintf_r+0x1f2>
 80047ac:	6963      	ldr	r3, [r4, #20]
 80047ae:	9a05      	ldr	r2, [sp, #20]
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	6163      	str	r3, [r4, #20]
 80047b4:	7833      	ldrb	r3, [r6, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d100      	bne.n	80047bc <_vfiprintf_r+0xa4>
 80047ba:	e0a6      	b.n	800490a <_vfiprintf_r+0x1f2>
 80047bc:	2201      	movs	r2, #1
 80047be:	2300      	movs	r3, #0
 80047c0:	4252      	negs	r2, r2
 80047c2:	6062      	str	r2, [r4, #4]
 80047c4:	a904      	add	r1, sp, #16
 80047c6:	3254      	adds	r2, #84	@ 0x54
 80047c8:	1852      	adds	r2, r2, r1
 80047ca:	1c75      	adds	r5, r6, #1
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	60e3      	str	r3, [r4, #12]
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	7013      	strb	r3, [r2, #0]
 80047d4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80047d6:	4b59      	ldr	r3, [pc, #356]	@ (800493c <_vfiprintf_r+0x224>)
 80047d8:	2205      	movs	r2, #5
 80047da:	0018      	movs	r0, r3
 80047dc:	7829      	ldrb	r1, [r5, #0]
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	f000 fbce 	bl	8004f80 <memchr>
 80047e4:	1c6e      	adds	r6, r5, #1
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d11f      	bne.n	800482a <_vfiprintf_r+0x112>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	06d3      	lsls	r3, r2, #27
 80047ee:	d504      	bpl.n	80047fa <_vfiprintf_r+0xe2>
 80047f0:	2353      	movs	r3, #83	@ 0x53
 80047f2:	a904      	add	r1, sp, #16
 80047f4:	185b      	adds	r3, r3, r1
 80047f6:	2120      	movs	r1, #32
 80047f8:	7019      	strb	r1, [r3, #0]
 80047fa:	0713      	lsls	r3, r2, #28
 80047fc:	d504      	bpl.n	8004808 <_vfiprintf_r+0xf0>
 80047fe:	2353      	movs	r3, #83	@ 0x53
 8004800:	a904      	add	r1, sp, #16
 8004802:	185b      	adds	r3, r3, r1
 8004804:	212b      	movs	r1, #43	@ 0x2b
 8004806:	7019      	strb	r1, [r3, #0]
 8004808:	782b      	ldrb	r3, [r5, #0]
 800480a:	2b2a      	cmp	r3, #42	@ 0x2a
 800480c:	d016      	beq.n	800483c <_vfiprintf_r+0x124>
 800480e:	002e      	movs	r6, r5
 8004810:	2100      	movs	r1, #0
 8004812:	200a      	movs	r0, #10
 8004814:	68e3      	ldr	r3, [r4, #12]
 8004816:	7832      	ldrb	r2, [r6, #0]
 8004818:	1c75      	adds	r5, r6, #1
 800481a:	3a30      	subs	r2, #48	@ 0x30
 800481c:	2a09      	cmp	r2, #9
 800481e:	d950      	bls.n	80048c2 <_vfiprintf_r+0x1aa>
 8004820:	2900      	cmp	r1, #0
 8004822:	d111      	bne.n	8004848 <_vfiprintf_r+0x130>
 8004824:	e017      	b.n	8004856 <_vfiprintf_r+0x13e>
 8004826:	3601      	adds	r6, #1
 8004828:	e7af      	b.n	800478a <_vfiprintf_r+0x72>
 800482a:	9b05      	ldr	r3, [sp, #20]
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	1ac0      	subs	r0, r0, r3
 8004830:	2301      	movs	r3, #1
 8004832:	4083      	lsls	r3, r0
 8004834:	4313      	orrs	r3, r2
 8004836:	0035      	movs	r5, r6
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	e7cc      	b.n	80047d6 <_vfiprintf_r+0xbe>
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	1d19      	adds	r1, r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	9107      	str	r1, [sp, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db01      	blt.n	800484c <_vfiprintf_r+0x134>
 8004848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800484a:	e004      	b.n	8004856 <_vfiprintf_r+0x13e>
 800484c:	425b      	negs	r3, r3
 800484e:	60e3      	str	r3, [r4, #12]
 8004850:	2302      	movs	r3, #2
 8004852:	4313      	orrs	r3, r2
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	7833      	ldrb	r3, [r6, #0]
 8004858:	2b2e      	cmp	r3, #46	@ 0x2e
 800485a:	d10c      	bne.n	8004876 <_vfiprintf_r+0x15e>
 800485c:	7873      	ldrb	r3, [r6, #1]
 800485e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004860:	d134      	bne.n	80048cc <_vfiprintf_r+0x1b4>
 8004862:	9b07      	ldr	r3, [sp, #28]
 8004864:	3602      	adds	r6, #2
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	9207      	str	r2, [sp, #28]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da01      	bge.n	8004874 <_vfiprintf_r+0x15c>
 8004870:	2301      	movs	r3, #1
 8004872:	425b      	negs	r3, r3
 8004874:	9309      	str	r3, [sp, #36]	@ 0x24
 8004876:	4d32      	ldr	r5, [pc, #200]	@ (8004940 <_vfiprintf_r+0x228>)
 8004878:	2203      	movs	r2, #3
 800487a:	0028      	movs	r0, r5
 800487c:	7831      	ldrb	r1, [r6, #0]
 800487e:	f000 fb7f 	bl	8004f80 <memchr>
 8004882:	2800      	cmp	r0, #0
 8004884:	d006      	beq.n	8004894 <_vfiprintf_r+0x17c>
 8004886:	2340      	movs	r3, #64	@ 0x40
 8004888:	1b40      	subs	r0, r0, r5
 800488a:	4083      	lsls	r3, r0
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	3601      	adds	r6, #1
 8004890:	4313      	orrs	r3, r2
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	7831      	ldrb	r1, [r6, #0]
 8004896:	2206      	movs	r2, #6
 8004898:	482a      	ldr	r0, [pc, #168]	@ (8004944 <_vfiprintf_r+0x22c>)
 800489a:	1c75      	adds	r5, r6, #1
 800489c:	7621      	strb	r1, [r4, #24]
 800489e:	f000 fb6f 	bl	8004f80 <memchr>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d040      	beq.n	8004928 <_vfiprintf_r+0x210>
 80048a6:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <_vfiprintf_r+0x230>)
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d122      	bne.n	80048f2 <_vfiprintf_r+0x1da>
 80048ac:	2207      	movs	r2, #7
 80048ae:	9b07      	ldr	r3, [sp, #28]
 80048b0:	3307      	adds	r3, #7
 80048b2:	4393      	bics	r3, r2
 80048b4:	3308      	adds	r3, #8
 80048b6:	9307      	str	r3, [sp, #28]
 80048b8:	6963      	ldr	r3, [r4, #20]
 80048ba:	9a04      	ldr	r2, [sp, #16]
 80048bc:	189b      	adds	r3, r3, r2
 80048be:	6163      	str	r3, [r4, #20]
 80048c0:	e762      	b.n	8004788 <_vfiprintf_r+0x70>
 80048c2:	4343      	muls	r3, r0
 80048c4:	002e      	movs	r6, r5
 80048c6:	2101      	movs	r1, #1
 80048c8:	189b      	adds	r3, r3, r2
 80048ca:	e7a4      	b.n	8004816 <_vfiprintf_r+0xfe>
 80048cc:	2300      	movs	r3, #0
 80048ce:	200a      	movs	r0, #10
 80048d0:	0019      	movs	r1, r3
 80048d2:	3601      	adds	r6, #1
 80048d4:	6063      	str	r3, [r4, #4]
 80048d6:	7832      	ldrb	r2, [r6, #0]
 80048d8:	1c75      	adds	r5, r6, #1
 80048da:	3a30      	subs	r2, #48	@ 0x30
 80048dc:	2a09      	cmp	r2, #9
 80048de:	d903      	bls.n	80048e8 <_vfiprintf_r+0x1d0>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0c8      	beq.n	8004876 <_vfiprintf_r+0x15e>
 80048e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80048e6:	e7c6      	b.n	8004876 <_vfiprintf_r+0x15e>
 80048e8:	4341      	muls	r1, r0
 80048ea:	002e      	movs	r6, r5
 80048ec:	2301      	movs	r3, #1
 80048ee:	1889      	adds	r1, r1, r2
 80048f0:	e7f1      	b.n	80048d6 <_vfiprintf_r+0x1be>
 80048f2:	aa07      	add	r2, sp, #28
 80048f4:	9200      	str	r2, [sp, #0]
 80048f6:	0021      	movs	r1, r4
 80048f8:	003a      	movs	r2, r7
 80048fa:	4b14      	ldr	r3, [pc, #80]	@ (800494c <_vfiprintf_r+0x234>)
 80048fc:	9803      	ldr	r0, [sp, #12]
 80048fe:	e000      	b.n	8004902 <_vfiprintf_r+0x1ea>
 8004900:	bf00      	nop
 8004902:	9004      	str	r0, [sp, #16]
 8004904:	9b04      	ldr	r3, [sp, #16]
 8004906:	3301      	adds	r3, #1
 8004908:	d1d6      	bne.n	80048b8 <_vfiprintf_r+0x1a0>
 800490a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800490c:	07db      	lsls	r3, r3, #31
 800490e:	d405      	bmi.n	800491c <_vfiprintf_r+0x204>
 8004910:	89bb      	ldrh	r3, [r7, #12]
 8004912:	059b      	lsls	r3, r3, #22
 8004914:	d402      	bmi.n	800491c <_vfiprintf_r+0x204>
 8004916:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004918:	f7ff fdb0 	bl	800447c <__retarget_lock_release_recursive>
 800491c:	89bb      	ldrh	r3, [r7, #12]
 800491e:	065b      	lsls	r3, r3, #25
 8004920:	d500      	bpl.n	8004924 <_vfiprintf_r+0x20c>
 8004922:	e71e      	b.n	8004762 <_vfiprintf_r+0x4a>
 8004924:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004926:	e71e      	b.n	8004766 <_vfiprintf_r+0x4e>
 8004928:	aa07      	add	r2, sp, #28
 800492a:	9200      	str	r2, [sp, #0]
 800492c:	0021      	movs	r1, r4
 800492e:	003a      	movs	r2, r7
 8004930:	4b06      	ldr	r3, [pc, #24]	@ (800494c <_vfiprintf_r+0x234>)
 8004932:	9803      	ldr	r0, [sp, #12]
 8004934:	f000 f87c 	bl	8004a30 <_printf_i>
 8004938:	e7e3      	b.n	8004902 <_vfiprintf_r+0x1ea>
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	080052e2 	.word	0x080052e2
 8004940:	080052e8 	.word	0x080052e8
 8004944:	080052ec 	.word	0x080052ec
 8004948:	00000000 	.word	0x00000000
 800494c:	080046f3 	.word	0x080046f3

08004950 <_printf_common>:
 8004950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004952:	0016      	movs	r6, r2
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	688a      	ldr	r2, [r1, #8]
 8004958:	690b      	ldr	r3, [r1, #16]
 800495a:	000c      	movs	r4, r1
 800495c:	9000      	str	r0, [sp, #0]
 800495e:	4293      	cmp	r3, r2
 8004960:	da00      	bge.n	8004964 <_printf_common+0x14>
 8004962:	0013      	movs	r3, r2
 8004964:	0022      	movs	r2, r4
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	3243      	adds	r2, #67	@ 0x43
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	2a00      	cmp	r2, #0
 800496e:	d001      	beq.n	8004974 <_printf_common+0x24>
 8004970:	3301      	adds	r3, #1
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	069b      	lsls	r3, r3, #26
 8004978:	d502      	bpl.n	8004980 <_printf_common+0x30>
 800497a:	6833      	ldr	r3, [r6, #0]
 800497c:	3302      	adds	r3, #2
 800497e:	6033      	str	r3, [r6, #0]
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	2306      	movs	r3, #6
 8004984:	0015      	movs	r5, r2
 8004986:	401d      	ands	r5, r3
 8004988:	421a      	tst	r2, r3
 800498a:	d027      	beq.n	80049dc <_printf_common+0x8c>
 800498c:	0023      	movs	r3, r4
 800498e:	3343      	adds	r3, #67	@ 0x43
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	4193      	sbcs	r3, r2
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	0692      	lsls	r2, r2, #26
 800499a:	d430      	bmi.n	80049fe <_printf_common+0xae>
 800499c:	0022      	movs	r2, r4
 800499e:	9901      	ldr	r1, [sp, #4]
 80049a0:	9800      	ldr	r0, [sp, #0]
 80049a2:	9d08      	ldr	r5, [sp, #32]
 80049a4:	3243      	adds	r2, #67	@ 0x43
 80049a6:	47a8      	blx	r5
 80049a8:	3001      	adds	r0, #1
 80049aa:	d025      	beq.n	80049f8 <_printf_common+0xa8>
 80049ac:	2206      	movs	r2, #6
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	2500      	movs	r5, #0
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d105      	bne.n	80049c4 <_printf_common+0x74>
 80049b8:	6833      	ldr	r3, [r6, #0]
 80049ba:	68e5      	ldr	r5, [r4, #12]
 80049bc:	1aed      	subs	r5, r5, r3
 80049be:	43eb      	mvns	r3, r5
 80049c0:	17db      	asrs	r3, r3, #31
 80049c2:	401d      	ands	r5, r3
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	6922      	ldr	r2, [r4, #16]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	dd01      	ble.n	80049d0 <_printf_common+0x80>
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	18ed      	adds	r5, r5, r3
 80049d0:	2600      	movs	r6, #0
 80049d2:	42b5      	cmp	r5, r6
 80049d4:	d120      	bne.n	8004a18 <_printf_common+0xc8>
 80049d6:	2000      	movs	r0, #0
 80049d8:	e010      	b.n	80049fc <_printf_common+0xac>
 80049da:	3501      	adds	r5, #1
 80049dc:	68e3      	ldr	r3, [r4, #12]
 80049de:	6832      	ldr	r2, [r6, #0]
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	42ab      	cmp	r3, r5
 80049e4:	ddd2      	ble.n	800498c <_printf_common+0x3c>
 80049e6:	0022      	movs	r2, r4
 80049e8:	2301      	movs	r3, #1
 80049ea:	9901      	ldr	r1, [sp, #4]
 80049ec:	9800      	ldr	r0, [sp, #0]
 80049ee:	9f08      	ldr	r7, [sp, #32]
 80049f0:	3219      	adds	r2, #25
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	d1f0      	bne.n	80049da <_printf_common+0x8a>
 80049f8:	2001      	movs	r0, #1
 80049fa:	4240      	negs	r0, r0
 80049fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049fe:	2030      	movs	r0, #48	@ 0x30
 8004a00:	18e1      	adds	r1, r4, r3
 8004a02:	3143      	adds	r1, #67	@ 0x43
 8004a04:	7008      	strb	r0, [r1, #0]
 8004a06:	0021      	movs	r1, r4
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	3145      	adds	r1, #69	@ 0x45
 8004a0c:	7809      	ldrb	r1, [r1, #0]
 8004a0e:	18a2      	adds	r2, r4, r2
 8004a10:	3243      	adds	r2, #67	@ 0x43
 8004a12:	3302      	adds	r3, #2
 8004a14:	7011      	strb	r1, [r2, #0]
 8004a16:	e7c1      	b.n	800499c <_printf_common+0x4c>
 8004a18:	0022      	movs	r2, r4
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	9901      	ldr	r1, [sp, #4]
 8004a1e:	9800      	ldr	r0, [sp, #0]
 8004a20:	9f08      	ldr	r7, [sp, #32]
 8004a22:	321a      	adds	r2, #26
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	d0e6      	beq.n	80049f8 <_printf_common+0xa8>
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7d1      	b.n	80049d2 <_printf_common+0x82>
	...

08004a30 <_printf_i>:
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	b08b      	sub	sp, #44	@ 0x2c
 8004a34:	9206      	str	r2, [sp, #24]
 8004a36:	000a      	movs	r2, r1
 8004a38:	3243      	adds	r2, #67	@ 0x43
 8004a3a:	9307      	str	r3, [sp, #28]
 8004a3c:	9005      	str	r0, [sp, #20]
 8004a3e:	9203      	str	r2, [sp, #12]
 8004a40:	7e0a      	ldrb	r2, [r1, #24]
 8004a42:	000c      	movs	r4, r1
 8004a44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a46:	2a78      	cmp	r2, #120	@ 0x78
 8004a48:	d809      	bhi.n	8004a5e <_printf_i+0x2e>
 8004a4a:	2a62      	cmp	r2, #98	@ 0x62
 8004a4c:	d80b      	bhi.n	8004a66 <_printf_i+0x36>
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	d100      	bne.n	8004a54 <_printf_i+0x24>
 8004a52:	e0bc      	b.n	8004bce <_printf_i+0x19e>
 8004a54:	497b      	ldr	r1, [pc, #492]	@ (8004c44 <_printf_i+0x214>)
 8004a56:	9104      	str	r1, [sp, #16]
 8004a58:	2a58      	cmp	r2, #88	@ 0x58
 8004a5a:	d100      	bne.n	8004a5e <_printf_i+0x2e>
 8004a5c:	e090      	b.n	8004b80 <_printf_i+0x150>
 8004a5e:	0025      	movs	r5, r4
 8004a60:	3542      	adds	r5, #66	@ 0x42
 8004a62:	702a      	strb	r2, [r5, #0]
 8004a64:	e022      	b.n	8004aac <_printf_i+0x7c>
 8004a66:	0010      	movs	r0, r2
 8004a68:	3863      	subs	r0, #99	@ 0x63
 8004a6a:	2815      	cmp	r0, #21
 8004a6c:	d8f7      	bhi.n	8004a5e <_printf_i+0x2e>
 8004a6e:	f7fb fb4b 	bl	8000108 <__gnu_thumb1_case_shi>
 8004a72:	0016      	.short	0x0016
 8004a74:	fff6001f 	.word	0xfff6001f
 8004a78:	fff6fff6 	.word	0xfff6fff6
 8004a7c:	001ffff6 	.word	0x001ffff6
 8004a80:	fff6fff6 	.word	0xfff6fff6
 8004a84:	fff6fff6 	.word	0xfff6fff6
 8004a88:	003600a1 	.word	0x003600a1
 8004a8c:	fff60080 	.word	0xfff60080
 8004a90:	00b2fff6 	.word	0x00b2fff6
 8004a94:	0036fff6 	.word	0x0036fff6
 8004a98:	fff6fff6 	.word	0xfff6fff6
 8004a9c:	0084      	.short	0x0084
 8004a9e:	0025      	movs	r5, r4
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	3542      	adds	r5, #66	@ 0x42
 8004aa4:	1d11      	adds	r1, r2, #4
 8004aa6:	6019      	str	r1, [r3, #0]
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	702b      	strb	r3, [r5, #0]
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0a0      	b.n	8004bf2 <_printf_i+0x1c2>
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	6809      	ldr	r1, [r1, #0]
 8004ab4:	1d02      	adds	r2, r0, #4
 8004ab6:	060d      	lsls	r5, r1, #24
 8004ab8:	d50b      	bpl.n	8004ad2 <_printf_i+0xa2>
 8004aba:	6806      	ldr	r6, [r0, #0]
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	2e00      	cmp	r6, #0
 8004ac0:	da03      	bge.n	8004aca <_printf_i+0x9a>
 8004ac2:	232d      	movs	r3, #45	@ 0x2d
 8004ac4:	9a03      	ldr	r2, [sp, #12]
 8004ac6:	4276      	negs	r6, r6
 8004ac8:	7013      	strb	r3, [r2, #0]
 8004aca:	4b5e      	ldr	r3, [pc, #376]	@ (8004c44 <_printf_i+0x214>)
 8004acc:	270a      	movs	r7, #10
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	e018      	b.n	8004b04 <_printf_i+0xd4>
 8004ad2:	6806      	ldr	r6, [r0, #0]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	0649      	lsls	r1, r1, #25
 8004ad8:	d5f1      	bpl.n	8004abe <_printf_i+0x8e>
 8004ada:	b236      	sxth	r6, r6
 8004adc:	e7ef      	b.n	8004abe <_printf_i+0x8e>
 8004ade:	6808      	ldr	r0, [r1, #0]
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	c940      	ldmia	r1!, {r6}
 8004ae4:	0605      	lsls	r5, r0, #24
 8004ae6:	d402      	bmi.n	8004aee <_printf_i+0xbe>
 8004ae8:	0640      	lsls	r0, r0, #25
 8004aea:	d500      	bpl.n	8004aee <_printf_i+0xbe>
 8004aec:	b2b6      	uxth	r6, r6
 8004aee:	6019      	str	r1, [r3, #0]
 8004af0:	4b54      	ldr	r3, [pc, #336]	@ (8004c44 <_printf_i+0x214>)
 8004af2:	270a      	movs	r7, #10
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	2a6f      	cmp	r2, #111	@ 0x6f
 8004af8:	d100      	bne.n	8004afc <_printf_i+0xcc>
 8004afa:	3f02      	subs	r7, #2
 8004afc:	0023      	movs	r3, r4
 8004afe:	2200      	movs	r2, #0
 8004b00:	3343      	adds	r3, #67	@ 0x43
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	60a3      	str	r3, [r4, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db03      	blt.n	8004b14 <_printf_i+0xe4>
 8004b0c:	2104      	movs	r1, #4
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	438a      	bics	r2, r1
 8004b12:	6022      	str	r2, [r4, #0]
 8004b14:	2e00      	cmp	r6, #0
 8004b16:	d102      	bne.n	8004b1e <_printf_i+0xee>
 8004b18:	9d03      	ldr	r5, [sp, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00c      	beq.n	8004b38 <_printf_i+0x108>
 8004b1e:	9d03      	ldr	r5, [sp, #12]
 8004b20:	0030      	movs	r0, r6
 8004b22:	0039      	movs	r1, r7
 8004b24:	f7fb fb80 	bl	8000228 <__aeabi_uidivmod>
 8004b28:	9b04      	ldr	r3, [sp, #16]
 8004b2a:	3d01      	subs	r5, #1
 8004b2c:	5c5b      	ldrb	r3, [r3, r1]
 8004b2e:	702b      	strb	r3, [r5, #0]
 8004b30:	0033      	movs	r3, r6
 8004b32:	0006      	movs	r6, r0
 8004b34:	429f      	cmp	r7, r3
 8004b36:	d9f3      	bls.n	8004b20 <_printf_i+0xf0>
 8004b38:	2f08      	cmp	r7, #8
 8004b3a:	d109      	bne.n	8004b50 <_printf_i+0x120>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	07db      	lsls	r3, r3, #31
 8004b40:	d506      	bpl.n	8004b50 <_printf_i+0x120>
 8004b42:	6862      	ldr	r2, [r4, #4]
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	dc02      	bgt.n	8004b50 <_printf_i+0x120>
 8004b4a:	2330      	movs	r3, #48	@ 0x30
 8004b4c:	3d01      	subs	r5, #1
 8004b4e:	702b      	strb	r3, [r5, #0]
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	1b5b      	subs	r3, r3, r5
 8004b54:	6123      	str	r3, [r4, #16]
 8004b56:	9b07      	ldr	r3, [sp, #28]
 8004b58:	0021      	movs	r1, r4
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	9805      	ldr	r0, [sp, #20]
 8004b5e:	9b06      	ldr	r3, [sp, #24]
 8004b60:	aa09      	add	r2, sp, #36	@ 0x24
 8004b62:	f7ff fef5 	bl	8004950 <_printf_common>
 8004b66:	3001      	adds	r0, #1
 8004b68:	d148      	bne.n	8004bfc <_printf_i+0x1cc>
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	4240      	negs	r0, r0
 8004b6e:	b00b      	add	sp, #44	@ 0x2c
 8004b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b72:	2220      	movs	r2, #32
 8004b74:	6809      	ldr	r1, [r1, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	2278      	movs	r2, #120	@ 0x78
 8004b7c:	4932      	ldr	r1, [pc, #200]	@ (8004c48 <_printf_i+0x218>)
 8004b7e:	9104      	str	r1, [sp, #16]
 8004b80:	0021      	movs	r1, r4
 8004b82:	3145      	adds	r1, #69	@ 0x45
 8004b84:	700a      	strb	r2, [r1, #0]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	c940      	ldmia	r1!, {r6}
 8004b8c:	0610      	lsls	r0, r2, #24
 8004b8e:	d402      	bmi.n	8004b96 <_printf_i+0x166>
 8004b90:	0650      	lsls	r0, r2, #25
 8004b92:	d500      	bpl.n	8004b96 <_printf_i+0x166>
 8004b94:	b2b6      	uxth	r6, r6
 8004b96:	6019      	str	r1, [r3, #0]
 8004b98:	07d3      	lsls	r3, r2, #31
 8004b9a:	d502      	bpl.n	8004ba2 <_printf_i+0x172>
 8004b9c:	2320      	movs	r3, #32
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	2e00      	cmp	r6, #0
 8004ba4:	d001      	beq.n	8004baa <_printf_i+0x17a>
 8004ba6:	2710      	movs	r7, #16
 8004ba8:	e7a8      	b.n	8004afc <_printf_i+0xcc>
 8004baa:	2220      	movs	r2, #32
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	4393      	bics	r3, r2
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	e7f8      	b.n	8004ba6 <_printf_i+0x176>
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	680d      	ldr	r5, [r1, #0]
 8004bb8:	1d10      	adds	r0, r2, #4
 8004bba:	6949      	ldr	r1, [r1, #20]
 8004bbc:	6018      	str	r0, [r3, #0]
 8004bbe:	6813      	ldr	r3, [r2, #0]
 8004bc0:	062e      	lsls	r6, r5, #24
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_i+0x198>
 8004bc4:	6019      	str	r1, [r3, #0]
 8004bc6:	e002      	b.n	8004bce <_printf_i+0x19e>
 8004bc8:	066d      	lsls	r5, r5, #25
 8004bca:	d5fb      	bpl.n	8004bc4 <_printf_i+0x194>
 8004bcc:	8019      	strh	r1, [r3, #0]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9d03      	ldr	r5, [sp, #12]
 8004bd2:	6123      	str	r3, [r4, #16]
 8004bd4:	e7bf      	b.n	8004b56 <_printf_i+0x126>
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	1d11      	adds	r1, r2, #4
 8004bda:	6019      	str	r1, [r3, #0]
 8004bdc:	6815      	ldr	r5, [r2, #0]
 8004bde:	2100      	movs	r1, #0
 8004be0:	0028      	movs	r0, r5
 8004be2:	6862      	ldr	r2, [r4, #4]
 8004be4:	f000 f9cc 	bl	8004f80 <memchr>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d001      	beq.n	8004bf0 <_printf_i+0x1c0>
 8004bec:	1b40      	subs	r0, r0, r5
 8004bee:	6060      	str	r0, [r4, #4]
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	6123      	str	r3, [r4, #16]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9a03      	ldr	r2, [sp, #12]
 8004bf8:	7013      	strb	r3, [r2, #0]
 8004bfa:	e7ac      	b.n	8004b56 <_printf_i+0x126>
 8004bfc:	002a      	movs	r2, r5
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	9906      	ldr	r1, [sp, #24]
 8004c02:	9805      	ldr	r0, [sp, #20]
 8004c04:	9d07      	ldr	r5, [sp, #28]
 8004c06:	47a8      	blx	r5
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d0ae      	beq.n	8004b6a <_printf_i+0x13a>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	079b      	lsls	r3, r3, #30
 8004c10:	d415      	bmi.n	8004c3e <_printf_i+0x20e>
 8004c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c14:	68e0      	ldr	r0, [r4, #12]
 8004c16:	4298      	cmp	r0, r3
 8004c18:	daa9      	bge.n	8004b6e <_printf_i+0x13e>
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	e7a7      	b.n	8004b6e <_printf_i+0x13e>
 8004c1e:	0022      	movs	r2, r4
 8004c20:	2301      	movs	r3, #1
 8004c22:	9906      	ldr	r1, [sp, #24]
 8004c24:	9805      	ldr	r0, [sp, #20]
 8004c26:	9e07      	ldr	r6, [sp, #28]
 8004c28:	3219      	adds	r2, #25
 8004c2a:	47b0      	blx	r6
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d09c      	beq.n	8004b6a <_printf_i+0x13a>
 8004c30:	3501      	adds	r5, #1
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	dcf0      	bgt.n	8004c1e <_printf_i+0x1ee>
 8004c3c:	e7e9      	b.n	8004c12 <_printf_i+0x1e2>
 8004c3e:	2500      	movs	r5, #0
 8004c40:	e7f7      	b.n	8004c32 <_printf_i+0x202>
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	080052f3 	.word	0x080052f3
 8004c48:	08005304 	.word	0x08005304

08004c4c <__sflush_r>:
 8004c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c4e:	220c      	movs	r2, #12
 8004c50:	5e8b      	ldrsh	r3, [r1, r2]
 8004c52:	0005      	movs	r5, r0
 8004c54:	000c      	movs	r4, r1
 8004c56:	071a      	lsls	r2, r3, #28
 8004c58:	d456      	bmi.n	8004d08 <__sflush_r+0xbc>
 8004c5a:	684a      	ldr	r2, [r1, #4]
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	dc02      	bgt.n	8004c66 <__sflush_r+0x1a>
 8004c60:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	dd4e      	ble.n	8004d04 <__sflush_r+0xb8>
 8004c66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004c68:	2f00      	cmp	r7, #0
 8004c6a:	d04b      	beq.n	8004d04 <__sflush_r+0xb8>
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2080      	movs	r0, #128	@ 0x80
 8004c70:	682e      	ldr	r6, [r5, #0]
 8004c72:	602a      	str	r2, [r5, #0]
 8004c74:	001a      	movs	r2, r3
 8004c76:	0140      	lsls	r0, r0, #5
 8004c78:	6a21      	ldr	r1, [r4, #32]
 8004c7a:	4002      	ands	r2, r0
 8004c7c:	4203      	tst	r3, r0
 8004c7e:	d033      	beq.n	8004ce8 <__sflush_r+0x9c>
 8004c80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	075b      	lsls	r3, r3, #29
 8004c86:	d506      	bpl.n	8004c96 <__sflush_r+0x4a>
 8004c88:	6863      	ldr	r3, [r4, #4]
 8004c8a:	1ad2      	subs	r2, r2, r3
 8004c8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <__sflush_r+0x4a>
 8004c92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c94:	1ad2      	subs	r2, r2, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	0028      	movs	r0, r5
 8004c9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004c9c:	6a21      	ldr	r1, [r4, #32]
 8004c9e:	47b8      	blx	r7
 8004ca0:	89a2      	ldrh	r2, [r4, #12]
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	d106      	bne.n	8004cb4 <__sflush_r+0x68>
 8004ca6:	6829      	ldr	r1, [r5, #0]
 8004ca8:	291d      	cmp	r1, #29
 8004caa:	d846      	bhi.n	8004d3a <__sflush_r+0xee>
 8004cac:	4b29      	ldr	r3, [pc, #164]	@ (8004d54 <__sflush_r+0x108>)
 8004cae:	410b      	asrs	r3, r1
 8004cb0:	07db      	lsls	r3, r3, #31
 8004cb2:	d442      	bmi.n	8004d3a <__sflush_r+0xee>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	04d2      	lsls	r2, r2, #19
 8004cbe:	d505      	bpl.n	8004ccc <__sflush_r+0x80>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <__sflush_r+0x7e>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d100      	bne.n	8004ccc <__sflush_r+0x80>
 8004cca:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cce:	602e      	str	r6, [r5, #0]
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d017      	beq.n	8004d04 <__sflush_r+0xb8>
 8004cd4:	0023      	movs	r3, r4
 8004cd6:	3344      	adds	r3, #68	@ 0x44
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	d002      	beq.n	8004ce2 <__sflush_r+0x96>
 8004cdc:	0028      	movs	r0, r5
 8004cde:	f7ff fbed 	bl	80044bc <_free_r>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ce6:	e00d      	b.n	8004d04 <__sflush_r+0xb8>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	0028      	movs	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	0002      	movs	r2, r0
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d1c6      	bne.n	8004c82 <__sflush_r+0x36>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0c3      	beq.n	8004c82 <__sflush_r+0x36>
 8004cfa:	2b1d      	cmp	r3, #29
 8004cfc:	d001      	beq.n	8004d02 <__sflush_r+0xb6>
 8004cfe:	2b16      	cmp	r3, #22
 8004d00:	d11a      	bne.n	8004d38 <__sflush_r+0xec>
 8004d02:	602e      	str	r6, [r5, #0]
 8004d04:	2000      	movs	r0, #0
 8004d06:	e01e      	b.n	8004d46 <__sflush_r+0xfa>
 8004d08:	690e      	ldr	r6, [r1, #16]
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d0fa      	beq.n	8004d04 <__sflush_r+0xb8>
 8004d0e:	680f      	ldr	r7, [r1, #0]
 8004d10:	600e      	str	r6, [r1, #0]
 8004d12:	1bba      	subs	r2, r7, r6
 8004d14:	9201      	str	r2, [sp, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	079b      	lsls	r3, r3, #30
 8004d1a:	d100      	bne.n	8004d1e <__sflush_r+0xd2>
 8004d1c:	694a      	ldr	r2, [r1, #20]
 8004d1e:	60a2      	str	r2, [r4, #8]
 8004d20:	9b01      	ldr	r3, [sp, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	ddee      	ble.n	8004d04 <__sflush_r+0xb8>
 8004d26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004d28:	0032      	movs	r2, r6
 8004d2a:	001f      	movs	r7, r3
 8004d2c:	0028      	movs	r0, r5
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	6a21      	ldr	r1, [r4, #32]
 8004d32:	47b8      	blx	r7
 8004d34:	2800      	cmp	r0, #0
 8004d36:	dc07      	bgt.n	8004d48 <__sflush_r+0xfc>
 8004d38:	89a2      	ldrh	r2, [r4, #12]
 8004d3a:	2340      	movs	r3, #64	@ 0x40
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	b21b      	sxth	r3, r3
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	4240      	negs	r0, r0
 8004d46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	1836      	adds	r6, r6, r0
 8004d4c:	1a1b      	subs	r3, r3, r0
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	e7e6      	b.n	8004d20 <__sflush_r+0xd4>
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	dfbffffe 	.word	0xdfbffffe

08004d58 <_fflush_r>:
 8004d58:	690b      	ldr	r3, [r1, #16]
 8004d5a:	b570      	push	{r4, r5, r6, lr}
 8004d5c:	0005      	movs	r5, r0
 8004d5e:	000c      	movs	r4, r1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <_fflush_r+0x12>
 8004d64:	2500      	movs	r5, #0
 8004d66:	0028      	movs	r0, r5
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d004      	beq.n	8004d78 <_fflush_r+0x20>
 8004d6e:	6a03      	ldr	r3, [r0, #32]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <_fflush_r+0x20>
 8004d74:	f7ff f8ec 	bl	8003f50 <__sinit>
 8004d78:	220c      	movs	r2, #12
 8004d7a:	5ea3      	ldrsh	r3, [r4, r2]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f1      	beq.n	8004d64 <_fflush_r+0xc>
 8004d80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d82:	07d2      	lsls	r2, r2, #31
 8004d84:	d404      	bmi.n	8004d90 <_fflush_r+0x38>
 8004d86:	059b      	lsls	r3, r3, #22
 8004d88:	d402      	bmi.n	8004d90 <_fflush_r+0x38>
 8004d8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d8c:	f7ff fb75 	bl	800447a <__retarget_lock_acquire_recursive>
 8004d90:	0028      	movs	r0, r5
 8004d92:	0021      	movs	r1, r4
 8004d94:	f7ff ff5a 	bl	8004c4c <__sflush_r>
 8004d98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d9a:	0005      	movs	r5, r0
 8004d9c:	07db      	lsls	r3, r3, #31
 8004d9e:	d4e2      	bmi.n	8004d66 <_fflush_r+0xe>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	059b      	lsls	r3, r3, #22
 8004da4:	d4df      	bmi.n	8004d66 <_fflush_r+0xe>
 8004da6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004da8:	f7ff fb68 	bl	800447c <__retarget_lock_release_recursive>
 8004dac:	e7db      	b.n	8004d66 <_fflush_r+0xe>
	...

08004db0 <fiprintf>:
 8004db0:	b40e      	push	{r1, r2, r3}
 8004db2:	b517      	push	{r0, r1, r2, r4, lr}
 8004db4:	4c05      	ldr	r4, [pc, #20]	@ (8004dcc <fiprintf+0x1c>)
 8004db6:	ab05      	add	r3, sp, #20
 8004db8:	cb04      	ldmia	r3!, {r2}
 8004dba:	0001      	movs	r1, r0
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	f7ff fcaa 	bl	8004718 <_vfiprintf_r>
 8004dc4:	bc1e      	pop	{r1, r2, r3, r4}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	b003      	add	sp, #12
 8004dca:	4718      	bx	r3
 8004dcc:	20000018 	.word	0x20000018

08004dd0 <__swhatbuf_r>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	000e      	movs	r6, r1
 8004dd4:	001d      	movs	r5, r3
 8004dd6:	230e      	movs	r3, #14
 8004dd8:	5ec9      	ldrsh	r1, [r1, r3]
 8004dda:	0014      	movs	r4, r2
 8004ddc:	b096      	sub	sp, #88	@ 0x58
 8004dde:	2900      	cmp	r1, #0
 8004de0:	da0c      	bge.n	8004dfc <__swhatbuf_r+0x2c>
 8004de2:	89b2      	ldrh	r2, [r6, #12]
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	0011      	movs	r1, r2
 8004de8:	4019      	ands	r1, r3
 8004dea:	421a      	tst	r2, r3
 8004dec:	d114      	bne.n	8004e18 <__swhatbuf_r+0x48>
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	2000      	movs	r0, #0
 8004df4:	6029      	str	r1, [r5, #0]
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	b016      	add	sp, #88	@ 0x58
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	466a      	mov	r2, sp
 8004dfe:	f000 f889 	bl	8004f14 <_fstat_r>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	dbed      	blt.n	8004de2 <__swhatbuf_r+0x12>
 8004e06:	23f0      	movs	r3, #240	@ 0xf0
 8004e08:	9901      	ldr	r1, [sp, #4]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	4019      	ands	r1, r3
 8004e0e:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <__swhatbuf_r+0x50>)
 8004e10:	18c9      	adds	r1, r1, r3
 8004e12:	424b      	negs	r3, r1
 8004e14:	4159      	adcs	r1, r3
 8004e16:	e7ea      	b.n	8004dee <__swhatbuf_r+0x1e>
 8004e18:	2100      	movs	r1, #0
 8004e1a:	2340      	movs	r3, #64	@ 0x40
 8004e1c:	e7e9      	b.n	8004df2 <__swhatbuf_r+0x22>
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	ffffe000 	.word	0xffffe000

08004e24 <__smakebuf_r>:
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	2602      	movs	r6, #2
 8004e28:	898b      	ldrh	r3, [r1, #12]
 8004e2a:	0005      	movs	r5, r0
 8004e2c:	000c      	movs	r4, r1
 8004e2e:	b085      	sub	sp, #20
 8004e30:	4233      	tst	r3, r6
 8004e32:	d007      	beq.n	8004e44 <__smakebuf_r+0x20>
 8004e34:	0023      	movs	r3, r4
 8004e36:	3347      	adds	r3, #71	@ 0x47
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	6163      	str	r3, [r4, #20]
 8004e40:	b005      	add	sp, #20
 8004e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	aa02      	add	r2, sp, #8
 8004e48:	f7ff ffc2 	bl	8004dd0 <__swhatbuf_r>
 8004e4c:	9f02      	ldr	r7, [sp, #8]
 8004e4e:	9001      	str	r0, [sp, #4]
 8004e50:	0039      	movs	r1, r7
 8004e52:	0028      	movs	r0, r5
 8004e54:	f7ff fba8 	bl	80045a8 <_malloc_r>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d108      	bne.n	8004e6e <__smakebuf_r+0x4a>
 8004e5c:	220c      	movs	r2, #12
 8004e5e:	5ea3      	ldrsh	r3, [r4, r2]
 8004e60:	059a      	lsls	r2, r3, #22
 8004e62:	d4ed      	bmi.n	8004e40 <__smakebuf_r+0x1c>
 8004e64:	2203      	movs	r2, #3
 8004e66:	4393      	bics	r3, r2
 8004e68:	431e      	orrs	r6, r3
 8004e6a:	81a6      	strh	r6, [r4, #12]
 8004e6c:	e7e2      	b.n	8004e34 <__smakebuf_r+0x10>
 8004e6e:	2380      	movs	r3, #128	@ 0x80
 8004e70:	89a2      	ldrh	r2, [r4, #12]
 8004e72:	6020      	str	r0, [r4, #0]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	6120      	str	r0, [r4, #16]
 8004e7c:	6167      	str	r7, [r4, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <__smakebuf_r+0x78>
 8004e82:	0028      	movs	r0, r5
 8004e84:	230e      	movs	r3, #14
 8004e86:	5ee1      	ldrsh	r1, [r4, r3]
 8004e88:	f000 f856 	bl	8004f38 <_isatty_r>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d005      	beq.n	8004e9c <__smakebuf_r+0x78>
 8004e90:	2303      	movs	r3, #3
 8004e92:	89a2      	ldrh	r2, [r4, #12]
 8004e94:	439a      	bics	r2, r3
 8004e96:	3b02      	subs	r3, #2
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	9a01      	ldr	r2, [sp, #4]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	81a3      	strh	r3, [r4, #12]
 8004ea4:	e7cc      	b.n	8004e40 <__smakebuf_r+0x1c>

08004ea6 <_putc_r>:
 8004ea6:	b570      	push	{r4, r5, r6, lr}
 8004ea8:	0006      	movs	r6, r0
 8004eaa:	000d      	movs	r5, r1
 8004eac:	0014      	movs	r4, r2
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d004      	beq.n	8004ebc <_putc_r+0x16>
 8004eb2:	6a03      	ldr	r3, [r0, #32]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <_putc_r+0x16>
 8004eb8:	f7ff f84a 	bl	8003f50 <__sinit>
 8004ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ebe:	07db      	lsls	r3, r3, #31
 8004ec0:	d405      	bmi.n	8004ece <_putc_r+0x28>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	059b      	lsls	r3, r3, #22
 8004ec6:	d402      	bmi.n	8004ece <_putc_r+0x28>
 8004ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eca:	f7ff fad6 	bl	800447a <__retarget_lock_acquire_recursive>
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	60a3      	str	r3, [r4, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	da05      	bge.n	8004ee4 <_putc_r+0x3e>
 8004ed8:	69a2      	ldr	r2, [r4, #24]
 8004eda:	4293      	cmp	r3, r2
 8004edc:	db12      	blt.n	8004f04 <_putc_r+0x5e>
 8004ede:	b2eb      	uxtb	r3, r5
 8004ee0:	2b0a      	cmp	r3, #10
 8004ee2:	d00f      	beq.n	8004f04 <_putc_r+0x5e>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	6022      	str	r2, [r4, #0]
 8004eea:	701d      	strb	r5, [r3, #0]
 8004eec:	b2ed      	uxtb	r5, r5
 8004eee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ef0:	07db      	lsls	r3, r3, #31
 8004ef2:	d405      	bmi.n	8004f00 <_putc_r+0x5a>
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	059b      	lsls	r3, r3, #22
 8004ef8:	d402      	bmi.n	8004f00 <_putc_r+0x5a>
 8004efa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004efc:	f7ff fabe 	bl	800447c <__retarget_lock_release_recursive>
 8004f00:	0028      	movs	r0, r5
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	0029      	movs	r1, r5
 8004f06:	0022      	movs	r2, r4
 8004f08:	0030      	movs	r0, r6
 8004f0a:	f7ff f91b 	bl	8004144 <__swbuf_r>
 8004f0e:	0005      	movs	r5, r0
 8004f10:	e7ed      	b.n	8004eee <_putc_r+0x48>
	...

08004f14 <_fstat_r>:
 8004f14:	2300      	movs	r3, #0
 8004f16:	b570      	push	{r4, r5, r6, lr}
 8004f18:	4d06      	ldr	r5, [pc, #24]	@ (8004f34 <_fstat_r+0x20>)
 8004f1a:	0004      	movs	r4, r0
 8004f1c:	0008      	movs	r0, r1
 8004f1e:	0011      	movs	r1, r2
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	f7fb fe7d 	bl	8000c20 <_fstat>
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d103      	bne.n	8004f32 <_fstat_r+0x1e>
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d000      	beq.n	8004f32 <_fstat_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	20000430 	.word	0x20000430

08004f38 <_isatty_r>:
 8004f38:	2300      	movs	r3, #0
 8004f3a:	b570      	push	{r4, r5, r6, lr}
 8004f3c:	4d06      	ldr	r5, [pc, #24]	@ (8004f58 <_isatty_r+0x20>)
 8004f3e:	0004      	movs	r4, r0
 8004f40:	0008      	movs	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fb fe7a 	bl	8000c3c <_isatty>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d103      	bne.n	8004f54 <_isatty_r+0x1c>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d000      	beq.n	8004f54 <_isatty_r+0x1c>
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	20000430 	.word	0x20000430

08004f5c <_sbrk_r>:
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	b570      	push	{r4, r5, r6, lr}
 8004f60:	4d06      	ldr	r5, [pc, #24]	@ (8004f7c <_sbrk_r+0x20>)
 8004f62:	0004      	movs	r4, r0
 8004f64:	0008      	movs	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fb fe7c 	bl	8000c64 <_sbrk>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d103      	bne.n	8004f78 <_sbrk_r+0x1c>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d000      	beq.n	8004f78 <_sbrk_r+0x1c>
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	20000430 	.word	0x20000430

08004f80 <memchr>:
 8004f80:	b2c9      	uxtb	r1, r1
 8004f82:	1882      	adds	r2, r0, r2
 8004f84:	4290      	cmp	r0, r2
 8004f86:	d101      	bne.n	8004f8c <memchr+0xc>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	4770      	bx	lr
 8004f8c:	7803      	ldrb	r3, [r0, #0]
 8004f8e:	428b      	cmp	r3, r1
 8004f90:	d0fb      	beq.n	8004f8a <memchr+0xa>
 8004f92:	3001      	adds	r0, #1
 8004f94:	e7f6      	b.n	8004f84 <memchr+0x4>

08004f96 <abort>:
 8004f96:	2006      	movs	r0, #6
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	f000 f82d 	bl	8004ff8 <raise>
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f7fb fe0a 	bl	8000bb8 <_exit>

08004fa4 <_raise_r>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	0004      	movs	r4, r0
 8004fa8:	000d      	movs	r5, r1
 8004faa:	291f      	cmp	r1, #31
 8004fac:	d904      	bls.n	8004fb8 <_raise_r+0x14>
 8004fae:	2316      	movs	r3, #22
 8004fb0:	6003      	str	r3, [r0, #0]
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	4240      	negs	r0, r0
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <_raise_r+0x24>
 8004fbe:	008a      	lsls	r2, r1, #2
 8004fc0:	189b      	adds	r3, r3, r2
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	d108      	bne.n	8004fda <_raise_r+0x36>
 8004fc8:	0020      	movs	r0, r4
 8004fca:	f000 f831 	bl	8005030 <_getpid_r>
 8004fce:	002a      	movs	r2, r5
 8004fd0:	0001      	movs	r1, r0
 8004fd2:	0020      	movs	r0, r4
 8004fd4:	f000 f81a 	bl	800500c <_kill_r>
 8004fd8:	e7ed      	b.n	8004fb6 <_raise_r+0x12>
 8004fda:	2a01      	cmp	r2, #1
 8004fdc:	d009      	beq.n	8004ff2 <_raise_r+0x4e>
 8004fde:	1c51      	adds	r1, r2, #1
 8004fe0:	d103      	bne.n	8004fea <_raise_r+0x46>
 8004fe2:	2316      	movs	r3, #22
 8004fe4:	6003      	str	r3, [r0, #0]
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	e7e5      	b.n	8004fb6 <_raise_r+0x12>
 8004fea:	2100      	movs	r1, #0
 8004fec:	0028      	movs	r0, r5
 8004fee:	6019      	str	r1, [r3, #0]
 8004ff0:	4790      	blx	r2
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e7df      	b.n	8004fb6 <_raise_r+0x12>
	...

08004ff8 <raise>:
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <raise+0x10>)
 8004ffc:	0001      	movs	r1, r0
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	f7ff ffd0 	bl	8004fa4 <_raise_r>
 8005004:	bd10      	pop	{r4, pc}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	20000018 	.word	0x20000018

0800500c <_kill_r>:
 800500c:	2300      	movs	r3, #0
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	4d06      	ldr	r5, [pc, #24]	@ (800502c <_kill_r+0x20>)
 8005012:	0004      	movs	r4, r0
 8005014:	0008      	movs	r0, r1
 8005016:	0011      	movs	r1, r2
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	f7fb fdbd 	bl	8000b98 <_kill>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d103      	bne.n	800502a <_kill_r+0x1e>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d000      	beq.n	800502a <_kill_r+0x1e>
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	20000430 	.word	0x20000430

08005030 <_getpid_r>:
 8005030:	b510      	push	{r4, lr}
 8005032:	f7fb fdab 	bl	8000b8c <_getpid>
 8005036:	bd10      	pop	{r4, pc}

08005038 <_init>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr

08005044 <_fini>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr
